plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    //git-hooks
    id 'com.github.jakemarsden.git-hooks' version '0.0.2'
    //spotless
    id 'com.diffplug.spotless' version '6.25.0'
    //Flyway 플러그인
    id 'org.flywaydb.flyway' version '9.22.3'
    //Jacoco
    id 'jacoco'
    //SonarQube
    id 'org.sonarqube' version '6.2.0.5505'
}

group = 'com.education'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    //Apache Kafka
    implementation 'org.springframework.kafka:spring-kafka:3.2.0'
    //Spring Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    //Spring Actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    // Swagger UI
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.5'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    // Swagger UI
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.5'
    testImplementation 'org.springframework.security:spring-security-test'
    compileOnly 'org.projectlombok:lombok'
    //developmentOnly 'org.springframework.boot:spring-boot-devtools' 캐싱을 위해서 끄기
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    //OAuth
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.security:spring-security-oauth2-jose'
    //Google OAuth
    implementation 'com.google.api-client:google-api-client:2.4.0'
    implementation 'com.google.oauth-client:google-oauth-client-jetty:1.34.1'
    implementation 'com.google.http-client:google-http-client-jackson2:1.43.3'
    // Redis + Cache
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    // Kakao id_token 검증용
    implementation 'com.auth0:java-jwt:4.4.0'
    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'
    // Flyway
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'
    // MySQL JDBC 드라이버
    implementation 'mysql:mysql-connector-java:8.0.33'
    // 테스트코드 수행할대 필요한 H2
    testImplementation 'com.h2database:h2'
    // Spring retry
    implementation 'org.springframework.retry:spring-retry'
    //websocket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-json'
    implementation 'org.webjars:stomp-websocket:2.3.3'
}

jacoco {
    toolVersion = '0.8.13'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}
gitHooks {
    // where to install your hooks; you can leave this at the default '.githooks'
    hooksDirectory = file('.git/hooks')

    // load each script file as a String so the plugin writes its content
    hooks = [
            'prepare-commit-msg': file('githooks-src/prepare-commit-msg').text,
            'commit-msg'        : file('githooks-src/commit-msg').text
    ]
}

spotless {
    java {
        googleJavaFormat('1.17.0') // 버전은 최신으로 변경 가능
        target 'src/**/*.java'
    }
}

def includePatterns = [
        '**/service/**',
        '**/consumer/**',
        '**/producer/**'
]

def sonarIncludePatterns = [
        '**/service/**/*.java',
        '**/consumer/**/*.java',
        '**/producer/**/*.java'
]

sonarqube {
    properties {
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.projectKey', 'LGCNS-PJT-EDU_EDU_BE'
        property 'sonar.organization', 'lgcns-pjt-edu'
        property 'sonar.sourceEncoding', 'UTF-8'

        property 'sonar.sources', 'src/main/java'
        property 'sonar.tests', 'src/test/java'
        property 'sonar.inclusions', sonarIncludePatterns.join(',')

        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }
}

jacocoTestReport {
    dependsOn test
    finalizedBy 'jacocoTestCoverageVerification'

    reports {
        xml.required  = true
        html.required = true
        xml.destination file("$buildDir/reports/jacoco/test/jacocoTestReport.xml")
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, include: includePatterns)
                })
        )
    }
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport

    violationRules {
        rule {
            enabled  = true
            element  = 'CLASS'
            includes = includePatterns   // ← 소문자 변수 사용

            // ① 라인 커버리지
            limit {
                counter = 'LINE'
                value   = 'COVEREDRATIO'
                minimum = 0.00
            }
            // ② 브랜치 커버리지
            limit {
                counter = 'BRANCH'
                value   = 'COVEREDRATIO'
                minimum = 0.00
            }
        }

        rule {
            enabled  = true
            element  = 'METHOD'
            includes = includePatterns

            // ③ 메서드 라인 수 제한
            limit {
                counter = 'LINE'
                value   = 'TOTALCOUNT'
                maximum = 200
            }
        }
    }
}
