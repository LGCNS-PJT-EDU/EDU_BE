# .github/workflows/quality.yml
name: SonarCloud Quality Gate

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]
    types: [ opened, synchronize, reopened ]

jobs:
  build-and-analyze:
    runs-on: ubuntu-latest
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    steps:
      # 1) 소스 체크아웃
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) JDK 21 설치
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      # 3) 캐시: Sonar + Gradle
      - name: Cache Sonar packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      # 4) 빌드·테스트·커버리지 리포트 생성 (Spotless 체크 제외)
      - name: Build, Test & Generate Coverage
        run: ./gradlew clean test jacocoTestReport -x spotlessJavaCheck

      # 5) SonarCloud 스캔 (Jacoco XML 자동 감지)
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@v2
        with:
          args: -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      # 6) 전체 커버리지 가져와서 PR 코멘트 달기
      - name: Fetch overall coverage
        run: |
          COVERAGE=$(curl -s \
            -u "${{ secrets.SONAR_TOKEN }}:" \
            "https://sonarcloud.io/api/measures/component?component=LGCNS-PJT-EDU_EDU_BE&metricKeys=coverage" \
            | jq -r '.component.measures[0].value')
          echo "Overall Coverage: ${COVERAGE}%"
          gh pr comment ${{ github.event.pull_request.number }} \
            --body "🔍 **Overall Coverage**: ${COVERAGE}%"
