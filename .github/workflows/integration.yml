name: CI Pipeline

on:
  push:
    branches:
      - main

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Set environment variables for OAuth
        run: |
          echo "KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}" >> $GITHUB_ENV
          echo "KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "KAKAO_REDIRECT_URI=${{ secrets.KAKAO_REDIRECT_URI }}" >> $GITHUB_ENV
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "GOOGLE_REDIRECT_URI=${{ secrets.GOOGLE_REDIRECT_URI }}" >> $GITHUB_ENV
          echo "NAVER_REQUEST_TOKEN_URI=${{ secrets.NAVER_REQUEST_TOKEN_URI }}" >> $GITHUB_ENV
          echo "NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}" >> $GITHUB_ENV
          echo "NAVER_SECRET=${{ secrets.NAVER_SECRET }}" >> $GITHUB_ENV
          echo "NAVER_REDIRECT_URI=${{ secrets.NAVER_REDIRECT_URI }}" >> $GITHUB_ENV
          echo "NAVER_USER_INFO_URI=${{ secrets.NAVER_USER_INFO_URI }}" >> $GITHUB_ENV
          echo "SPRING_REDIS_HOST=${{ secrets.SPRING_REDIS_HOST }}" >> $GITHUB_ENV
          echo "SPRING_REDIS_PORT=${{ secrets.SPRING_REDIS_PORT }}" >> $GITHUB_ENV
          echo "MYSQL_ENDPOINT=${{ secrets.MYSQL_ENDPOINT }}" >> $GITHUB_ENV
          echo "MYSQL_USERNAME=${{ secrets.MYSQL_USERNAME }}" >> $GITHUB_ENV
          echo "MYSQL_PORT=${{ secrets.MYSQL_PORT }}" >> $GITHUB_ENV
          echo "MYSQL_NAME=${{ secrets.MYSQL_NAME }}" >> $GITHUB_ENV
          echo "FAST_API_URI=${{ secrets.FAST_API_URL }}" >> $GITHUB_ENV
          echo "CLIENT_BASE_URL=${{ secrets.CLIENT_BASE_URL }}" >> $GITHUB_ENV

      - name: Grant execute permission for Gradle
        run: chmod +x ./gradlew

      - name: Build & Run Tests
        run: ./gradlew test

      - name: Build Application
        run: ./gradlew clean build -x test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2 # GitHub에서 제공하는 공식 액션을 사용한다는 뜻. aws-actions/configure-aws-credentials는 AWS CLI 인증을 설정
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr # 이 스텝의 출력값에 이름을 붙여주는 것.
        uses: aws-actions/amazon-ecr-login@v1 # 또 다른 공식 액션을 사용한다는 뜻. ECR에 도커 로그인 명령을 대신 실행

      - name: Build, Tag, and Push Docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }} # 커밋 해시가 태그로 이용될 수 있도록 함.
          # run은 sha기반 태그와 함께 latest 태그도 ecr에 푸쉬하기 위해 추가됨
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
