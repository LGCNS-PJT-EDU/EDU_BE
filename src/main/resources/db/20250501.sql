-- users 테이블 삭제
DROP TABLE IF EXISTS users;

-- users 테이블 생성
CREATE TABLE users (
  user_id BIGINT AUTO_INCREMENT PRIMARY KEY,
  email VARCHAR(255) NOT NULL,
  nickname VARCHAR(255) NOT NULL,
  password VARCHAR(255),
  login_type VARCHAR(50) NOT NULL,
  is_active BOOLEAN NOT NULL DEFAULT TRUE
);

-- diagnosis, choice 테이블 삭제
DROP TABLE IF EXISTS choice;
DROP TABLE IF EXISTS diagnosis;

-- diagnosis 테이블 생성
CREATE TABLE diagnosis (
    diagnosis_id BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    question TEXT NOT NULL,
    question_type VARCHAR(50) NOT NULL,
    created_dt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- choice 테이블 생성
CREATE TABLE choice (
    choice_id BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    choice_num INT NOT NULL,
    choice TEXT NOT NULL,
    value VARCHAR(255) NOT NULL,
    created_dt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    diagnosis_id BIGINT NOT NULL,
    CONSTRAINT fk_choice_diagnosis FOREIGN KEY (diagnosis_id) REFERENCES diagnosis(diagnosis_id)
);

-- 공통 질문 1
INSERT INTO diagnosis (diagnosis_id, question, question_type) VALUES (1, '어느 분야에서 성장하고 싶으신가요?', 'COMMON');
INSERT INTO choice (diagnosis_id, choice_num, choice, value) VALUES
(1, 1, '프론트엔드', 'FE'),
(1, 2, '백엔드', 'BE');

-- 공통 질문 2
INSERT INTO diagnosis (diagnosis_id, question, question_type) VALUES (2, '당신이 원하는 강의 분량은 어느정도 인가요?', 'COMMON');
INSERT INTO choice (diagnosis_id, choice_num, choice, value) VALUES
(2, 1, '가볍게 1시간!', '0'),
(2, 2, '짧고 굵게 3시간!', '1'),
(2, 3, '찐득하게 5시간!', '2'),
(2, 4, '깊게 공부하는게 좋아 10시간!', '3'),
(2, 5, '나는야 공부벌레 10시간 이상!', '4');

-- 공통 질문 3
INSERT INTO diagnosis (diagnosis_id, question, question_type) VALUES (3, '한 강의에 얼마까지 투자할 생각이 있으신가요?', 'COMMON');
INSERT INTO choice (diagnosis_id, choice_num, choice, value) VALUES
(3, 1, '무료', '0'),
(3, 2, '5만원 이하', '1'),
(3, 3, '5만원 ~ 10만원', '2'),
(3, 4, '10만원 ~ 20만원', '3'),
(3, 5, '20만원 ~ 50만원', '4'),
(3, 6, '50만원 이상', '5');

-- 공통 질문 4
INSERT INTO diagnosis (diagnosis_id, question, question_type) VALUES (4, '책을 통해 공부하는 것을 좋아하시나요?', 'COMMON');
INSERT INTO choice (diagnosis_id, choice_num, choice, value) VALUES
(4, 1, '네.', 'Y'),
(4, 2, '아니오.', 'N');

-- 프론트엔드 질문 1
INSERT INTO diagnosis (diagnosis_id, question, question_type) VALUES (5, '배우고 싶은 프레임워크가 무엇인가요?', 'FE');
INSERT INTO choice (diagnosis_id, choice_num, choice, value) VALUES
(5, 1, 'React', 'React'),
(5, 2, 'Vue', 'Vue'),
(5, 3, 'Angular', 'Angular');

-- 프론트엔드 질문 2
INSERT INTO diagnosis (diagnosis_id, question, question_type) VALUES (6, '코드를 깔끔하고 일관되게 관리하는 방법(EsLint & Prettier)에 대해 배우고 싶나요?', 'FE');
INSERT INTO choice (diagnosis_id, choice_num, choice, value) VALUES
(6, 1, '네', 'Y'),
(6, 2, '아니오', 'N');

-- 프론트엔드 질문 3
INSERT INTO diagnosis (diagnosis_id, question, question_type) VALUES (7, 'UI를 깔끔하고 체계적으로 만들기 위한 디자인 시스템과 스타일링 방법을 배워보고 싶나요?', 'FE');
INSERT INTO choice (diagnosis_id, choice_num, choice, value) VALUES
(7, 1, '네', 'Y'),
(7, 2, '아니오', 'N');

-- 프론트엔드 질문 4
INSERT INTO diagnosis (diagnosis_id, question, question_type) VALUES (8, '프론트엔드 배포를 자동화하는 과정(CI/CD)에 대해 배우고 싶나요?', 'FE');
INSERT INTO choice (diagnosis_id, choice_num, choice, value) VALUES
(8, 1, '네', 'Y'),
(8, 2, '아니오', 'N');

-- 프론트엔드 질문 5
INSERT INTO diagnosis (diagnosis_id, question, question_type) VALUES (9, '컴포넌트 단위의 UI 테스트 방법론(예: Storybook, Jest + React Testing Library)을 배우고 싶나요?', 'FE');
INSERT INTO choice (diagnosis_id, choice_num, choice, value) VALUES
(9, 1, '네', 'Y'),
(9, 2, '아니오', 'N');

-- 프론트엔드 질문 6
INSERT INTO diagnosis (diagnosis_id, question, question_type) VALUES (10, '사용자의 실제 사용 흐름(E2E 테스트, Cypress 등)을 테스트하는 방법에 대해 배우고 싶나요?', 'FE');
INSERT INTO choice (diagnosis_id, choice_num, choice, value) VALUES
(10, 1, '네', 'Y'),
(10, 2, '아니오', 'N');

-- 백엔드 질문 1
INSERT INTO diagnosis (diagnosis_id, question, question_type) VALUES (11, '선호하는 프레임워크는 무엇인가요?', 'BE');
INSERT INTO choice (diagnosis_id, choice_num, choice, value) VALUES
(11, 1, 'Java/Spring', 'Java/Spring'),
(11, 2, 'Python/Flask', 'Python/Flask'),
(11, 3, 'Python/Django', 'Python/Django'),
(11, 4, 'JavaScript/Node.js', 'Js/Node'),
(11, 5, 'Kotlin/Spring', 'Kotlin/Spring');

-- 백엔드 질문 2
INSERT INTO diagnosis (diagnosis_id, question, question_type) VALUES (12, 'RDB 종류별 장단점을 학습하고 싶으신가요?', 'BE');
INSERT INTO choice (diagnosis_id, choice_num, choice, value) VALUES
(12, 1, '네', 'Y'),
(12, 2, '아니오', 'N');

-- 백엔드 질문 3
INSERT INTO diagnosis (diagnosis_id, question, question_type) VALUES (13, '쿼리 최적화, 데이터 정규화에 대해 학습하고 싶으신가요?', 'BE');
INSERT INTO choice (diagnosis_id, choice_num, choice, value) VALUES
(13, 1, '네', 'Y'),
(13, 2, '아니오', 'N');

-- 백엔드 질문 4
INSERT INTO diagnosis (diagnosis_id, question, question_type) VALUES (14, '프레임워크 라이브러리 종류를 학습하고 싶으신가요?', 'BE');
INSERT INTO choice (diagnosis_id, choice_num, choice, value) VALUES
(14, 1, '네', 'Y'),
(14, 2, '아니오', 'N');

-- 백엔드 질문 5
INSERT INTO diagnosis (diagnosis_id, question, question_type) VALUES (15, '프로젝트 운영 배포 방법을 학습하고 싶으신가요?', 'BE');
INSERT INTO choice (diagnosis_id, choice_num, choice, value) VALUES
(15, 1, '네', 'Y'),
(15, 2, '아니오', 'N');

-- roadmap, roadmap_management, subject, track 테이블 삭제
DROP TABLE IF EXISTS roadmap;
DROP TABLE IF EXISTS roadmap_management;
DROP TABLE IF EXISTS chapter;
DROP TABLE IF EXISTS subject;
DROP TABLE IF EXISTS track;



-- track(과정) 테이블 생성
CREATE TABLE track(
    track_id BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    track_nm VARCHAR(255) NOT NULL,
    UNIQUE KEY uk_track (track_nm)
);

-- subject(과목) 테이블 생성
CREATE TABLE subject(
    sub_id BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    sub_nm VARCHAR(255) NOT NULL,
    sub_type VARCHAR(50) NOT NULL,
    sub_essential VARCHAR(1) NOT NULL,
    base_sub_order INT NOT NULL,
    sub_overview TEXT,
    track_id BIGINT NOT NULL,
    CONSTRAINT fk_subject_track FOREIGN KEY (track_id) REFERENCES track(track_id)
);

-- roadmap_management(로드맵 관리) 테이블 생성
CREATE TABLE roadmap_management(
    roadmap_management_id BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    roadmap_nm VARCHAR(255),
    roadmap_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    lecture_amount VARCHAR(255),
    price_level VARCHAR(255),
    user_id BIGINT NOT NULL,
    likes_books BOOLEAN,
    CONSTRAINT fk_roadmap_management_users FOREIGN KEY (user_id) REFERENCES users(user_id)
);

-- roadmap(로드맵) 테이블 생성
CREATE TABLE roadmap(
    roadmap_id BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    order_sub INT NOT NULL,
    sub_id BIGINT NOT NULL,
    roadmap_management_id BIGINT NOT NULL,
    is_complete BOOLEAN NOT NULL DEFAULT FALSE,
    pre_submit_count INT NOT NULL,
    post_submit_count INT NOT NULL,
    level INT NOT NULL DEFAULT 0,
    CONSTRAINT fk_roadmap_subject FOREIGN KEY (sub_id) REFERENCES subject(sub_id),
    CONSTRAINT fk_roadmap_roadmap_management FOREIGN KEY (roadmap_management_id) REFERENCES roadmap_management(roadmap_management_id)
);

-- chapter(단원) 테이블 생성
CREATE TABLE chapter(
    chapter_id BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    chapter_nm VARCHAR(255) NOT NULL,
    chapter_order INT NOT NULL,
    sub_id BIGINT NOT NULL,
    CONSTRAINT fk_chapter_subject FOREIGN KEY (sub_id) REFERENCES subject(sub_id)
);

-- track(과정) 정보 주입
INSERT INTO track (track_id, track_nm) VALUES
    (1, '기초지식'),
    (2, 'VCS'),
    (3, 'HTTP 통신 및 상태 동기화 고도화'),
    (4, 'React 기본'),
    (5, 'Vue 기본'),
    (6, 'Angular 기본'),
    (7, '디자인'),
    (8, '상태관리'),
    (9, 'React 심화'),
    (10, 'Vue 심화'),
    (11, 'Angular 심화'),
    (12, '번들링과 빌드 최적화'),
    (13, '배포 자동화 및 인프라 연계'),
    (14, '컴포넌트 테스트 방법론'),
    (15, '화면 테스트 방법론'),
    (16, 'Linux & Internet'),
    (17, 'Java'),
    (18, 'Python'),
    (19, 'JavaScript'),
    (20, 'Kotlin'),
    (21, 'SQL문'),
    (22, 'More About Database'),
    (23, 'Scaling Database'),
    (24, 'Spring & Spring Boot(Java)'),
    (25, 'Node.js & Express.js'),
    (26, 'Django'),
    (27, 'Flask'),
    (28, 'Spring & Spring Boot(Kotlin)'),
    (29, 'Java Advanced'),
    (30, 'Kotlin Advanced'),
    (31, 'Java & Kotlin Advanced'),
    (32, 'Node.js Advanced'),
    (33, 'Django Advanced'),
    (34, 'Flask Advanced');

-- subject(과목) 정보 주입
INSERT INTO subject (sub_id, sub_nm, track_id, sub_type, sub_essential, base_sub_order, sub_overview) VALUES
    (1, 'HTML', 1, 'FE', 'Y', 1, 'HTML이란? 웹페이지의 뼈대!웹사이트에서 내용을 담당해요.예를 들면, 제목, 글, 버튼, 이미지, 표 같은 걸 HTML로 만들어줍니다.마치 건물의 설계도 같다고 생각하면 돼요. 벽이 어디 있는지, 문은 어디 있는지 알려주는 거죠.'),
    (2, 'CSS', 1, 'FE', 'Y', 2, 'CSS란? 웹페이지에 스타일을 입히는 도구!색깔, 크기, 글꼴, 위치 같은 디자인 요소를 조절해요.예를 들면, 글자의 색을 바꾸거나 버튼의 모양을 다듬고,이미지 간 간격을 조정하고 배경 색을 설정할 수 있어요.마치 집 안을 꾸미는 인테리어처럼,보는 사람이 더 편하고 예쁘게 느낄 수 있도록 만드는 역할을 해요.'),
    (3, 'JavaScript', 1, 'FE', 'Y', 3, 'JavaScript란? 웹페이지를 움직이게 하는 도구!클릭, 입력, 스크롤 같은 사용자 행동에 반응하게 만들어요.예를 들면, 버튼을 누르면 팝업이 뜨거나,입력한 정보를 검사하고, 이미지가 자동으로 바뀌는 기능을 만들 수 있어요.마치 리모컨을 눌렀을 때 TV가 반응하듯,웹페이지에 동작과 반응을 더해주는 역할을 해요.'),
    (4, 'TypeScript', 1, 'FE', 'Y', 4, 'TypeScript란? 더 안전하고 체계적인 코드를 쓰게 도와주는 도구!코드를 작성할 때 변수의 타입을 미리 정해서, 실수를 줄이고 예측 가능한 코드를 만들 수 있어요.예를 들면, 숫자만 받아야 하는 자리에 문자를 넣으면 작성 단계에서 오류를 알려줘요.협업할 때 서로의 코드가 어떻게 작동하는지 쉽게 이해할 수 있도록 도와줘요.마치 도면에 치수를 적어두는 것처럼,코드에 규칙과 설명을 더해서 더 튼튼하고 믿을 수 있는 프로그램을 만들게 해줘요.'),
    (5, 'Virtual DOM', 1, 'FE', 'Y', 5, 'Virtual DOM이란? 웹페이지의 변화를 더 빠르게 처리하기 위한 가상의 화면!화면 전체를 매번 다시 그리지 않고, 변경된 부분만 똑똑하게 찾아서 업데이트해줘요.예를 들면, 리스트 하나만 바뀌었을 때 전체를 새로 그리는 대신바뀐 리스트 항목만 바꿔주는 식으로 효율적으로 작동해요.마치 복사본을 두고 비교해서 바뀐 부분만 바꿔주는 것처럼,화면 성능을 높이고 부드럽게 동작하도록 도와주는 기술이에요.'),
    (6, 'Git & GitHub', 2, 'FE', 'Y', 6, 'Git & GitHub란? 코드를 안전하게 관리하고, 함께 작업할 수 있게 해주는 도구!코드를 버전별로 저장하고, 이전 상태로 되돌리거나 여러 사람이 동시에 작업해도 충돌 없이 관리할 수 있어요.예를 들면, 실수로 코드를 잘못 고쳐도 이전 상태로 복원할 수 있고,팀원이 만든 기능을 병합하거나 비교할 수도 있어요.Git은 버전 관리 시스템,GitHub는 이 Git 저장소를 인터넷에 저장하고 협업할 수 있게 해주는 서비스라고 생각하면 돼요.'),
    (7, 'Git Hook 자동화', 2, 'FE', 'Y', 7, 'Git Hook (Husky, lint-staged) 자동화란? 코드 저장 전에 자동으로 검사하거나 정리해주는 도구!커밋하거나 푸시할 때, 코드 스타일을 체크하거나 테스트를 실행해서실수나 버그를 미리 막아주는 역할을 해요.예를 들면, 커밋 전에 코드 포맷을 자동으로 맞추거나,오류가 있는 코드는 커밋되지 않도록 차단할 수 있어요.마치 택배를 보내기 전에 포장 상태를 검사하는 것처럼,코드를 안전하게 관리하고 팀의 품질 기준을 지킬 수 있도록 도와주는 도구예요.'),
    (8, 'Axios 관리', 3, 'FE', 'Y', 8, 'Axios 인스턴스 관리, 공통 인터셉터 구성이란? API 요청을 더 효율적이고 일관되게 관리하는 방법!반복되는 설정을 줄이고, 요청이나 응답에 공통적으로 해야 할 작업을 자동으로 처리할 수 있어요.예를 들면, 모든 요청에 토큰을 자동으로 넣거나,오류가 났을 때 공통 에러 처리 로직을 한 번에 적용할 수 있어요.마치 배달을 보낼 때마다 포장, 주소, 확인 절차를 자동화하는 것처럼,코드 중복을 줄이고 안정적인 통신 흐름을 만들어주는 설정 방식이에요.'),
    (9, 'REST API', 3, 'FE', 'Y', 9, 'REST API 기반 에러 처리 / 재시도 로직이란? API 통신 중 문제가 생겼을 때, 똑똑하게 대응하는 방법!요청이 실패했을 때 사용자에게 알리고,필요하면 자동으로 다시 시도하거나 적절한 조치를 취할 수 있어요.예를 들면, 네트워크 오류로 요청이 실패하면 일정 시간 뒤 다시 보내거나,인증 오류가 나면 자동으로 로그아웃 처리하는 식이에요.마치 배달 실패 시 다시 시도하거나 고객에게 안내하는 시스템처럼,더 안정적이고 사용자 친화적인 API 통신 흐름을 만드는 데 꼭 필요한 기술이에요.'),
    (10, 'React', 4, 'FE', 'N', 10, 'React란? 웹페이지를 빠르고 효율적으로 만들 수 있게 도와주는 JavaScript 라이브러리!화면을 여러 개의 컴포넌트로 나누어 관리하고,데이터가 바뀌면 필요한 부분만 다시 그려줘요.예를 들면, 버튼을 누르면 숫자가 증가하거나,리스트가 자동으로 갱신되는 인터페이스를 쉽게 만들 수 있어요.마치 블록처럼 조각을 쌓아 올리듯 화면을 구성하고,변화에 빠르게 반응하는 인터랙티브한 웹앱을 만들 수 있는 도구예요.'),
    (11, 'Redux', 4, 'FE', 'N', 11, 'Redux란? 복잡한 상태(state)를 한 곳에서 깔끔하게 관리해주는 도구!여러 컴포넌트들이 사용하는 데이터를 중앙에서 모아서 관리하고,필요할 때만 정확하게 바꿔줘요.예를 들면, 로그인 상태, 장바구니 정보, 알림 같은 걸 앱 전체에서 공유하고 업데이트할 수 있어요.마치 중앙 창고에서 필요한 물건을 꺼내 쓰고 바꾸는 것처럼,예측 가능한 방식으로 상태를 관리해서 큰 규모의 앱도 안정적으로 만들 수 있어요.'),
    (12, 'Zustand', 4, 'FE', 'N', 12, 'Zustand란? 가볍고 간단하게 상태를 관리할 수 있는 상태 관리 라이브러리!코드가 적고 구조가 단순해서, 빠르게 사용할 수 있고필요한 데이터만 골라서 효율적으로 관리할 수 있어요.예를 들면, 버튼 클릭으로 숫자를 바꾸거나,로그인 상태를 여러 컴포넌트에서 쉽게 공유할 수 있어요.마치 작은 도구 상자처럼 꼭 필요한 기능만 담겨 있어서,리액트 앱의 상태를 부담 없이 관리할 수 있는 실용적인 도구예요.'),
    (13, 'Vue', 5, 'FE', 'N', 13, 'Vue란? 직관적이고 빠르게 웹 인터페이스를 만들 수 있는 프론트엔드 프레임워크!HTML, CSS, JavaScript를 함께 사용해 화면을 구성하고 데이터와 연결하는 작업을 쉽게 할 수 있어요.예를 들면, 입력한 내용을 화면에 바로 보여주거나,버튼 클릭에 따라 리스트가 자동으로 바뀌는 기능을 간단하게 만들 수 있어요.마치 조립식 블록처럼 구조가 명확하고 유연해서,초보자도 쉽게 배우고, 복잡한 앱도 빠르게 개발할 수 있는 도구예요.'),
    (14, 'Vuex & Pinia', 5, 'FE', 'N', 14, 'Vuex & Pinia란? Vue 앱에서 상태를 체계적으로 관리하기 위한 도구들이에요!Vuex는 **중앙 저장소(store)**를 통해 모든 컴포넌트가 공유하는 데이터를 관리하고,Pinia는 이를 더 간단하고 직관적으로 사용할 수 있도록 도와주는 경량 도구예요.예를 들면, 로그인 정보, 사용자 설정, 장바구니처럼 여러 컴포넌트에서 함께 사용하는 데이터를한 곳에 모아서 변경하고 추적할 수 있어요. 마치 모든 정보를 기록하는 하나의 통제 센터처럼,Vue 애플리케이션을 예측 가능하고 안정적으로 유지해주는 역할을 해요.'),
    (15, 'Angular', 6, 'FE', 'N', 15, 'Angular란? 대규모 웹 애플리케이션을 체계적으로 만들 수 있는 프레임워크! 컴포넌트 기반 구조와 강력한 타입 시스템, 모듈, 라우팅, 폼, HTTP 처리까지웹 개발에 필요한 기능을 하나의 도구로 통합해서 제공해요. 예를 들면, 사용자 인증, 데이터 처리, 화면 전환 등 복잡한 기능들을 분리된 구성으로 깔끔하게 관리할 수 있어요. 마치 잘 정리된 설계도와 작업 도구가 모두 갖춰진 공장처럼, 복잡한 웹앱을 안정적이고 효율적으로 개발할 수 있게 도와주는 프레임워크예요.'),
    (16, 'NgRx', 6, 'FE', 'N', 16, 'NgRx란? Angular에서 애플리케이션의 상태를 일관되게 관리할 수 있도록 도와주는 라이브러리! Redux 패턴을 기반으로 해서, 액션(action), 리듀서(reducer), 스토어(store)를 통해상태의 흐름을 예측 가능하고 체계적으로 관리할 수 있어요. 예를 들면, 사용자 정보, 알림 상태, 페이지 전환 등앱 전체에서 공유되는 데이터를 한 곳에서 처리하고 추적할 수 있어요. 마치 중앙 지휘본부에서 모든 정보를 받아 분석하고 지시하는 것처럼, 복잡한 Angular 앱의 상태를 명확하게 관리해주는 강력한 도구예요.'),
    (17, 'Storybook', 7, 'FE', 'N', 17, '컴포넌트 디자인 시스템 (Storybook)이란? 컴포넌트를 독립적으로 만들고, 테스트하고, 문서화할 수 있는 도구! UI 컴포넌트를 실제 화면처럼 하나씩 확인하고 조작해보면서, 디자인과 기능이 제대로 작동하는지 쉽게 검토할 수 있어요. 예를 들면, 버튼, 카드, 모달 같은 컴포넌트를 페이지와 분리해서 개발하고, 다양한 상태나 테마로 미리보기할 수 있어요. 마치 부품을 미리 조립해보는 전시 공간처럼, 컴포넌트를 체계적으로 관리하고 재사용성을 높여주는 개발 환경이에요.'),
    (18, 'Tailwind CSS', 7, 'FE', 'N', 18, 'Tailwind CSS란? 클래스 이름만으로 빠르게 스타일을 적용할 수 있는 유틸리티 기반 CSS 프레임워크!미리 정의된 클래스들을 조합해서 디자인을 만들 수 있어서,별도로 CSS 파일을 작성하지 않고도 바로 스타일링할 수 있어요.예를 들면, bg-blue-500, text-center, p-4 같은 클래스를 조합해서배경색, 정렬, 여백을 한눈에 설정할 수 있어요. 마치 레고 블록을 조립하듯 필요한 스타일만 골라 붙이는 방식이라서, 반응형 디자인과 빠른 개발에 특히 유용한 도구예요.'),
    (19, 'SCSS', 7, 'FE', 'N', 19, 'SCSS란? CSS를 더 편리하고 체계적으로 작성할 수 있게 도와주는 스타일 확장 문법!중첩, 변수, 함수, 반복문 같은 기능을 활용해서 복잡한 스타일도 재사용 가능하고 깔끔하게 관리할 수 있어요.예를 들면, 색상 값을 변수로 저장하거나,버튼 스타일을 한 번에 정의해서 여러 곳에서 쓸 수 있어요.마치 정리된 노트처럼 규칙 있고 효율적인 방식으로 스타일을 관리할 수 있게 해주는 도구예요.'),
    (20, 'styled', 7, 'FE', 'N', 20, 'styled란? JavaScript 코드 안에서 스타일을 바로 작성할 수 있게 해주는 CSS-in-JS 도구! 컴포넌트 단위로 스타일을 만들 수 있어서, 디자인과 기능을 하나로 묶어 재사용성과 유지보수성을 높일 수 있어요. 예를 들면, styled.button을 만들어서 버튼 스타일을 설정하고, 필요한 곳에 불러와서 바로 사용할 수 있어요. 마치 디자인과 코드를 하나의 부품처럼 함께 관리하는 방식이라서, React 개발에 특히 잘 어울리는 스타일링 도구예요.'),
    (21, 'EsLint & Prettier', 8, 'FE', 'N', 21, 'ESLint & Prettier란? 코드의 품질과 스타일을 자동으로 검사하고 정리해주는 도구! ESLint는 코드에서 잘못된 문법이나 위험한 패턴을 찾아내고, Prettier는 들여쓰기, 줄바꿈, 공백 같은 스타일을 자동으로 정리해줘요. 예를 들면, 세미콜론이 빠졌거나, 들여쓰기가 틀렸을 때 자동으로 수정하거나 경고를 띄워줘서 실수를 줄일 수 있어요. 마치 글을 쓰기 전에 맞춤법 검사기와 문장 정리기를 함께 사용하는 것처럼, 코드를 더 깔끔하고 일관되게 유지해주는 필수 개발 도구예요.'),
    (22, 'Next.js', 9, 'FE', 'N', 22, 'Next.js란? 빠르고 효율적인 웹앱을 만들 수 있게 해주는 React 기반 프레임워크! 정적 사이트 생성(SSG), 서버 사이드 렌더링(SSR), 라우팅, API 구성 같은 기능이 기본으로 제공돼요. 예를 들면, 페이지를 미리 만들어 빠르게 보여주거나, 사용자 요청에 따라 서버에서 데이터를 받아 동적으로 화면을 그릴 수 있어요. 마치 기능이 갖춰진 올인원 개발 도구 세트처럼, 복잡한 설정 없이도 강력한 웹 서비스를 빠르게 개발할 수 있는 프레임워크예요.'),
    (23, 'React 렌더링', 9, 'FE', 'N', 23, 'React 렌더링 최적화란? 불필요한 컴포넌트 렌더링을 줄여서 앱을 더 빠르게 만드는 방법! React.memo, useMemo, useCallback 같은 기능을 활용하면 변경이 없는 부분은 다시 그리지 않고, 계산 비용이 큰 작업도 효율적으로 처리할 수 있어요. 예를 들면, 같은 props를 가진 컴포넌트를 다시 그리지 않거나, 계산된 값을 기억해서 다시 계산하지 않게 할 수 있어요. 마치 필요한 부분만 다시 고치는 스마트한 설계 방식처럼, 성능을 높이고 렌더링을 효율적으로 관리하는 데 꼭 필요한 기술이에요.'),
    (24, 'React Query 심화', 9, 'FE', 'N', 24, 'React Query 심화란? 데이터를 똑똑하게 미리 불러오고, 효율적으로 갱신할 수 있는 고급 기술! Prefetch로 사용자가 보기 전에 데이터를 미리 준비하고, Query Keys로 요청을 구분하고 관리하며, Invalidation으로 필요한 시점에 데이터를 자동으로 다시 가져올 수 있어요. 예를 들면, 목록 화면에서 상세 정보를 미리 받아두거나, 수정 후 자동으로 데이터를 새로 고치는 기능을 쉽게 구현할 수 있어요. 마치 냉장고에 미리 음식을 채워두고, 바뀐 재료만 새로 담는 것처럼, 사용자 경험을 끊김 없이 유지하고 네트워크 요청을 최적화할 수 있는 기술이에요.'),
    (25, 'Vue Test Utils', 10, 'FE', 'N', 25, 'Vue Test Utils란? Vue 컴포넌트를 테스트할 수 있도록 도와주는 공식 테스트 도구! 컴포넌트를 렌더링하고, 내부 동작을 검사하거나 사용자 이벤트를 시뮬레이션할 수 있어요. 예를 들면, 버튼 클릭 시 이벤트가 잘 작동하는지 확인하거나, 전달된 props에 따라 화면이 올바르게 바뀌는지를 테스트할 수 있어요. 마치 부품 하나하나를 따로 꺼내서 기능을 점검하는 검사 장비처럼, Vue 컴포넌트의 동작을 정확하고 안정적으로 검증할 수 있게 해주는 도구예요.'),
    (26, 'Nuxt.js', 10, 'FE', 'N', 26, 'Nuxt.js란? Vue 기반의 웹 애플리케이션을 더 빠르고 쉽게 만들 수 있게 해주는 프레임워크! 페이지 라우팅, 서버 사이드 렌더링(SSR), 정적 사이트 생성(SSG) 등 복잡한 설정 없이도 강력한 기능을 바로 사용할 수 있어요. 예를 들면, 파일만 만들어도 자동으로 라우팅되고, SEO에 유리한 방식으로 페이지를 미리 렌더링할 수 있어요. 마치 기본 기능이 잘 갖춰진 웹 개발 전용 템플릿처럼, Vue로 만들 수 있는 프로젝트를 더 효율적이고 확장성 있게 개발할 수 있게 해주는 도구예요.'),
    (27, 'Angular Universal', 11, 'FE', 'N', 27, 'Angular Universal이란? Angular 애플리케이션을 서버에서 먼저 렌더링해주는 도구! 브라우저가 아닌 서버에서 HTML을 먼저 만들어서 사용자에게 빠르게 보여주고, 검색 엔진(SEO)에도 잘 노출될 수 있도록 도와줘요. 예를 들면, 사용자가 페이지를 열었을 때 화면이 바로 보이고, 뒤늦게 Angular가 연결되어 상호작용이 이어지는 구조예요. 마치 공장에서 미리 조립된 제품을 바로 전달하는 것처럼, 초기 로딩 속도와 검색 최적화에 강한 Angular 전용 서버 사이드 렌더링 기술이에요.'),
    (28, 'Jasmine', 11, 'FE', 'N', 28, 'Jasmine이란? Angular 애플리케이션의 기능이 제대로 동작하는지 확인할 수 있게 해주는 테스트 프레임워크! 함수나 컴포넌트의 결과가 예상대로 나오는지 자동으로 검사할 수 있어요. 테스트 코드를 통해 버그를 줄이고, 리팩터링도 더 안전하게 할 수 있어요. 예를 들면, 특정 함수가 정확한 값을 반환하는지, 버튼 클릭 시 원하는 동작이 일어나는지를 미리 확인할 수 있어요. 마치 기계를 출고하기 전에 작동 여부를 테스트하는 품질 검사 도구처럼, Angular 코드의 신뢰성과 안정성을 높여주는 중요한 테스트 도구예요.'),
    (29, 'Webpack 개념과 설정', 12, 'FE', 'Y', 29, 'Webpack이란? 웹 애플리케이션에서 사용하는 파일들을 하나로 묶어주는 모듈 번들러! HTML, CSS, JavaScript, 이미지 같은 자원들을 의존성에 따라 정리하고, 브라우저가 효율적으로 로딩할 수 있게 하나로 패키징해줘요. 예를 들면, 여러 개의 JS 파일을 하나로 합치거나, 코드를 압축하고, 필요할 때만 불러오도록 설정할 수 있어요. 마치 여러 자재를 정리해서 하나의 박스로 포장하는 공정처럼, 웹 프로젝트를 최적화하고 배포하기 좋게 만들어주는 핵심 도구예요.'),
    (30, '빌드/배포 자동화', 13, 'FE', 'N', 30, 'GitHub Actions로 빌드/배포 자동화란? 코드가 변경될 때마다 자동으로 테스트하고, 빌드하고, 배포까지 해주는 자동화 도구!정해진 조건에 따라 작업이 자동으로 실행되기 때문에 수작업 없이도 일관된 개발과 배포 환경을 유지할 수 있어요. 예를 들면, 코드를 푸시하면 테스트가 돌고, 빌드가 완료되면 서버에 자동으로 배포되도록 설정할 수 있어요. 마치 공장 자동화 시스템처럼 정해진 순서로 작업이 척척 진행되게 만들어주는 도구로, 지속적인 통합(CI)과 지속적인 배포(CD)를 손쉽게 구현할 수 있어요.'),
    (31, '프론트엔드 앱 배포', 13, 'FE', 'N', 31, 'Dockerize된 프론트엔드 앱 배포란? 프론트엔드 애플리케이션을 Docker로 감싸서 어디서든 쉽게 실행하고 배포할 수 있게 만드는 방법! 앱을 Nginx 같은 웹 서버에 올리고, Docker 이미지로 만들면 환경에 상관없이 동일한 방식으로 실행할 수 있어요. 예를 들면, React나 Vue 앱을 빌드한 후 Nginx에 연결하고, 이걸 하나의 Docker 이미지로 만들어서 서버나 클라우드에 배포할 수 있어요. 마치 앱을 하나의 컨테이너에 담아 포장한 후 어떤 환경에서도 똑같이 꺼내 쓸 수 있게 만드는 것처럼, 배포 속도와 안정성을 높여주는 현대적인 프론트엔드 배포 방식이에요.'),
    (32, 'AWS S3 + CloudFront 배포', 13, 'FE', 'N', 32, 'AWS S3 + CloudFront 기반 SPA 배포란? 정적 웹 애플리케이션(SPA)을 빠르고 안정적으로 전 세계에 배포하는 방법! S3에 앱 파일을 저장하고, CloudFront를 통해 전 세계 사용자에게 빠르게 전달할 수 있어요. 예를 들면, React나 Vue로 만든 앱을 S3에 업로드하고, CloudFront를 통해 CDN으로 연결하면 지연 없이 콘텐츠를 제공할 수 있어요. 마치 전 세계에 배포 센터를 두고 가장 가까운 곳에서 파일을 꺼내주는 구조처럼, SPA를 빠르고 안정적으로 서비스할 수 있는 클라우드 배포 방식이에요.'),
    (33, 'Component Test', 14, 'FE', 'N', 33, 'Unit Test, Snapshot Test, Integration Test란? 코드가 의도한 대로 작동하는지 다양한 수준에서 확인하는 테스트 기법들이에요! Unit Test는 함수나 컴포넌트 하나만 따로 검사하고, Snapshot Test는 출력 결과가 이전과 같은지 자동으로 비교하며, Integration Test는 여러 기능이 함께 잘 작동하는지를 확인해요. 예를 들면, 버튼 클릭 시 동작하는 함수만 테스트하거나, 컴포넌트가 렌더링하는 HTML이 바뀌지 않았는지를 체크하거나, 로그인 → 페이지 이동 흐름까지 전체를 점검할 수 있어요. 마치 부품 테스트, 조립 상태 확인, 실제 작동 테스트를 모두 거치는 품질 검증 과정처럼, 안정적이고 신뢰할 수 있는 코드를 만들기 위한 중요한 개발 절차예요.'),
    (34, 'Visual Test', 15, 'FE', 'N', 34, 'E2E Test, Visual Regression Test란? 앱의 모든 흐름이 실제 사용자처럼 잘 작동하는지, 화면이 이상 없이 보이는지 확인하는 테스트 방법이에요! E2E 테스트는 사용자가 버튼을 클릭하거나 페이지를 이동하는 과정을 자동화된 시나리오로 실행해보고, Visual Regression 테스트는 UI가 예전과 달라진 부분이 없는지 화면을 이미지로 비교해요. 예를 들면, 로그인 → 상품 선택 → 결제 완료까지의 과정을 자동으로 따라가며 검증하거나, 디자인이 바뀌었는지 픽셀 단위로 비교해서 알려줄 수 있어요. 마치 사람처럼 앱을 실제로 사용해보고, 화면을 눈으로 비교하는 것처럼, 전체 동작과 시각적인 완성도를 함께 검증할 수 있는 고급 테스트 방식이에요.'),
    (35, 'Linux', 16, 'BE', 'Y', 1, '리눅스 명령어란? 터미널에서 직접 컴퓨터를 조작할 수 있게 해주는 텍스트 기반의 도구! 파일 생성, 복사, 이동부터 시스템 관리, 프로세스 확인, 서버 설정까지 명령어 한 줄로 다양한 작업을 빠르고 정확하게 수행할 수 있어요. 예를 들면, ls로 폴더 목록을 확인하고, cd로 위치를 옮기거나, chmod, ps, top 같은 명령어로 권한과 시스템 상태를 관리할 수 있어요. 마치 명령 센터에서 키워드 하나로 기계를 제어하듯, 개발과 운영 환경에서 효율적이고 강력한 제어력을 제공해주는 기본 도구예요.'),
    (36, '인터넷 & 네트워크', 16, 'BE', 'Y', 2, 'HTTP, HTTPS, DNS, TCP/IP 기본 개념이란? 인터넷이 어떻게 작동하는지를 이해하는 데 꼭 필요한 핵심 네트워크 개념들이에요! HTTP/HTTPS는 웹에서 정보를 주고받는 방식이고, DNS는 사람이 기억하기 쉬운 주소(도메인)를 숫자 IP로 바꿔주는 시스템이며, TCP/IP는 데이터가 안전하고 정확하게 목적지에 도착하도록 돕는 전달 규칙이에요. 예를 들면, 브라우저에 주소를 입력하면 DNS가 서버를 찾아주고, HTTP가 서버에 요청을 보내고, TCP/IP가 그 데이터를 안정적으로 전달해줘요. 마치 우편 주소를 찾아 편지를 보내고, 정확히 배달되는 전체 과정처럼, 웹과 앱이 원활하게 통신할 수 있도록 돕는 기본 원리들이에요.'),
    (37, 'Git & GitHub', 2, 'BE', 'Y', 3, 'Git & GitHub란? 코드를 안전하게 관리하고, 함께 작업할 수 있게 해주는 도구! 코드를 버전별로 저장하고, 이전 상태로 되돌리거나 여러 사람이 동시에 작업해도 충돌 없이 관리할 수 있어요. 예를 들면, 실수로 코드를 잘못 고쳐도 이전 상태로 복원할 수 있고, 팀원이 만든 기능을 병합하거나 비교할 수도 있어요. Git은 버전 관리 시스템, GitHub는 이 Git 저장소를 인터넷에 저장하고 협업할 수 있게 해주는 서비스라고 생각하면 돼요.'),
    (38, 'Git Hook 자동화', 2, 'BE', 'Y', 4, 'Git Hook (Husky, lint-staged) 자동화란?코드 저장 전에 자동으로 검사하거나 정리해주는 도구!커밋하거나 푸시할 때, 코드 스타일을 체크하거나 테스트를 실행해서실수나 버그를 미리 막아주는 역할을 해요.예를 들면, 커밋 전에 코드 포맷을 자동으로 맞추거나,오류가 있는 코드는 커밋되지 않도록 차단할 수 있어요.마치 택배를 보내기 전에 포장 상태를 검사하는 것처럼,코드를 안전하게 관리하고 팀의 품질 기준을 지킬 수 있도록 도와주는 도구예요.'),
    (39, 'Java', 17, 'BE', 'N', 5, 'Java란? 안정적이고 확장성 있는 프로그램을 만들 수 있는 대표적인 객체지향 프로그래밍 언어! 운영체제에 상관없이 어디서나 실행할 수 있고, 대규모 시스템부터 모바일 앱, 웹 서비스, 서버 개발까지 폭넓게 사용돼요. 예를 들면, 은행의 거래 시스템, 안드로이드 앱, 기업용 백엔드 서버 등이 Java로 만들어져요. 마치 한 번 만들면 어디서든 쓸 수 있는 범용 기계처럼, 신뢰성과 이식성이 뛰어난 실무 중심의 프로그래밍 언어예요.'),
    (40, 'Python', 18, 'BE', 'N', 6, 'Python이란? 간결하고 읽기 쉬운 문법으로 다양한 분야에서 활용되는 범용 프로그래밍 언어! 웹 개발, 데이터 분석, 인공지능, 자동화 스크립트 등 다양한 목적에 맞게 빠르게 개발할 수 있어요. 예를 들면, 웹 서버를 만들거나, 엑셀 데이터를 처리하거나, AI 모델을 학습시키는 작업도 Python으로 할 수 있어요. 마치 쉽고 유연한 만능 도구처럼, 입문자부터 전문가까지 널리 사용하는 실용적인 프로그래밍 언어예요.'),
    (41, 'JavaScript', 19, 'BE', 'N', 7, 'JavaScript란? 웹페이지에 동작을 추가하고 사용자와의 상호작용을 가능하게 해주는 프로그래밍 언어! 클릭, 입력, 스크롤 같은 이벤트에 반응하거나 화면의 내용을 동적으로 바꾸는 기능을 구현할 수 있어요. 예를 들면, 버튼을 눌렀을 때 팝업이 뜨거나, 실시간으로 입력값을 확인하고 결과를 보여줄 수 있어요. 마치 정적인 화면에 생명을 불어넣는 조종 장치처럼, 웹을 더 풍부하고 인터랙티브하게 만들어주는 핵심 기술이에요.'),
    (42, 'Kotlin', 20, 'BE', 'N', 8, 'Kotlin이란? 간결하면서도 안정적인 코드를 작성할 수 있게 해주는 현대적인 프로그래밍 언어! Java보다 적은 코드로 동일한 기능을 구현할 수 있고, 안드로이드 앱 개발을 비롯해 서버, 웹, 데스크탑 등 다양한 분야에서 사용돼요. 예를 들면, 앱의 버튼 클릭 동작을 쉽게 구현하거나, 안전한 방식으로 null 값을 처리할 수 있어요. 마치 사용하기 편하면서도 강력한 기능이 담긴 도구 상자처럼, 생산성과 안정성을 모두 갖춘 실용적인 프로그래밍 언어예요.'),
    (43, 'SQL문', 21, 'BE', 'Y', 9, 'SQL문이란? 데이터베이스에 저장된 정보를 조회하고 수정할 수 있게 해주는 데이터 처리 언어! 데이터를 추가하거나 검색하고, 변경하거나 삭제하는 작업을 명령문 한 줄로 빠르고 정확하게 실행할 수 있어요. 예를 들면, 회원 목록을 불러오거나, 특정 조건에 맞는 데이터를 찾고, 필요한 내용을 새로 추가하거나 삭제할 수도 있어요. 마치 창고 안의 정보를 검색하고 정리하는 명령어 세트처럼, 데이터를 다루는 데 꼭 필요한 기본 도구예요.'),
    (44, 'More About Database', 22, 'BE', 'N', 10, 'More About Database란? 다양한 형태의 데이터베이스 구조와 특성을 이해하고, 상황에 맞게 선택할 수 있도록 돕는 개념이에요! 관계형 데이터베이스(RDB)는 표 형식으로 데이터를 저장하고 SQL로 관리하며, NoSQL은 유연한 구조로 대규모 데이터나 빠른 처리에 적합한 방식이에요. 예를 들면, MySQL, PostgreSQL 같은 RDB는 정형 데이터를 정확하게 관리할 때, MongoDB, Redis 같은 NoSQL은 유동적인 데이터나 실시간 처리에 자주 사용돼요. 마치 서류 캐비닛처럼 정리된 방식과, 메모장처럼 자유로운 방식을 모두 이해하는 것처럼, 데이터의 성격과 목적에 따라 적절한 저장 방식을 선택하는 데 필요한 핵심 지식이에요.'),
    (45, 'Scaling Databases', 23, 'BE', 'N', 11, 'Scaling Databases란? 많은 데이터를 빠르고 안정적으로 처리하기 위해 데이터베이스를 최적화하는 방법이에요! 쿼리 튜닝은 느린 쿼리를 분석하고 개선해서 성능을 높이는 작업이고, 정규화는 데이터를 구조적으로 나눠 중복을 줄이고 일관성을 유지하는 방식이에요. 예를 들면, 느린 검색 속도를 개선하거나, 하나의 테이블을 여러 개로 나눠 효율적으로 관리할 수 있어요. 마치 창고의 물건을 빠르게 찾기 위해 선반을 정리하고 동선을 최적화하는 것처럼, 데이터를 효과적으로 저장하고 처리하기 위한 필수적인 설계와 운영 기술이에요.'),
    (46, 'Spring Boot(Java)', 24, 'BE', 'N', 12, 'Java & Spring이란? 견고하고 확장성 있는 백엔드 애플리케이션을 만들기 위한 대표적인 기술 조합이에요! Java는 안정성과 범용성이 뛰어난 프로그래밍 언어이고, Spring은 Java 기반으로 웹 서버, API, 데이터 처리 등을 효율적으로 구성할 수 있게 도와주는 프레임워크예요. 예를 들면, 회원가입 기능이나 데이터베이스 연동, API 서버 구축을 안정적으로 구현할 수 있어요. 마치 튼튼한 재료(Java) 위에 체계적인 설계도(Spring)를 얹는 건축처럼, 기업에서도 널리 사용하는 신뢰도 높은 백엔드 개발 기술이에요.'),
    (47, 'Node.js & Express.js', 25, 'BE', 'N', 13, 'Node.js란? JavaScript로 서버를 만들 수 있게 해주는 런타임 환경이에요! 비동기 처리와 이벤트 기반 구조 덕분에 가볍고 빠르게 동작하며, 웹 서버, API, 실시간 채팅, 파일 처리 등 다양한 백엔드 기능을 구현할 수 있어요. 예를 들면, 웹사이트의 로그인 처리나 데이터 전송 API, 실시간 메시징 기능 같은 서버 역할을 JavaScript로 만들 수 있어요. 마치 한 가지 언어로 프론트엔드와 백엔드를 모두 다룰 수 있는 멀티툴처럼, 유연하고 효율적인 웹 서비스 구축에 적합한 서버 사이드 기술이에요.'),
    (48, 'Django', 26, 'BE', 'N', 14, 'Django란? 빠르고 효율적으로 웹 애플리케이션을 만들 수 있게 도와주는 Python 기반의 웹 프레임워크예요! 프로젝트 구조, 관리자 페이지, 인증 시스템 같은 기능이 기본으로 포함돼 있어서 복잡한 웹 서비스를 빠르게 개발할 수 있어요. 예를 들면, 게시판, 블로그, 쇼핑몰처럼 로그인, 글쓰기, 데이터 저장이 필요한 웹사이트를 쉽게 만들 수 있어요. 마치 필수 도구가 다 갖춰진 웹 개발용 공구 세트처럼, 안정적이고 생산성 높은 백엔드 웹 개발을 가능하게 해주는 프레임워크예요.'),
    (49, 'Flask', 27, 'BE', 'N', 15, 'Flask란? 가볍고 유연하게 웹 애플리케이션을 만들 수 있는 Python 기반의 마이크로 웹 프레임워크예요! 필수 기능만 최소한으로 제공하고, 필요한 구성은 개발자가 자유롭게 선택해서 확장할 수 있어요. 예를 들면, 간단한 웹 페이지부터 API 서버, 데이터 시각화 도구까지 작고 빠르게 시작해서 점점 발전시켜 나갈 수 있어요. 마치 필요한 부품만 골라 조립할 수 있는 맞춤형 키트처럼, 단순하지만 강력하게 웹 서비스를 만들 수 있는 실용적인 프레임워크예요.'),
    (50, 'Spring Boot(Kotlin)', 28, 'BE', 'N', 16, 'Kotlin & Spring이란? 간결한 문법의 Kotlin 언어로, 강력한 Spring 프레임워크 기반의 백엔드 애플리케이션을 만드는 기술 조합이에요! Kotlin은 안정성과 생산성이 뛰어나고, Spring은 다양한 웹 기능을 체계적으로 제공해요. 두 기술이 만나면 더 짧고 명확한 코드로 효율적인 서버 개발이 가능해요. 예를 들면, API 서버 구축, 데이터베이스 연결, 인증 시스템 구현 등을 더 읽기 쉬운 코드로 빠르게 만들 수 있어요. 마치 스마트한 언어와 견고한 설계가 결합된 개발 환경처럼, 안정성과 개발 속도를 모두 잡고 싶은 백엔드 개발자에게 최적의 조합이에요.'),
    (51, 'Java + Spring Lib & Utils', 29, 'BE', 'N', 17, 'Spring 라이브러리 & 유틸이란? 복잡한 웹 애플리케이션을 더 쉽게 만들 수 있도록 도와주는 Spring의 구성 요소와 도구들이에요! 보안, 데이터 처리, 배치 작업 등 다양한 기능을 담당하는 라이브러리들이 Spring 생태계 안에 잘 정리되어 있고, 개발자가 필요한 기능만 선택해 사용할 수 있어요. 예를 들면, Spring Security로 로그인과 권한을 관리하고, Spring Data JPA로 복잡한 SQL 없이 DB를 다루며, Spring Batch로 대용량 데이터를 순차적으로 처리할 수 있어요. 마치 전문 공정별로 나뉜 자동화 도구 세트처럼, 웹 서비스의 복잡한 요구사항을 손쉽게 해결할 수 있도록 도와주는 실전 중심의 유틸 모음이에요.'),
    (52, 'Kotlin + Spring Lib & Utils', 30, 'BE', 'N', 18, 'Spring 라이브러리 & 유틸이란? 웹 애플리케이션을 더 강력하고 효율적으로 만들 수 있도록 도와주는 Spring의 확장 도구 모음이에요! 보안, 데이터 관리, 배치 처리, 메시지 큐 연동 등 복잡한 기능들을 쉽게 구현할 수 있는 다양한 라이브러리와 유틸리티가 포함돼 있어요. 예를 들면, Spring Security로 인증과 권한을 설정하고, Spring Data JPA로 데이터베이스와 편리하게 연결하며, Spring Batch로 정기적인 데이터 처리 작업을 자동화할 수 있어요. 마치 다양한 기능을 플러그처럼 추가할 수 있는 개발 키트처럼, 복잡한 웹 시스템을 간단하고 일관된 방식으로 개발할 수 있도록 도와주는 도구들이에요.'),
    (53, 'Java,Kotlin + Spring 운영 & 배포', 31, 'BE', 'N', 19, 'Java, Kotlin + Spring 운영 & 배포란? Spring으로 만든 웹 애플리케이션을 실제 서비스 환경에 올리고, 안정적으로 관리하는 방법이에요! 빌드, 설정, 서버 배포, 로깅, 모니터링 같은 운영 전반의 과정과 Java 또는 Kotlin 코드 기반에서 효율적인 실행 환경을 구성하는 내용을 다뤄요. 예를 들면, 애플리케이션을 Docker로 감싸서 배포하거나, 서버에서 환경변수 설정, 무중단 배포, 장애 대응 방법까지 실무 중심으로 관리할 수 있어요. 마치 완성된 제품을 고객에게 전달하고 유지 관리하는 전 과정처럼, 개발된 서비스를 실제로 운영하며 신뢰성 있게 제공하기 위한 핵심 실무 과정이에요.'),
    (54, 'Node.js Lib & Utils', 32, 'BE', 'N', 20, 'Node.js 라이브러리 & 유틸이란? 백엔드 개발을 더 빠르고 효율적으로 도와주는 Node.js의 필수 도구와 유틸리티 모음이에요! 서버 구축, 파일 처리, 인증, 데이터 검증, 로깅 등 반복되는 기능을 간단하게 구현할 수 있도록 도와주는 다양한 라이브러리를 활용할 수 있어요. 예를 들면, Express로 간단한 웹 서버를 만들고, Multer로 파일 업로드를 처리하거나, jsonwebtoken으로 로그인 인증을 구현할 수 있어요. 마치 자주 쓰는 부품을 모아둔 공구 세트처럼, Node.js 프로젝트를 더 간결하고 실용적으로 완성할 수 있게 해주는 핵심 도구들이에요.'),
    (55, 'Node.js 운영 & 배포', 32, 'BE', 'N', 21, 'Node.js 운영 & 배포란? Node.js로 만든 서버 애플리케이션을 실제 환경에서 실행하고 안정적으로 서비스하는 방법이에요! 프로세스 관리, 환경 설정, 배포 자동화, 로깅, 에러 대응 등 앱이 끊김 없이 잘 작동하도록 뒷단에서 돌보는 모든 운영 작업을 다뤄요. 예를 들면, PM2로 서버를 항상 켜두거나, Docker로 패키징해서 배포하고, CI/CD로 코드 변경을 자동 반영할 수 있어요. 마치 서비스를 매끄럽게 유지하는 무대 뒤 기술팀처럼, Node.js 앱을 실제 사용자에게 안정적으로 제공하기 위한 실무 중심의 기술이에요.'),
    (56, 'Django Lib & Utils', 33, 'BE', 'N', 22, 'Django 라이브러리 & 유틸이란? Django 개발을 더 빠르고 편리하게 만들어주는 확장 도구와 유용한 패키지들의 모음이에요! 인증, 권한 관리, 파일 업로드, API 구축, 시간 처리 등 웹 개발에서 자주 쓰이는 기능들을 쉽게 구현할 수 있도록 도와줘요. 예를 들면, Django REST framework로 API 서버를 만들고, django-allauth로 소셜 로그인 기능을 추가하거나, django-environ으로 환경변수를 깔끔하게 관리할 수 있어요. 마치 자주 쓰는 기능들을 미리 조립해둔 보조 키트처럼, Django 프로젝트를 더 강력하고 효율적으로 완성할 수 있도록 도와주는 도구들이에요.'),
    (57, 'Django 운영 & 배포', 33, 'BE', 'N', 23, 'Django 운영 & 배포란? Django로 만든 웹 애플리케이션을 실제 서버에 배포하고 안정적으로 운영하는 방법이에요! 서버 환경 구성, 보안 설정, 데이터베이스 연결, 로그 관리, 배포 자동화 등 서비스를 사용자에게 문제없이 제공하기 위한 실전 기술들을 다뤄요. 예를 들면, Gunicorn과 Nginx를 함께 사용해 앱을 배포하거나, 환경변수 설정, 정적 파일 처리, CI/CD 파이프라인 구성 등을 수행할 수 있어요. 마치 개발된 웹서비스를 무대 위에 올려 안전하게 공연하는 운영팀처럼, Django 프로젝트를 실서비스로 전환하고 안정적으로 유지하는 데 필요한 핵심 과정이에요.'),
    (58, 'Flask Lib & Utils', 34, 'BE', 'N', 24, 'Flask 라이브러리 & 유틸이란? Flask 개발을 더 빠르고 확장성 있게 만들어주는 다양한 도구와 확장 패키지들의 모음이에요! ORM, 인증, 폼 처리, REST API 구축, 환경 설정 등 기본 Flask 위에 필요한 기능을 유연하게 붙일 수 있어요. 예를 들면, Flask-SQLAlchemy로 데이터베이스를 다루고, Flask-Login으로 사용자 인증을 구현하거나, Flask-Migrate로 DB 변경 사항을 관리할 수 있어요. 마치 심플한 프레임워크를 확장 가능한 플랫폼으로 바꿔주는 조립 부품들처럼, 작고 유연한 Flask 프로젝트를 실전 서비스 수준으로 키워주는 실용적인 도구들이에요.'),
    (59, 'Flask 운영 & 배포', 34, 'BE', 'N', 25, 'Flask 운영 & 배포란? Flask로 만든 웹 애플리케이션을 실제 서버에 올리고 안정적으로 서비스하는 방법이에요! 서버 설정, 프로세스 관리, 정적 파일 처리, 환경변수 구성, 배포 자동화 등을 통해 Flask 앱을 실사용 환경에서 안전하게 운영할 수 있어요. 예를 들면, Gunicorn으로 애플리케이션을 실행하고, Nginx를 통해 외부 요청을 받아 전달하며, Docker나 CI/CD로 배포 작업을 자동화할 수 있어요. 마치 간단한 웹 앱을 실제 제품으로 포장하고 고객에게 전달하는 과정처럼, Flask 프로젝트를 실서비스 수준으로 끌어올리기 위한 핵심 운영 기술이에요.');

-- chapter(단원) 정보 주입
INSERT INTO chapter (chapter_id, chapter_nm, chapter_order, sub_id) VALUES
       (1, '기본 구조와 시맨틱 태그', 1, 1),
       (2, '텍스트 & 목록 요소', 2, 1),
       (3, '이미지·멀티미디어 & IFrame', 3, 1),
       (4, '폼 & 입력 요소', 4, 1),
       (5, '테이블·메타데이터 & 접근성', 5, 1),
       (6, '선택자 & 우선순위', 1, 2),
       (7, '박스 모델 & 배치', 2, 2),
       (8, 'Flexbox · Grid 레이아웃', 3, 2),
       (9, '색상·타이포그래피·배경', 4, 2),
       (10, '애니메이션·전환·반응형 디자인', 5, 2),
       (11, '기초 문법과 데이터 타입', 1, 3),
       (12, '조건문과 반복문', 2, 3),
       (13, '함수와 스코프', 3, 3),
       (14, '배열과 객체', 4, 3),
       (15, 'DOM 조작과 이벤트 처리', 5, 3),
       (16, '기본 타입 · 타입 단언 & 타입 추론', 1, 4),
       (17, '함수 · 제네릭 & 오버로드', 2, 4),
       (18, '인터페이스 · 타입 별칭 & 고급 타입', 3, 4),
       (19, '클래스 · 모듈 · 데코레이터 & 접근 제한자', 4, 4),
       (20, '고급 제네릭 · 조건부 타입 & 유틸리티 타입', 5, 4),
       (21, 'Virtual DOM 원리 & 역사', 1, 5),
       (22, 'Diff 알고리즘 & 키의 역할', 2, 5),
       (23, '리컨실리에이션(재조정) 사이클', 3, 5),
       (24, '실제 DOM 패치(Patching) 최적화', 4, 5),
       (25, '한계·대안 & 최신 동향', 5, 5),
       (26, 'Git 기본 개념과 설치', 1, 6),
       (27, '로컬 저장소 관리', 2, 6),
       (28, '브랜치와 병합 전략', 3, 6),
       (29, 'GitHub와 원격 저장소 활용', 4, 6),
       (30, '협업, PR, 이슈 및 고급 기능', 5, 6),
       (31, 'Git Hook 기본 개념', 1, 7),
       (32, 'Husky 소개와 설치', 2, 7),
       (33, 'Husky로 Git Hook 제어하기', 3, 7),
       (34, 'lint-staged 소개와 활용', 4, 7),
       (35, 'Husky + lint-staged 통합 자동화 실습', 5, 7),
       (36, 'Axios 인스턴스 기초 & 환경별 설정', 1, 8),
       (37, '전역 Request 인터셉터 구성', 2, 8),
       (38, '전역 Response 인터셉터 구성', 3, 8),
       (39, '토큰 자동 갱신 & 충돌 방지 패턴', 4, 8),
       (40, '고급 패턴·유틸리티화 & 테스트', 5, 8),
       (41, '에러 모델 설계 & 표준 HTTP 상태 코드', 1, 9),
       (42, '클라이언트-측 에러 분류 & 처리 전략', 2, 9),
       (43, '재시도 기본 전략 & 안전한 멱등성', 3, 9),
       (44, '고급 재시도 관리(회로 차단·폴리시)', 4, 9),
       (45, '관측·테스트 & 운영 베스트 프랙티스', 5, 9),
       (46, 'JSX 및 컴포넌트 기초', 1, 10),
       (47, 'Props와 State', 2, 10),
       (48, '이벤트 처리와 조건부 렌더링', 3, 10),
       (49, '리스트 렌더링과 키', 4, 10),
       (50, 'Hooks 및 고급 컴포넌트 구성', 5, 10),
       (51, 'Redux 기본 개념', 1, 11),
       (52, '액션과 리듀서', 2, 11),
       (53, '스토어와 상태 관리', 3, 11),
       (54, '미들웨어와 비동기 처리', 4, 11),
       (55, 'Redux Toolkit', 5, 11),
       (56, 'Zustand 기본 개념과 설치', 1, 12),
       (57, '상태 생성 및 구독 (get, set)', 2, 12),
       (58, 'store 분리 및 커스텀 훅 패턴', 3, 12),
       (59, '미들웨어 활용 (persist, devtools 등)', 4, 12),
       (60, 'Zustand 실전 예제 및 성능 최적화', 5, 12),
       (61, '템플릿 구문 & 인스턴스 기초', 1, 13),
       (62, '반응형 시스템', 2, 13),
       (63, '디렉티브 & 라이프사이클 훅', 3, 13),
       (64, '컴포넌트·Props·슬롯', 4, 13),
       (65, '라우팅·상태 관리 & Composition API', 5, 13),
       (66, 'Vuex 기본 개념', 1, 14),
       (67, 'State, Getters, Mutations', 2, 14),
       (68, 'Actions와 비동기 처리', 3, 14),
       (69, 'Pinia 기본 사용법', 4, 14),
       (70, 'Pinia와 Vue 생태계 통합', 5, 14),
       (71, '템플릿 구문 & 인스턴스 기초', 1, 15),
       (72, '반응형 시스템', 2, 15),
       (73, '디렉티브 & 라이프사이클 훅', 3, 15),
       (74, '컴포넌트·Props·슬롯', 4, 15),
       (75, '라우팅·상태 관리 & Composition API', 5, 15),
       (76, 'NgRx 기본 개념', 1, 16),
       (77, 'State, Actions, Reducers', 2, 16),
       (78, 'Effects와 비동기 처리', 3, 16),
       (79, 'Selectors와 Store 접근', 4, 16),
       (80, 'NgRx Entity와 고급 기능', 5, 16),
       (81, '디자인 시스템 기초와 Atomic Design', 1, 17),
       (82, 'Storybook 기본 설정과 사용법', 2, 17),
       (83, 'Args, Controls, Docs를 활용한 컴포넌트 문서화', 3, 17),
       (84, '컴포넌트 테스트 및 접근성 검증', 4, 17),
       (85, '디자인 시스템 확장 전략과 협업 방식', 5, 17),
       (86, 'Tailwind 기본 문법과 구성요소', 1, 18),
       (87, '레이아웃과 Flex/Grid 활용', 2, 18),
       (88, '반응형 디자인과 상태 기반 클래스', 3, 18),
       (89, 'Tailwind 구성 및 커스터마이징', 4, 18),
       (90, '프로젝트 설계 및 실전 적용 전략', 5, 18),
       (91, 'SCSS 기본 문법과 변수 사용', 1, 19),
       (92, 'Mixin, Function, Extend', 2, 19),
       (93, '조건문과 반복문', 3, 19),
       (94, 'SCSS 모듈화 및 import', 4, 19),
       (95, 'SCSS를 활용한 프로젝트 구조 설계', 5, 19),
       (96, '선택자 & 우선순위', 1, 20),
       (97, '박스 모델 & 레이아웃', 2, 20),
       (98, 'Flexbox & Grid', 3, 20),
       (99, '반응형 디자인 & 미디어 쿼리', 4, 20),
       (100, '애니메이션 & 트랜지션', 5, 20),
       (101, 'ESLint 기본 개념과 설치', 1, 21),
       (102, 'ESLint 규칙과 설정 파일', 2, 21),
       (103, 'Prettier 기본 개념과 포맷팅', 3, 21),
       (104, 'ESLint와 Prettier 통합 설정', 4, 21),
       (105, '실제 적용 및 커스텀 규칙 작성', 5, 21),
       (106, 'Next.js 기본 개념과 프로젝트 설정', 1, 22),
       (107, '라우팅과 네비게이션', 2, 22),
       (108, '데이터 페칭과 렌더링 방식', 3, 22),
       (109, 'API Routes와 서버 기능', 4, 22),
       (110, 'Next.js 고급 기능 및 최적화', 5, 22),
       (111, '렌더링 비용 이해 & 불필요한 리렌더 탐지', 1, 23),
       (112, 'React.memo 로 컴포넌트 메모이제이션', 2, 23),
       (113, '계산 값 캐싱 — useMemo', 3, 23),
       (114, '콜백 재생성 방지 — useCallback', 4, 23),
       (115, '실전 튜닝 & 측정', 5, 23),
       (116, 'Query Keys & 캐싱 기본', 1, 24),
       (117, 'Prefetch & 백그라운드 업데이트', 2, 24),
       (118, 'Mutations & 캐시 무효화', 3, 24),
       (119, '고급 Query Key 패턴', 4, 24),
       (120, '성능 튜닝 & 테스트', 5, 24),
       (121, 'Vue Test Utils 기본 개념', 1, 25),
       (122, 'Mount와 ShallowMount', 2, 25),
       (123, '컴포넌트 상호작용 테스트', 3, 25),
       (124, '비동기 및 이벤트 테스트', 4, 25),
       (125, 'Mock, Stub, 플러그인 테스트', 5, 25),
       (126, 'Nuxt.js 기본 구조 및 라우팅', 1, 26),
       (127, '페이지 및 레이아웃', 2, 26),
       (128, '상태 관리와 Vuex', 3, 26),
       (129, '비동기 데이터 처리와 API 연동', 4, 26),
       (130, 'Nuxt.js 고급 기능과 배포', 5, 26),
       (131, 'Angular Universal 기본 개념', 1, 27),
       (132, 'SSR 설정 및 빌드', 2, 27),
       (133, '서버 측 렌더링 흐름 이해', 3, 27),
       (134, '라우팅과 데이터 프리페칭', 4, 27),
       (135, '고급 최적화 및 배포 전략', 5, 27),
       (136, 'Jasmine 기본 개념', 1, 28),
       (137, 'Matchers와 테스트 구조', 2, 28),
       (138, '비동기 테스트', 3, 28),
       (139, '스파이(Spy)와 Mock', 4, 28),
       (140, 'Angular 테스트 통합', 5, 28),
       (141, 'Webpack의 동작 원리와 핵심 개념', 1, 29),
       (142, '기본 설정 파일 작성 (webpack.config.js)', 2, 29),
       (143, '로더(Loader) 개념과 적용', 3, 29),
       (144, '플러그인(Plugin) 개념과 활용', 4, 29),
       (145, '최적화와 개발 서버 설정', 5, 29),
       (146, 'GitHub Actions 기본 개념', 1, 30),
       (147, 'Workflow 트리거와 조건 설정', 2, 30),
       (148, 'Job & Step 구성 및 실행 환경', 3, 30),
       (149, 'CI/CD 구축 실전 - 빌드 & 테스트', 4, 30),
       (150, 'CD 실전 - 배포 자동화 & 시크릿 관리', 5, 30),
       (151, '프론트엔드 정적 빌드 이해', 1, 31),
       (152, 'Docker 기본 및 이미지 생성', 2, 31),
       (153, 'Nginx 설정 및 정적 파일 서빙', 3, 31),
       (154, 'Docker Compose 및 포트 연결', 4, 31),
       (155, '클라우드/서버 환경 배포 전략', 5, 31),
       (156, 'S3 버킷 생성 및 정적 웹사이트 호스팅', 1, 32),
       (157, 'CloudFront 배포 생성 및 연결', 2, 32),
       (158, '정적 자산 업로드 및 캐싱 전략', 3, 32),
       (159, '도메인 연결 및 HTTPS 설정', 4, 32),
       (160, '배포 자동화 및 CI/CD 연동', 5, 32),
       (161, '테스트 기본 개념 & 종류', 1, 33),
       (162, 'Unit Test 실전 – 로직 & 함수 테스트', 2, 33),
       (163, 'React 컴포넌트 테스트', 3, 33),
       (164, 'Snapshot Test & Mock 전략', 4, 33),
       (165, 'Integration Test & 실전 패턴', 5, 33),
       (166, 'E2E 테스트 개요 & 자동화 흐름 이해', 1, 34),
       (167, 'Cypress 실습 – 기본 명령어 & 흐름 구성', 2, 34),
       (168, '고급 E2E 전략 – 인증, 라우팅, 상태 검증', 3, 34),
       (169, 'Visual Regression Test 원리 & 도구', 4, 34),
       (170, 'E2E + VRT 통합 테스트 전략', 5, 34),
       (171, '기본 명령어와 파일 시스템', 1, 35),
       (172, '사용자와 권한 관리', 2, 35),
       (173, '프로세스와 작업 관리', 3, 35),
       (174, '패키지 및 소프트웨어 설치', 4, 35),
       (175, '시스템 관리와 로그 분석', 5, 35),
       (176, '네트워크 기본 개념', 1, 36),
       (177, 'IP 주소와 서브넷', 2, 36),
       (178, 'HTTP와 HTTPS', 3, 36),
       (179, 'DNS와 도메인', 4, 36),
       (180, '웹 보안 및 인증', 5, 36),
       (181, 'Git 기본 개념과 설치', 1, 37),
       (182, '로컬 저장소 관리', 2, 37),
       (183, '브랜치와 병합 전략', 3, 37),
       (184, 'GitHub와 원격 저장소 활용', 4, 37),
       (185, '협업, PR, 이슈 및 고급 기능', 5, 37),
       (186, 'Git Hook 기본 개념', 1, 38),
       (187, 'Husky 소개와 설치', 2, 38),
       (188, 'Husky로 Git Hook 제어하기', 3, 38),
       (189, 'lint-staged 소개와 활용', 4, 38),
       (190, 'Husky + lint-staged 통합 자동화 실습', 5, 38),
       (191, '기초 문법과 자료형', 1, 39),
       (192, '제어문과 반복문', 2, 39),
       (193, '객체 지향 프로그래밍', 3, 39),
       (194, '컬렉션과 제네릭', 4, 39),
       (195, '예외 처리와 파일 I/O', 5, 39),
       (196, '기초 문법과 자료형', 1, 40),
       (197, '조건문과 반복문', 2, 40),
       (198, '함수와 모듈', 3, 40),
       (199, '자료구조 (리스트, 튜플, 딕셔너리, 세트)', 4, 40),
       (200, '파일 입출력과 예외 처리', 5, 40),
       (201, '기초 문법과 데이터 타입', 1, 41),
       (202, '조건문과 반복문', 2, 41),
       (203, '함수와 스코프', 3, 41),
       (204, '배열과 객체', 4, 41),
       (205, 'DOM 조작과 이벤트 처리', 5, 41),
       (206, '기초 문법과 변수', 1, 42),
       (207, '조건문과 반복문', 2, 42),
       (208, '함수와 람다', 3, 42),
       (209, '클래스와 객체', 4, 42),
       (210, '컬렉션과 널 안정성', 5, 42),
       (211, '기본 SELECT 및 조건절', 1, 43),
       (212, '집계 함수 및 그룹핑', 2, 43),
       (213, 'JOIN 및 서브쿼리', 3, 43),
       (214, 'DDL/DML/제약 조건', 4, 43),
       (215, '트랜잭션 & 고급 기능', 5, 43),
       (216, 'RDB 기초 개념', 1, 44),
       (217, 'RDB 종류와 특징', 2, 44),
       (218, 'NoSQL 개요 및 분류', 3, 44),
       (219, 'NoSQL 대표 사례', 4, 44),
       (220, '상황에 맞는 DB 선택 전략', 5, 44),
       (221, 'SQL 성능 이해', 1, 45),
       (222, '인덱스와 데이터 접근 방식', 2, 45),
       (223, '쿼리 튜닝 전략', 3, 45),
       (224, '정규화와 비정규화', 4, 45),
       (225, '실무 성능 이슈 및 해결 사례', 5, 45),
       (226, 'Java & Spring 기초 개념 이해', 1, 46),
       (227, '계층 구조 및 실무 설계 패턴', 2, 46),
       (228, 'Spring Data JPA & 트랜잭션', 3, 46),
       (229, '인증, 보안 및 문서화 도구 활용', 4, 46),
       (230, '실전 고급 기술 & 배포 전략', 5, 46),
       (231, 'Node.js 기본 개념 및 실행 구조', 1, 47),
       (232, 'Express.js와 REST API 설계', 2, 47),
       (233, '인증, 환경 변수 및 에러 핸들링', 3, 47),
       (234, '데이터베이스 연동 및 테스트', 4, 47),
       (235, '아키텍처 설계, 확장성 및 배포 전략', 5, 47),
       (236, 'Django 기초 개념', 1, 48),
       (237, 'URL 및 뷰 처리', 2, 48),
       (238, '템플릿과 정적 파일', 3, 48),
       (239, '모델과 ORM', 4, 48),
       (240, 'DRF(REST API)', 5, 48),
       (241, 'Flask 기본 개념', 1, 49),
       (242, '라우팅과 뷰 함수', 2, 49),
       (243, '템플릿과 Jinja2', 3, 49),
       (244, 'Flask-SQLAlchemy 및 CRUD', 4, 49),
       (245, 'Flask 보안 및 배포', 5, 49),
       (246, 'Kotlin과 Spring Boot의 통합 기초', 1, 50),
       (247, 'Kotlin 스타일의 컨트롤러 & 라우팅 설계', 2, 50),
       (248, 'Kotlin 기반의 서비스 계층 설계 및 예외 처리', 3, 50),
       (249, '코틀린 JPA와 엔티티 설계 시 고려할 점', 4, 50),
       (250, '비동기 흐름과 코루틴을 활용한 API 처리', 5, 50),
       (251, 'ORM과 쿼리 매핑 도구', 1, 51),
       (252, '인증, 검증 및 시큐리티 유틸', 2, 51),
       (253, 'API 문서화 & 직렬화 도구', 3, 51),
       (254, '로깅, 캐시, 배치 처리 도구', 4, 51),
       (255, '테스트, 빌드, 개발 유틸 통합', 5, 51),
       (256, 'Kotlin 기반 ORM 및 쿼리 도구', 1, 52),
       (257, '인증, 보안 및 Validation 유틸', 2, 52),
       (258, '비동기 처리 및 웹 클라이언트 활용', 3, 52),
       (259, 'API 문서화, 로깅 및 캐시 유틸', 4, 52),
       (260, '테스트, 빌드, 배포 자동화 도구', 5, 52),
       (261, 'Spring 애플리케이션 실행 및 운영 (Jar 실행, 내장 톰캣, profile 등)', 1, 53),
       (262, '배포 환경 구성 (Docker, Nginx, Reverse Proxy, SSL 등)', 2, 53),
       (263, '환경 변수 및 설정 관리 (.env, application.yml, Spring Profile 등)', 3, 53),
       (264, 'CI/CD (GitHub Actions, DockerHub, Gradle 등)', 4, 53),
       (265, '모니터링 & 로깅 (Spring Boot Actuator, Micrometer, Prometheus, Grafana, ELK 등)', 5, 53),
       (266, 'Node.js Core Modules', 1, 54),
       (267, 'Express.js', 2, 54),
       (268, 'NPM과 모듈 시스템', 3, 54),
       (269, '비동기 처리와 이벤트 루프', 4, 54),
       (270, 'Node.js와 데이터베이스', 5, 54),
       (271, 'Node.js 프로세스 관리 (PM2 등)', 1, 55),
       (272, 'Node.js 배포 (Docker, Nginx, Reverse Proxy)', 2, 55),
       (273, '환경 변수 및 설정 관리 (.env, config 등)', 3, 55),
       (274, 'CI/CD (GitHub Actions, DockerHub 등)', 4, 55),
       (275, '모니터링 & 로깅 (Winston, Logrotate, Sentry 등)', 5, 55),
       (276, 'Django ORM과 모델 유틸', 1, 56),
       (277, '인증, 권한, 시리얼라이저 검증', 2, 56),
       (278, 'Django REST Framework 및 API 구축', 3, 56),
       (279, '캐시, 비동기 작업, 로깅 처리', 4, 56),
       (280, '테스트, 문서화 및 배포 도구 활용', 5, 56),
       (281, 'Django ORM (기본 내장)', 1, 57),
       (282, 'Django Auth, Simple JWT', 2, 57),
       (283, 'Django REST Framework (DRF)', 3, 57),
       (284, 'drf-yasg, drf-spectacular', 4, 57),
       (285, 'DRF Serializer Validation', 5, 57),
       (286, 'Flask 기본 구조 및 서버 프레임워크', 1, 58),
       (287, 'ORM 및 인증/인가 도구', 2, 58),
       (288, 'REST API 구축 및 유효성 검사', 3, 58),
       (289, '캐싱, 스케줄링, 로깅', 4, 58),
       (290, '테스트 및 배포 자동화 도구', 5, 58),
       (291, 'Flask 실행 및 운영 (Gunicorn, Waitress 등)', 1, 59),
       (292, 'Flask 배포 (Docker, Nginx)', 2, 59),
       (293, '환경 설정 (.env, Flask.config)', 3, 59),
       (294, 'CI/CD (GitHub Actions, DockerHub)', 4, 59),
       (295, '정적파일 & 모니터링 (S3, logging, Sentry, Prometheus)', 5, 59);

-- 로드맵 주입용 더미 user
INSERT INTO users(user_id, is_active, email, login_type, nickname) VALUES
    (1, 1, 'user@user.com', 'LOCAL', 'user');

-- 프론트엔드 기본 로드맵 주입
INSERT INTO roadmap_management(roadmap_management_id, roadmap_nm, user_id) VALUES
    (1, 'FE_DEFAULT_ROADMAP', 1);

INSERT INTO roadmap(roadmap_id, order_sub, sub_id, roadmap_management_id, is_complete, pre_submit_count, post_submit_count) VALUES
    (1, 1, 1, 1, 0, 0, 0),
    (2, 2, 2, 1, 0, 0, 0),
    (3, 3, 3, 1, 0, 0, 0),
    (4, 4, 4, 1, 0, 0, 0),
    (5, 5, 5, 1, 0, 0, 0),
    (6, 6, 6, 1, 0, 0, 0),
    (7, 7, 7, 1, 0, 0, 0),
    (8, 8, 8, 1, 0, 0, 0),
    (9, 9, 9, 1, 0, 0, 0),
    (10, 10, 10, 1, 0, 0, 0),
    (11, 11, 11, 1, 0, 0, 0),
    (12, 12, 12, 1, 0, 0, 0),
    (13, 13, 17, 1, 0, 0, 0),
    (14, 14, 18, 1, 0, 0, 0),
    (15, 15, 19, 1, 0, 0, 0),
    (16, 16, 20, 1, 0, 0, 0),
    (17, 17, 21, 1, 0, 0, 0),
    (18, 18, 22, 1, 0, 0, 0),
    (19, 19, 23, 1, 0, 0, 0),
    (20, 20, 24, 1, 0, 0, 0),
    (21, 21, 29, 1, 0, 0, 0),
    (22, 22, 30, 1, 0, 0, 0),
    (23, 23, 31, 1, 0, 0, 0),
    (24, 24, 32, 1, 0, 0, 0),
    (25, 25, 33, 1, 0, 0, 0),
    (26, 26, 34, 1, 0, 0, 0);


-- 백엔드 기본 로드맵 주입
INSERT INTO roadmap_management(roadmap_management_id, roadmap_nm, user_id) VALUES
    (2, 'BE_DEFAULT_ROADMAP', 1);

INSERT INTO roadmap(roadmap_id, order_sub, sub_id, roadmap_management_id, is_complete, pre_submit_count, post_submit_count) VALUES
    (27, 1, 35, 2, 0, 0, 0),
    (28, 2, 36, 2, 0, 0, 0),
    (29, 3, 37, 2, 0, 0, 0),
    (30, 4, 38, 2, 0, 0, 0),
    (31, 5, 39, 2, 0, 0, 0),
    (32, 6, 43, 2, 0, 0, 0),
    (33, 7, 44, 2, 0, 0, 0),
    (34, 8, 45, 2, 0, 0, 0),
    (35, 9, 46, 2, 0, 0, 0),
    (36, 10, 51, 2, 0, 0, 0),
    (37, 11, 53, 2, 0, 0, 0);

DROP TABLE IF EXISTS user_content;
DROP TABLE IF EXISTS total_content;

CREATE TABLE total_content(
    total_content_id BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    content_title VARCHAR(255) NOT NULL,
    content_url TEXT NOT NULL,
    content_type VARCHAR(255) NOT NULL,
    content_platform VARCHAR(255) NOT NULL,
    content_duration VARCHAR(255) NOT NULL,
    content_level VARCHAR(255) NOT NULL,
    content_price VARCHAR(255) NOT NULL,
    sub_id BIGINT NOT NULL,
    CONSTRAINT fk_total_content_subject FOREIGN KEY (sub_id) REFERENCES subject(sub_id)
);

CREATE TABLE user_content(
    user_content_id BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    total_content_id BIGINT NOT NULL,
    sub_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL,
    CONSTRAINT fk_user_content_total_content FOREIGN KEY (total_content_id) REFERENCES total_content(total_content_id),
    CONSTRAINT fk_user_content_subject FOREIGN KEY (sub_id) REFERENCES subject(sub_id),
    CONSTRAINT fk_user_content_users FOREIGN KEY (user_id) REFERENCES users(user_id)
);

INSERT INTO total_content(total_content_id, content_title, content_url, content_type, content_platform, content_duration, content_level, content_price, sub_id) VALUES
    (1, '생활코딩-HTML', 'https://www.youtube.com/watch?v=tZooW6PritE&list=PLuHgQVnccGMDZP7FJ_ZsUrdCGH68ppvPb&ab_channel=%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9', '동영상', '유튜브', 'HOUR_3', '하', 'FREE', 1),
    (2, 'HTML 태그 정리', 'https://www.youtube.com/watch?v=T7h8O7dpJIg&ab_channel=드림코딩', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 1),
    (3, 'HTML 중급 강의', 'https://m.blog.naver.com/mathesis_time/221906127872', '블로그', '블로그', 'HOUR_5', '중', 'FREE', 1),
    (4, '입문자를 위한 HTML 기초 강의', 'https://www.inflearn.com/course/%EC%9E%85%EB%AC%B8%EC%9E%90-html-%EA%B8%B0%EC%B4%88%EA%B0%95%EC%9D%98?srsltid=AfmBOooL9TdXvAkOj_uUnRnvHWUOAhYHM2jPiq_-aFslF5swlirjeGBx', '동영상', '인프런', 'HOUR_3', '하', 'FREE', 1),
    (5, '코딩 자율학습 HTML + CSS + 자바스크립트', 'https://product.kyobobook.co.kr/detail/S000001834830', '책', '교보문고', 'OVER_10', '중', 'UNDER_50K', 1),
    (6, '입문자를 위한 CSS 기초 강의', 'https://www.inflearn.com/course/입문자-css-기초강의?srsltid=AfmBOoqhLYWHIgSIuYN9L56c0YSqILc246vgsw8nGbi2y1MpHqUCoa0n', '동영상', '인프런', 'HOUR_5', '하', 'FREE', 2),
    (7, 'CSS 프로그래밍 기초', 'https://dinfree.com/lecture/frontend/122_css_1.html', '블로그', '블로그', 'HOUR_3', '하', 'FREE', 2),
    (8, 'WEB2 CSS - 1. 수업 소개', 'https://www.youtube.com/watch?v=Ok0bBJPtgJI&list=PLuHgQVnccGMAnWgUYiAW2cTzSBywFO75B&ab_channel=%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9', '동영상', '유튜브', 'HOUR_3', '하', 'FREE', 2),
    (9, 'CSS Flexbox 완전 정리. 포트폴리오 만드는 날까지!', 'https://www.youtube.com/watch?v=7neASrWEFEM&ab_channel=드림코딩', '동영상', '유튜브', 'HOUR_1', '중', 'FREE', 2),
    (10, '코딩 자율학습 HTML + CSS + 자바스크립트', 'https://product.kyobobook.co.kr/detail/S000001834830', '책', '교보문고', 'OVER_10', '중', 'UNDER_50K', 2),
    (11, '【한글자막】 CSS 완벽 가이드 (Flexbox, Grid & Sass 포함)', 'https://www.udemy.com/course/css-flexbox-grid-sass', '동영상', '유데미', 'OVER_10', '하', 'BETWEEN_100K_200K', 2),
    (12, '코딩 자율학습 HTML + CSS + 자바스크립트', 'https://product.kyobobook.co.kr/detail/S000001834830', '책', '교보문고', 'OVER_10', '중', 'UNDER_50K', 3),
    (13, '모던 자바스크립트 Deep Dive', 'https://product.kyobobook.co.kr/detail/S000001766445', '책', '교보문고', 'OVER_10', '하', 'UNDER_50K', 3),
    (14, '바닐라 JS로 크롬 앱 만들기', 'https://nomadcoders.co/javascript-for-beginners', '동영상', '노마드코더', 'HOUR_10', '하', 'FREE', 3),
    (15, 'ES6의 정석', 'https://nomadcoders.co/es6-once-and-for-all', '동영상', '노마드코더', 'HOUR_10', '중', 'UNDER_50K', 3),
    (16, 'JavaScript 입문 수업', 'https://www.youtube.com/playlist?list=PLuHgQVnccGMA4uSig3hCjl7wTDeyIeZVU', '동영상', '유튜브', 'HOUR_10', '중', 'FREE', 3),
    (17, 'JavaScript Course for Beginners – Your First Step to Web Development', 'https://www.youtube.com/watch?v=W6NZfCO5SIk&ab_channel=ProgrammingwithMosh', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 3),
    (18, '모던 JavaScript 튜토리얼', 'https://ko.javascript.info/', '블로그', '블로그', 'OVER_10', '상', 'FREE', 3),
    (19, '견고한 JS 소프트웨어 만들기', 'https://www.inflearn.com/course/tdd-%EA%B2%AC%EA%B3%A0%ED%95%9C-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EB%A7%8C%EB%93%A4%EA%B8%B0', '동영상', '인프런', 'HOUR_3', '중', 'UNDER_50K', 3),
    (20, '타입스크립트로 블록체인 만들기', 'https://nomadcoders.co/typescript-for-beginners', '동영상', '노마드코더', 'HOUR_3', '중', 'FREE', 4),
    (21, '한 입 크기로 잘라먹는 타입스크립트', 'https://www.inflearn.com/course/한입-크기-타입스크립트', '동영상', '인프런', 'OVER_10', '하', 'UNDER_50K', 4),
    (22, '타입스크립트 입문 - 기초부터 실전까지', 'https://www.inflearn.com/course/%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%9E%85%EB%AC%B8', '동영상', '인프런', 'HOUR_10', '하', 'BETWEEN_50K_100K', 4),
    (23, '실전 프로젝트로 배우는 타입스크립트', 'https://www.inflearn.com/course/%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%A4%EC%A0%84', '동영상', '인프런', 'HOUR_10', '상', 'BETWEEN_50K_100K', 4),
    (24, '[코드팩토리] [초급] 8시간만에 끝내는 코드팩토리의 Typescript 완전정복 풀코스', 'https://www.inflearn.com/course/%EC%BD%94%EB%93%9C%ED%8C%A9%ED%86%A0%EB%A6%AC-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%ED%92%80%EC%BD%94%EC%8A%A4', '동영상', '인프런', 'HOUR_10', '하', 'UNDER_50K', 4),
    (25, '[TypeScript 독학] #1 타입스크립트 개념 및 타입', 'https://velog.io/@bbaa3218/TypeScript-1-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B0%9C%EB%85%90-%EB%B0%8F-%ED%83%80%EC%9E%85', '블로그', '블로그', 'HOUR_3', '중', 'FREE', 4),
    (26, '프로가 되기 위한 타입스크립트 프로그래밍 입문', 'https://yes24.com/product/goods/117963966', '책', 'Yes24', 'OVER_10', '중', 'UNDER_50K', 4),
    (27, 'Do it! 타입스크립트 프로그래밍', 'https://www.yes24.com/product/goods/89328106', '책', 'Yes24', 'OVER_10', '중', 'UNDER_50K', 4),
    (28, '타입스크립트로 블록체인 만들기', 'https://nomadcoders.co/typescript-for-beginners', '동영상', '노마드코더', 'HOUR_5', '중', 'FREE', 4),
    (29, '공식문서로 배우는 실전 타입스크립트', 'https://www.inflearn.com/course/%EA%B3%B5%EC%8B%9D%EB%AC%B8%EC%84%9C-%EC%8B%A4%EC%A0%84-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8', '동영상', '인프런', 'HOUR_3', '하', 'UNDER_50K', 4),
    (30, '핵심만 골라 배우는 TypeScript', 'https://www.inflearn.com/course/%ED%95%B5%EC%8B%AC%EB%A7%8C-%EB%B0%B0%EC%9A%B0%EB%8A%94-tyescript', '동영상', '인프런', 'HOUR_10', '중', 'BETWEEN_50K_100K', 4),
    (31, '【한글자막】 Typescript :기초부터 실전형 프로젝트까지 with React + NodeJS', 'https://www.udemy.com/course/best-typescript-21/?srsltid=AfmBOoosvgmyQF-dC9cODGGQnG9LkhLTTC_rezgyPcbi9MIsTTZqjfyN&utm_source=chatgpt.com&couponCode=ST8MT220425G1', '동영상', '유데미', 'OVER_10', '중', 'BETWEEN_100K_200K', 4),
    (32, '【한글자막】 TypeScript 마스터 with Webpack & React', 'https://www.udemy.com/course/typescript-with-webpack-react/?srsltid=AfmBOopB0mJ8ppGCLk55jVUe1S73fwXfIk0KbxXmnIUTn_ltkUGgLzQj&utm_source=chatgpt.com&couponCode=ST8MT220425G1', '동영상', '유데미', 'OVER_10', '중', 'BETWEEN_100K_200K', 4),
    (33, 'JavaScript & TypeScript Essential', 'https://fastcampus.co.kr/dev_academy_kmt1?utm_source=chatgpt.com', '동영상', 'FASTCAMPUS', 'HOUR_5', '하', 'UNKNOWN', 4),
    (34, '[리뉴얼] 타입스크립트 올인원 : Part1. 기본 문법편', 'https://www.inflearn.com/course/%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%98%AC%EC%9D%B8%EC%9B%90-1', '동영상', '인프런', 'HOUR_10', '하', 'UNDER_50K', 4),
    (35, '[리뉴얼] 타입스크립트 올인원 : Part2. 실전 분석편', 'https://www.inflearn.com/course/%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%98%AC%EC%9D%B8%EC%9B%90-2', '동영상', '인프런', 'HOUR_10', '중', 'UNDER_50K', 4),
    (36, 'TypeScript', 'https://edu.goorm.io/lecture/39523/생활코딩-typescript', '동영상', 'goormedu', 'HOUR_3', '중', 'FREE', 4),
    (37, '타입스크립트 핸드북', 'https://joshua1988.github.io/ts/', '블로그', '블로그', 'HOUR_3', '중', 'FREE', 4),
    (38, '【한글자막】 TypeScript 마스터 with Webpack & React', 'https://www.udemy.com/course/typescript-with-webpack-react', '동영상', '유데미', 'OVER_10', '상', 'BETWEEN_50K_100K', 4),
    (39, 'DOM 기본', 'https://www.inflearn.com/course/dom-%EA%B8%B0%EB%B3%B8', '동영상', '인프런', 'OVER_10', '중', 'BETWEEN_50K_100K', 5),
    (40, 'React의 가상돔 (Virtual DOM)이 뭔가요? (짱 쉬움)', 'https://www.youtube.com/watch?v=gc-kXt0tjTM&ab_channel=별코딩', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 5),
    (41, 'DOM 인터랙션', 'https://www.inflearn.com/course/dom-%EC%99%84%EC%A0%84-%EB%81%9D%EB%82%B4%EA%B8%B0-%EC%9D%B8%ED%84%B0%EB%A0%89%EC%85%98', '동영상', '인프런', 'OVER_10', '상', 'BETWEEN_50K_100K', 5),
    (42, 'Virtual DOM, 가상 돔 이란?', 'https://doqtqu.tistory.com/316#1.%20DOM(Document%20Object%20Model)', '블로그', '블로그', 'HOUR_1', '하', 'FREE', 5),
    (43, 'What is the Virtual DOM in React?', 'https://www.freecodecamp.org/news/what-is-the-virtual-dom-in-react/', '블로그', '블로그', 'HOUR_1', '하', 'FREE', 5),
    (44, 'DOM의 새로운 발견! Virtual DOM 동작 원리', 'https://velog.io/@sunhwa508/Virtual-DOM', '블로그', '블로그', 'HOUR_1', '중', 'FREE', 5),
    (45, '제대로 파는 Git & GitHub', 'https://www.youtube.com/watch?v=1I3hMwQU6GU&ab_channel=%EC%96%84%ED%8C%8D%ED%95%9C%EC%BD%94%EB%94%A9%EC%82%AC%EC%A0%84', '동영상', '유튜브', 'HOUR_3', '하', 'FREE', 6),
    (46, '깃, 깃허브 제대로 배우기', 'https://www.youtube.com/watch?v=Z9dvM7qgN9s&ab_channel=%EB%93%9C%EB%A6%BC%EC%BD%94%EB%94%A9', '동영상', '유튜브', 'HOUR_1', '중', 'FREE', 6),
    (47, '깃 연습해보기', 'https://learngitbranching.js.org/?locale=ko', '블로그', '블로그', 'HOUR_1', '하', 'FREE', 6),
    (48, '제대로 파고드는 Git & GitHub - by 얄코(Yalco)', 'https://www.inflearn.com/course/%EC%A0%9C%EB%8C%80%EB%A1%9C-%ED%8C%8C%EB%8A%94-%EA%B9%83', '동영상', '인프런', 'HOUR_10', '중', 'UNDER_50K', 6),
    (49, '【한글자막】 Git & Github 실무 활용 완벽 가이드', 'https://www.udemy.com/course/best-git-github', '동영상', '유데미', 'OVER_10', '중', 'BETWEEN_100K_200K', 6),
    (50, 'Git 팀 작업을 자동화하는 방법 [Hooks와 커스텀 스크립트]', 'https://coding-by-head.tistory.com/entry/git-hook', '블로그', '블로그', 'HOUR_1', '중', 'FREE', 7),
    (51, 'Husky로 Git hooks 자동화하기(+ lint-staged, commitlint)', 'https://meoweundi.tistory.com/37', '블로그', '블로그', 'HOUR_3', '중', 'FREE', 7),
    (52, 'Git Hooks', 'https://www.atlassian.com/ko/git/tutorials/git-hooks', '블로그', '블로그', 'HOUR_3', '중', 'FREE', 7),
    (53, 'husky, lint-staged', 'https://deku.posstree.com/ko/react/husky-lint-staged/', '블로그', '블로그', 'HOUR_1', '중', 'FREE', 7),
    (54, 'Configuring husky pre-commit git hooks', 'https://www.youtube.com/watch?v=jGEkiljxvxU', '동영상', '유튜브', 'HOUR_1', '중', 'FREE', 7),
    (55, 'Git Project Setup with Husky, Conventional Commits, and branching strategies.', 'https://www.youtube.com/watch?app=desktop&v=jNxDNoYEGVU&t=1169s', '동영상', '유튜브', 'HOUR_1', '중', 'FREE', 7),
    (56, 'Axios instance와 interceptors로 Axios 효율성 높이기', 'https://ramincoding.tistory.com/entry/React-Axios-instance-와-interceptors-로-Axios-효율성-높이기', '블로그', '블로그', 'HOUR_3', '중', 'FREE', 8),
    (57, 'Axios Instance 만들어보기', 'https://velog.io/@posinity/%ED%95%AD%ED%95%B499-Axios-Instance-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EA%B8%B0', '블로그', '블로그', 'HOUR_1', '하', 'FREE', 8),
    (58, 'Axios : instance와 interceptor', 'https://developer-haru.tistory.com/51', '블로그', '블로그', 'HOUR_3', '중', 'FREE', 8),
    (59, 'Axios 공식 문서', 'https://axios-http.com/kr/docs/instance', '블로그', '블로그', 'HOUR_5', '중', 'FREE', 8),
    (60, 'How can you use axios interceptors?', 'https://stackoverflow.com/questions/52737078/how-can-you-use-axios-interceptors', '블로그', '블로그', 'HOUR_3', '중', 'FREE', 8),
    (61, 'Axios Tutorial', 'https://www.youtube.com/playlist?list=PLnHJACx3NwAdSOK3BoQ7wjCDT1Iw7hs_u', '동영상', '유튜브', 'HOUR_3', '하', 'FREE', 8),
    (62, 'React | 공통 API 에러 처리 제작기(feat. React Query)', 'https://velog.io/@jun_n3/React-%EA%B3%B5%ED%86%B5-API-%EC%97%90%EB%9F%AC-%EC%B2%98%EB%A6%AC-%EC%A0%9C%EC%9E%91%EA%B8%B0feat.-React-Query', '블로그', '블로그', 'HOUR_3', '중', 'FREE', 9),
    (63, 'Axios Retry로 API 요청 마스터하기: 종합 가이드', 'https://apidog.com/kr/blog/axios-retry-request-2/', '블로그', '블로그', 'HOUR_3', '상', 'FREE', 9),
    (64, '[Web] API, REST API에 대해 공부해보자', 'https://five-sun.tistory.com/112', '블로그', '블로그', 'HOUR_1', '하', 'FREE', 9),
    (65, 'Spring Boot 에서 API 재시도를 처리할수 있는 여러가지 방안들', 'https://velog.io/@garden6/API-%EC%9E%AC%EC%8B%9C%EB%8F%84%EB%A5%BC-%EC%B2%98%EB%A6%AC%ED%95%A0%EC%88%98-%EC%9E%88%EB%8A%94-%EC%97%AC%EB%9F%AC%EA%B0%80%EC%A7%80-%EB%B0%A9%EC%95%88%EB%93%A4', '블로그', '블로그', 'HOUR_1', '중', 'FREE', 9),
    (66, 'API Fetch Retry 로직 작성해보기 (with Axios)', 'https://flyingsquirrel.medium.com/api-fetch-retry로직-작성해보기-with-axios-5cb81e6345ad', '블로그', '블로그', 'HOUR_1', '하', 'FREE', 9),
    (67, 'Spring Retry for resilient database or REST API access with simple annotation in Spring Boot.', 'https://www.youtube.com/watch?v=Q0nh8ECG5rQ', '동영상', '유튜브', 'HOUR_1', '중', 'FREE', 9),
    (68, 'Unlock the Hidden Power of Spring Boot Retry', 'https://www.youtube.com/watch?v=Nj3wPmIJRy0', '동영상', '유튜브', 'HOUR_1', '중', 'FREE', 9),
    (69, 'Spring Retry & RestClient (Part 2): Custom HTTP Exceptions, Error Handlers, JDK/Apache HttpClients', 'https://www.youtube.com/watch?v=pezBoiaBvus', '동영상', '유튜브', 'HOUR_1', '중', 'FREE', 9),
    (70, '모던 리액트 Deep Dive', 'https://product.kyobobook.co.kr/detail/S000210725203', '책', '교보문고', 'OVER_10', '중', 'UNDER_50K', 10),
    (71, 'React & Express 를 이용한 웹 어플리케이션 개발하기', 'https://www.inflearn.com/course/react-%EA%B0%95%EC%A2%8C-velopert', '동영상', '인프런', 'HOUR_10', '중', 'FREE', 10),
    (72, 'ReactJS로 영화 웹 서비스 만들기', 'https://nomadcoders.co/react-for-beginners', '동영상', '노마드코더', 'HOUR_10', '하', 'FREE', 10),
    (73, '리액트의 Hooks 완벽 정복하기', 'https://velog.io/@velopert/react-hooks', '블로그', '블로그', 'HOUR_3', '중', 'FREE', 10),
    (74, 'React JS 마스터클래스', 'https://nomadcoders.co/react-masterclass', '동영상', '노마드코더', 'OVER_10', '상', 'BETWEEN_100K_200K', 10),
    (75, '벨로퍼트와 함께하는 모던 리액트', 'https://react.vlpt.us/', '블로그', '블로그', 'HOUR_5', '중', 'FREE', 10),
    (76, '프로젝트로 배우는 React.js', 'https://www.inflearn.com/course/프로젝트-배우는-리액트', '동영상', '인프런', 'HOUR_10', '하', 'UNDER_50K', 10),
    (77, '웹 게임을 만들며 배우는 React에 TypeScript 적용하기', 'https://www.inflearn.com/course/react-typescript-webgame', '동영상', '인프런', 'HOUR_10', '중', 'UNDER_50K', 10),
    (78, '생활코딩 - Redux', 'https://www.inflearn.com/course/redux-%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9?srsltid=AfmBOoocwGw5aB_bSPaJTRNsjkGaO9h_KiH9OPZ6R78kJqNI1-PuzWne', '동영상', '인프런', 'HOUR_3', '중', 'FREE', 11),
    (79, '초보자를 위한 리덕스 101', 'https://nomadcoders.co/redux-for-beginners', '동영상', '노마드코더', 'HOUR_3', '하', 'FREE', 11),
    (80, '(2025 최신 업데이트)리액트 : 프론트엔드 개발자로 가는 마지막 단계', 'https://www.inflearn.com/course/%EB%A6%AC%EC%95%A1%ED%8A%B8-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EB%A7%88%EC%A7%80%EB%A7%89#curriculum', '동영상', '인프런', 'HOUR_1', '중', 'BETWEEN_100K_200K', 11),
    (81, '[리액트] Redux와 사용법', 'https://medium.com/@heoh06/%EB%A6%AC%EC%95%A1%ED%8A%B8-redux%EC%99%80-%EC%82%AC%EC%9A%A9%EB%B2%95-731853fc3cd4', '블로그', '블로그', 'HOUR_3', '중', 'FREE', 11),
    (82, '[Redux] Redux 사용법 기초 useState처럼 사용하기', 'https://velog.io/@chaerin00/Redux-%EC%82%AC%EC%9A%A9%EB%B2%95-%EA%B8%B0%EC%B4%88-useState%EC%B2%98%EB%9F%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0', '블로그', '블로그', 'HOUR_3', '하', 'FREE', 11),
    (83, 'React 입문 - react-redux 리덕스 사용법', 'https://olive-jam.tistory.com/47', '블로그', '블로그', 'HOUR_5', '상', 'FREE', 11),
    (84, 'React Redux Tutorials', 'https://www.youtube.com/watch?v=9boMnm5X9ak&list=PLC3y8-rFHvwheJHvseC3I0HuYI2f46oAK', '동영상', '유튜브', 'HOUR_3', '하', 'FREE', 11),
    (85, 'Redux Toolkit Tutorial', 'https://www.youtube.com/watch?v=0awA5Uw6SJE&list=PLC3y8-rFHvwiaOAuTtVXittwybYIorRB3', '동영상', '유튜브', 'HOUR_3', '상', 'FREE', 11),
    (86, '맛집 지도앱 만들기 (React Native + NestJS)', 'https://www.inflearn.com/course/%EB%A7%9B%EC%A7%91-%EC%A7%80%EB%8F%84%EC%95%B1-%EB%A7%8C%EB%93%A4%EA%B8%B0-reactnative-nestjs', '동영상', '인프런', 'OVER_10', '중', 'BETWEEN_50K_100K', 12),
    (87, 'Zustand 가이드북(간단한 사용법부터 Pro Tips까지)', 'https://lambda-log.tistory.com/9', '블로그', '블로그', 'HOUR_1', '하', 'FREE', 12),
    (88, '실무에 바로 쓰는 Next.js', 'https://spartacodingclub.kr/product/72', '동영상', 'spartacodingclub', 'OVER_10', '중', 'UNKNOWN', 12),
    (89, 'Zustand Tutorial for Beginners - The Only Course You Will Ever Need', 'https://www.youtube.com/watch?v=AYO4qHAnLQI', '동영상', '유튜브', 'HOUR_3', '하', 'FREE', 12),
    (90, 'react zustand in detail (2023)', 'https://www.youtube.com/playlist?list=PL1T-3Hf9FqXbH54aLLMWMpdn6OMa5TWOX', '동영상', '유튜브', 'HOUR_3', '하', 'FREE', 12),
    (91, 'Zustand React State Management Course (Simple Redux Alternative)', 'https://www.youtube.com/watch?v=fZPgBnL2x-Q', '동영상', '유튜브', 'HOUR_3', '하', 'FREE', 12),
    (92, 'Zustand', 'https://opentutorials.org/course/4671', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 12),
    (93, 'Zustand는 작고, 빠르고, 확장가능한 상태관리 솔루션입니다.', 'https://www.youtube.com/watch?v=L5ID-3r-U4w&list=PLeMeDIV7bypu08YTMGuKyjHgLnGN8VZ28&index=2', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 12),
    (94, 'Next + React Query로 SNS 서비스 만들기', 'https://www.inflearn.com/course/next-react-query-sns%EC%84%9C%EB%B9%84%EC%8A%A4', '동영상', '인프런', 'OVER_10', '중', 'BETWEEN_50K_100K', 12),
    (95, '기초부터 배우는 Next YTMusic 클론 코딩 (with next.js 14, UI 마스터)', 'https://www.inflearn.com/course/%EA%B8%B0%EC%B4%88-next-ytmusic-%ED%81%B4%EB%A1%A0%EC%BD%94%EB%94%A9', '동영상', '인프런', 'HOUR_10', '하', 'UNDER_50K', 12),
    (96, 'Vue.js 끝장내기 - 실무에 필요한 모든 것', 'https://www.inflearn.com/course/vue-js-끝내기-캡틴판교', '동영상', '인프런', 'HOUR_10', '상', 'BETWEEN_100K_200K', 13),
    (97, '웹 게임을 만들며 배우는 Vue', 'https://www.inflearn.com/course/web-game-vue', '동영상', '인프런', 'HOUR_10', '중', 'FREE', 13),
    (98, 'Vue로 Nodebird SNS 만들기', 'https://www.inflearn.com/course/vue-nodebird-sns', '동영상', '인프런', 'OVER_10', '상', 'BETWEEN_50K_100K', 13),
    (99, 'Vue3 강좌 한방에 몰아보기', 'https://www.youtube.com/watch?v=m2j_Y245xew', '동영상', '유튜브', 'HOUR_3', '중', 'FREE', 13),
    (100, '트렐로 개발로 배우는 Vue.js, Vuex, Vue-Router 프론트엔드 실전 기술', 'https://www.inflearn.com/course/vuejs', '동영상', '인프런', 'HOUR_10', '중', 'BETWEEN_50K_100K', 13),
    (101, 'Vue 3 시작하기', 'https://www.inflearn.com/course/vue-3-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0', '동영상', '인프런', 'HOUR_5', '하', 'UNDER_50K', 13),
    (102, 'Vue.js + TypeScript 완벽 가이드', 'https://www.inflearn.com/course/vue-ts', '동영상', '인프런', 'HOUR_10', '상', 'BETWEEN_50K_100K', 13),
    (103, 'Vue 3 중급 - Composition API', 'https://www.inflearn.com/course/vue-3-%EC%A4%91%EA%B8%89-composition-api', '동영상', '인프런', 'HOUR_3', '중', 'BETWEEN_50K_100K', 13),
    (104, 'Vue 3 & Firebase 10 커뮤니티 만들기 풀스택 - "활용편" (with Pinia, Quasar, Tiptap, VueUse)', 'https://www.inflearn.com/course/vue3-firebase10-%EC%BB%A4%EB%AE%A4%EB%8B%88%ED%8B%B0%EB%A7%8C%EB%93%A4%EA%B8%B0', '동영상', '인프런', 'OVER_10', '상', 'BETWEEN_100K_200K', 13),
    (105, 'Vue JS 맛보기 - 정말 쉬운지 아닌지 살펴보기?', 'https://www.youtube.com/watch?v=QtQ-xbLyaqI&ab_channel=%EB%8D%B0%EB%B8%8C%EB%A6%AC', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 13),
    (106, '뷰js 2 (Vue.js 2) 기초 익히기 기본 강좌!', 'https://www.youtube.com/playlist?list=PLB7CpjPWqHOtYP7P_0Ls9XNed0NLvmkAh', '동영상', '유튜브', 'HOUR_3', '하', 'FREE', 13),
    (107, '프로젝트로 배우는 Vue.js 3', 'https://www.inflearn.com/course/vue-%EA%B8%B0%EC%B4%88-%EC%9D%B5%ED%9E%88%EA%B8%B0', '동영상', '인프런', 'HOUR_10', '하', 'UNDER_50K', 13),
    (108, 'Vue.js 중급 강좌 - 웹앱 제작으로 배워보는 Vue.js, ES6, Vuex', 'https://www.inflearn.com/course/vue-pwa-vue-js-%EC%A4%91%EA%B8%89', '동영상', '인프런', 'HOUR_10', '중', 'BETWEEN_50K_100K', 13),
    (109, 'Nuxt3 Pinia Full Course (feat. News API)', 'https://www.youtube.com/watch?v=5eA0V540hZs', '동영상', '유튜브', 'HOUR_3', '하', 'FREE', 14),
    (110, 'Vuex Tutorial', 'https://www.youtube.com/playlist?list=PLZzSdj89sCN292abcbI3utND8pA1T1OyB', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 14),
    (111, '공식문서로 알아보는 Pinia Full Tutorial', 'https://www.youtube.com/watch?v=_LPTZbzzc7g', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 14),
    (112, 'Pinia Crash Course', 'https://www.youtube.com/playlist?list=PL4cUxeGkcC9hp28dYyYBy3xoOdoeNw-hD', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 14),
    (113, 'Pinia Course 2022', 'https://www.youtube.com/watch?v=G4H6QOcGKbU', '동영상', '유튜브', 'HOUR_3', '중', 'FREE', 14),
    (114, 'Learn Pinia in 30 MINUTES! (Vue JS 3)', 'https://www.youtube.com/watch?v=JGC7aAC-3y8', '동영상', '유튜브', 'HOUR_1', '중', 'FREE', 14),
    (115, 'Angular, 앵귤러 100분 핵심강의', 'https://www.inflearn.com/course/angular-100min?srsltid=AfmBOorAE_wX-ioQ-_CODnNbvJXN9SLgrbvtmGxbq4CFN-Ua1lcdM6Fz', '동영상', '인프런', 'HOUR_3', '중', 'UNDER_50K', 15),
    (116, 'Angular 기본과 간단한 To-Do 어플리케이션 만들기', 'https://www.inflearn.com/course/angular-강좌-기본?srsltid=AfmBOorsGYu1eRLCu9OXAvzM-JSkb22oK-gG4A3qdwfYRAqVGresJ_IT', '동영상', '인프런', 'HOUR_3', '하', 'FREE', 15),
    (117, 'Angular【한글자막】 Angular 완벽 가이드 : 기초 문법부터 TypeScript 기반 최신 문법까지', 'https://www.udemy.com/course/angular-2021/?couponCode=ST8MT220425G1', '동영상', '유데미', 'OVER_10', '중', 'UNDER_50K', 15),
    (118, 'Angular(2+) Front에서 Back까지 - Nest js를 알려면 Angular 모듈을 알아야한다!', 'https://www.inflearn.com/course/Angular', '동영상', '인프런', 'HOUR_10', '중', 'FREE', 15),
    (119, 'Angular Essentials', 'https://product.kyobobook.co.kr/detail/S000001891079', '책', '교보문고', 'OVER_10', '중', 'UNDER_50K', 15),
    (120, '앵귤러 첫걸음', 'https://product.kyobobook.co.kr/detail/S000001057857', '책', '교보문고', 'OVER_10', '하', 'UNDER_50K', 15),
    (121, 'Angular - The Complete Guide (2025 Edition)', 'https://www.udemy.com/course/the-complete-guide-to-angular-2', '동영상', '유데미', 'OVER_10', '상', 'BETWEEN_100K_200K', 15),
    (122, 'Angular Deep Dive - Beginner to Advanced (Angular 19)', 'https://www.udemy.com/course/angular-course/', '동영상', '유데미', 'OVER_10', '상', 'BETWEEN_50K_100K', 15),
    (123, 'Angular NGRX Complete Course Tutorial', 'https://www.youtube.com/playlist?list=PL_euSNU_eLbdg0gKbR8zmVJb4xLgHR7BX', '동영상', '유튜브', 'HOUR_10', '하', 'FREE', 16),
    (124, '이 영상을 보시면 NgRx를 이해하실 수 있을 거라 장담합니다', 'https://www.youtube.com/watch?v=kx0VTgTtSBg', '동영상', '유튜브', 'HOUR_1', '중', 'FREE', 16),
    (125, 'Ngrx 도입', 'https://front-study.tistory.com/58', '블로그', '블로그', 'HOUR_1', '중', 'FREE', 16),
    (126, '[Angular] NGRX 적용 - (1) ngrx 동작 과정 이해하기', 'https://dongurami0502.tistory.com/16', '블로그', '블로그', 'HOUR_1', '하', 'FREE', 16),
    (127, 'ngrx architecture를 이용하여 angular 앱을 더 기분 좋게 만들기', 'https://medium.com/pplink/ngrx-architecture%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-angular-%EC%95%B1%EC%9D%84-%EB%8D%94-%EA%B8%B0%EB%B6%84-%EC%A2%8B%EA%B2%8C-%EB%A7%8C%EB%93%A4%EA%B8%B0-9182c582a113', '블로그', '블로그', 'HOUR_3', '상', 'FREE', 16),
    (128, 'NgRx (with NgRx Data) - The Complete Guide (Angular 19)', 'https://www.udemy.com/course/ngrx-course/?utm_medium=udemyads&utm_source=wj-krweb&utm_campaign=udemykorea_course&utm_content=ngrx-course&utm_term=230814&couponCode=KRLETSLEARNNOW', '동영상', '유데미', 'HOUR_10', '상', 'BETWEEN_50K_100K', 16),
    (129, '실무에 바로 적용하는 스토리북과 UI 테스트', 'https://www.inflearn.com/course/%EC%8B%A4%EB%AC%B4%EC%A0%81%EC%9A%A9-%EC%8A%A4%ED%86%A0%EB%A6%AC%EB%B6%81-ui%ED%85%8C%EC%8A%A4%ED%8A%B8', '동영상', '인프런', 'HOUR_3', '하', 'BETWEEN_50K_100K', 17),
    (130, '2시간으로 끝내는 프론트엔드 테스트 기본기', 'https://www.inflearn.com/course/%EC%A3%BC%EB%8B%88%EC%96%B4-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EA%B8%B0%EB%B3%B8%EA%B8%B0', '동영상', '코드잇', 'HOUR_3', '하', 'UNDER_50K', 17),
    (131, '스토리북 & 자동화 테스트와 함께 하는 컴포넌트 주도 프론트엔드 개발', 'https://www.inflearn.com/course/%ED%8C%90%EA%B5%90-%ED%87%B4%EA%B7%BC%EA%B8%B8%EB%B0%8B%EC%97%85-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%BD%94%EB%93%9C', '동영상', '인프런', 'HOUR_1', '하', 'FREE', 17),
    (132, 'UI 컴포넌트 구축하기스토리북에서 디자인 시스템 컴포넌트를 구축하고 구조화하기', 'https://storybook.js.org/tutorials/design-systems-for-developers/react/ko/build/', '블로그', '블로그', 'HOUR_1', '중', 'FREE', 17),
    (133, '현장에서 바로 써먹는 리액트 with 타입스크립트', 'https://product.kyobobook.co.kr/detail/S000202707764', '책', '교보문고', 'OVER_10', '하', 'UNDER_50K', 17),
    (134, 'Storybook Official Tutorial Code Along - Web Development', 'https://www.udemy.com/course/storybook-official-tutorial-code-along-web-development', '동영상', '유데미', 'HOUR_10', '하', 'UNDER_50K', 17),
    (135, 'Convert a Figma design to ReactJS components using Storybook', 'https://www.udemy.com/course/implement-a-design-system-with-reactjs-storybook-tailwind', '동영상', '유데미', 'HOUR_5', '하', 'UNDER_50K', 17),
    (136, 'Advanced React & Storybook: From Components Library to CI/CD', 'https://www.udemy.com/course/build-react-v17-components-with-storybook', '동영상', '유데미', 'HOUR_5', '중', 'BETWEEN_50K_100K', 17),
    (137, 'Advanced React: Design System, Design Patterns, Performance', 'https://www.udemy.com/course/advanced-react', '동영상', '유데미', 'OVER_10', '상', 'BETWEEN_50K_100K', 17),
    (138, 'React Storybook Tutorial', 'https://www.youtube.com/playlist?list=PLC3y8-rFHvwhC-j3x3t9la8-GQJGViDQk', '동영상', '유튜브', 'HOUR_3', '하', 'FREE', 17),
    (139, 'Modern Component Library with React & Storybook', 'https://www.youtube.com/playlist?list=PLKBvDYynKmlWa59k8pnw-EHac2_miPagh', '동영상', '유튜브', 'HOUR_3', '하', 'FREE', 17),
    (140, 'Storybook Crash Course: For React Devs And Storybook Beginners with Storybook Maintainer, Yann Braga', 'https://www.youtube.com/watch?v=x-x47qHq3nY', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 17),
    (141, '쉽고 빠른 스타일링 Tailwind CSS 기초 가이드', 'https://www.inflearn.com/course/tailwind-css-기초?srsltid=AfmBOoran6emeg4BdcdPHnUTYXV3h_ipF-U2bYisdK74Xyq7pDKrG1g5', '동영상', '인프런', 'HOUR_3', '하', 'UNDER_50K', 17),
    (142, 'TailwindCSS 완벽 마스터: 포트폴리오부터 어드민까지!', 'https://www.inflearn.com/course/tailwindcss-완전정복-포트폴리오-어드민까지', '동영상', '인프런', 'HOUR_10', '중', 'UNDER_50K', 18),
    (143, '테일윈드 CSS', 'https://www.yes24.com/Product/Goods/126841796', '책', 'Yes24', 'OVER_10', '중', 'UNDER_50K', 18),
    (144, 'TailwindCSS 완전 정복 강의 EP01 ~ EP11', 'https://www.youtube.com/watch?v=sOiuZQo93cU&ab_channel=%EC%A7%90%EC%BD%94%EB%94%A9', '동영상', '유튜브', 'HOUR_3', '중', 'FREE', 18),
    (145, '[쉽고 빠른 스타일링 Tailwind CSS 기초 가이드] 설치/확장프로그램/기본속성', 'https://velog.io/@posinity/%EC%89%BD%EA%B3%A0-%EB%B9%A0%EB%A5%B8-%EC%8A%A4%ED%83%80%EC%9D%BC%EB%A7%81-Tailwind-CSS-%EA%B8%B0%EC%B4%88-%EA%B0%80%EC%9D%B4%EB%93%9C', '블로그', '블로그', 'HOUR_5', '중', 'FREE', 18),
    (146, 'Tailwind CSS 사용기', 'https://fe-developers.kakaoent.com/2022/220303-tailwind-tips/', '블로그', '블로그', 'HOUR_1', '중', 'FREE', 18),
    (147, '🚀Next.js + Tailwind.css 로 블로그 만들기 - 1. setting / config + data fetching', 'https://velog.io/@holicholicpop/Next.js-Tailwind.css-로-블로그-만들기-1.-setting-config-data-fetching', '블로그', '블로그', 'HOUR_3', '중', 'FREE', 18),
    (148, 'Tailwind CSS Tutorial #1 - Intro & Setup', 'https://www.youtube.com/watch?v=bxmDnn7lrnk&list=PL4cUxeGkcC9gpXORlEHjc5bgnIi5HEGhw&ab_channel=NetNinja', '동영상', '유튜브', 'HOUR_3', '중', 'FREE', 18),
    (149, '[초급] 40분만에 훑어보는 Sass', 'https://www.inflearn.com/course/%EC%B4%88%EA%B8%89-30%EB%B6%84-sass', '동영상', '인프런', 'HOUR_1', '하', 'UNDER_50K', 19),
    (150, 'CSS에 날개를 달아주는 Sass (SCSS)', 'https://www.inflearn.com/course/css%EC%97%90-%EB%82%A0%EA%B0%9C%EB%A5%BC-%EB%8B%AC%EC%95%84%EC%A3%BC%EB%8A%94-sass-scss', '동영상', '인프런', 'OVER_10', '중', 'UNDER_50K', 19),
    (151, 'The Complete Sass & SCSS Course: From Beginner to Advanced', 'https://www.udemy.com/course/sasscourse/?couponCode=ST8MT220425G1', '동영상', '유데미', 'HOUR_5', '하', 'BETWEEN_50K_100K', 19),
    (152, '실무자를 위한 Sass (CSS 프리프로세서)', 'https://www.udemy.com/course/css-preprocessor/?couponCode=ST8MT220425G1', '동영상', '유데미', 'HOUR_3', '하', 'UNDER_50K', 19),
    (153, 'SASS(SCSS) 기초 개념 및 사용법', 'https://www.youtube.com/watch?v=C4g036Ioo3o&list=PLmAWMAo-opQzz95sYuW5Bj9mcmx0NG-ey', '동영상', '유튜브', 'HOUR_3', '하', 'FREE', 19),
    (154, '초보자를 위한 Sass 기초 강의 & 자몽톡 클론코딩', 'https://www.inflearn.com/course/%EC%B4%88%EB%B3%B4%EC%9E%90-%EC%82%AC%EC%8A%A4-%EA%B8%B0%EC%B4%88%EA%B0%95%EC%9D%98-%ED%81%B4%EB%A1%A0#curriculum', '동영상', '인프런', 'HOUR_5', '하', 'UNDER_50K', 19),
    (155, 'SCSS', 'https://ebook-product.kyobobook.co.kr/dig/epd/ebook/E000008381180', '책', '교보문고', 'OVER_10', '중', 'UNDER_50K', 19),
    (156, 'Sass Moderno (Lleva CSS al siguiente nivel)', 'https://www.udemy.com/course/sass-curso/?couponCode=ST8MT220425G1', '동영상', '유데미', 'HOUR_5', '상', 'UNDER_50K', 19),
    (157, 'SCSS(SASS)+FLEX 실전 반응형 웹 프로젝트 with Figma', 'https://www.inflearn.com/course/scss-flex-실전반응형-웹프로젝트-figma', '동영상', '인프런', 'OVER_10', '중', 'BETWEEN_100K_200K', 19),
    (158, 'React Styled Components Course (V5)', 'https://www.udemy.com/course/styled-components-tutorial-and-project-course/?couponCode=ST7MT290425G1', '동영상', '유데미', 'HOUR_3', '하', 'BETWEEN_50K_100K', 20),
    (159, 'Learn Styled Components in React', 'https://www.coursera.org/learn/learn-styled-components-in-react', '동영상', 'Coursera', 'HOUR_3', '중', 'FREE', 20),
    (160, 'Styled Components', 'https://www.codeit.kr/topics/styled-components', '동영상', '코드잇', 'HOUR_10', '중', 'FREE', 20),
    (161, 'CSS for the <Component> Age', 'https://styled-components.com/', '책', '공식문서', 'OVER_10', '상', 'FREE', 20),
    (162, '[styled-component] 왕초보가 styled-component 배워보기', 'https://velog.io/@pakxe/series/styled-component', '블로그', '블로그', 'HOUR_5', '하', 'FREE', 20),
    (163, 'React Styled Components', 'https://www.youtube.com/playlist?list=PLC3y8-rFHvwgu-G08-7ovbN9EyhF_cltM', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 20),
    (164, 'Prettier, ESLint 이해하고 사용하기', 'https://velog.io/@imkkuk/Prettier-ESLint-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B3%A0-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0', '블로그', '블로그', 'HOUR_3', '하', 'FREE', 21),
    (165, '프론트엔드 개발환경의 이해와 실습 (webpack, babel, eslint..)', 'https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD/community?srsltid=AfmBOoqNJUk176njEl2FaVDoPUp19O7nleyenDXDRLlSBu4QzU5cIn11', '동영상', '인프런', 'HOUR_10', '중', 'BETWEEN_50K_100K', 21),
    (166, 'ESLint 설치 및 configuration 설정하는 방법', 'https://ablue-1.tistory.com/111', '블로그', '블로그', 'HOUR_3', '중', 'FREE', 21),
    (167, '우리 팀을 위한 ESLint, Prettier 공유 컨피그 만들어보기', 'https://techblog.woowahan.com/15903/', '블로그', '블로그', 'HOUR_5', '상', 'FREE', 21),
    (168, 'Prettier, ESLint 설치하기 [ 리액트 (React + Typescript) ]', 'https://www.youtube.com/watch?v=RDIKsxddlmg&ab_channel=어라운드허브스튜디오-AroundHubStudio', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 21),
    (169, 'Prettier', 'https://ebook-product.kyobobook.co.kr/dig/epd/ebook/E000007628389', '책', '교보문고', 'OVER_10', '중', 'UNDER_50K', 21),
    (170, 'ESLint', 'https://ebook-product.kyobobook.co.kr/dig/epd/ebook/E000006806383', '책', '교보문고', 'OVER_10', '중', 'UNDER_50K', 21),
    (171, 'Next.js 시작하기', 'https://www.inflearn.com/course/next-js-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0', '동영상', '인프런', 'HOUR_10', '하', 'BETWEEN_50K_100K', 22),
    (172, 'NextJS 시작하기', 'https://nomadcoders.co/nextjs-for-beginners', '동영상', '노마드코더', 'HOUR_5', '하', 'FREE', 22),
    (173, 'Next.js 완벽 마스터 (v15): Notion 기반 개발자 블로그 만들기 (with Cursor AI)', 'https://www.inflearn.com/course/next-%EC%99%84%EB%B2%BD%EB%A7%88%EC%8A%A4%ED%84%B0-notion-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%B8%94%EB%A1%9C%EA%B7%B8-cursorai', '동영상', '인프런', 'OVER_10', '상', 'BETWEEN_100K_200K', 22),
    (174, 'Next.js 13', 'https://opentutorials.org/course/5098', '동영상', '생활코딩', 'HOUR_5', '하', 'FREE', 22),
    (175, 'Next.js로 웹서비스 만들기', 'https://codingapple.com/course/next-js/', '동영상', '코딩애플', 'HOUR_10', '중', 'BETWEEN_100K_200K', 22),
    (176, 'Next.js로 웹사이트 최적화하기', 'https://www.codeit.kr/paths/nextjs-web-development', '동영상', '코드잇', 'HOUR_10', '중', 'FREE', 22),
    (177, 'Introduction to Next.js', 'https://www.coursera.org/learn/introduction-to-next-js', '동영상', 'Coursera', 'HOUR_3', '하', 'FREE', 22),
    (178, 'Next.js 15 & React - The Complete Guide', 'https://www.udemy.com/course/nextjs-react-the-complete-guide/?couponCode=ST8MT220425G1', '동영상', '유데미', 'OVER_10', '중', 'BETWEEN_100K_200K', 22),
    (179, '쉽게 시작하는 Next.js', 'https://ebook-product.kyobobook.co.kr/dig/epd/ebook/E000010731194', '책', '교보문고', 'OVER_10', '하', 'UNDER_50K', 22),
    (180, '실전에서 바로 쓰는 Next.js', 'https://ebook-product.kyobobook.co.kr/dig/epd/ebook/E000005120537', '책', '교보문고', 'OVER_10', '상', 'UNDER_50K', 22),
    (181, 'Next + React Query로 SNS 서비스 만들기', 'https://www.inflearn.com/course/next-react-query-sns%EC%84%9C%EB%B9%84%EC%8A%A4', '동영상', '인프런', 'OVER_10', '상', 'BETWEEN_50K_100K', 22),
    (182, '한 입 크기로 잘라먹는 Next.js(v15)', 'https://www.inflearn.com/course/%ED%95%9C%EC%9E%85-%ED%81%AC%EA%B8%B0-nextjs', '동영상', '인프런', 'OVER_10', '하', 'UNDER_50K', 22),
    (183, 'NextJS 14 : quick start', 'https://www.youtube.com/watch?v=ogV4d6q-ykQ&list=PLeMeDIV7bypu08YTMGuKyjHgLnGN8VZ28&index=3', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 22),
    (184, '리액트 리렌더링 최적화 방법 조사', 'https://blog.teamelysium.kr/react-rerendering-optimization', '블로그', '블로그', 'HOUR_3', '중', 'FREE', 23),
    (185, '부트캠프에서 알려주지 않는 것들 (리액트 렌더링 최적화 편) 2편', 'https://www.inflearn.com/course/%EB%B6%80%ED%8A%B8%EC%BA%A0%ED%94%84-%EC%95%8C%EB%A0%A4%EC%A3%BC%EC%A7%80%EC%95%8A%EB%8A%94%EA%B2%83%EB%93%A4-%EB%A6%AC%EC%95%A1%ED%8A%B8-%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%B5%9C%EC%A0%81%ED%99%94', '동영상', '인프런', 'HOUR_3', '상', 'UNDER_50K', 23),
    (186, '모던 리액트 Deep Dive', 'https://product.kyobobook.co.kr/detail/S000210725203', '책', '교보문고', 'OVER_10', '상', 'UNDER_50K', 23),
    (187, 'Learn useCallback in 8minutes', 'https://www.youtube.com/watch?v=_AyFP5s69N4&ab_channel=WebDevSimplified', '동영상', '유튜브', 'HOUR_1', '중', 'FREE', 23),
    (188, 'React.memo로 컴포넌트 최적화하기 (ft. useMemo, useCallback)', 'https://www.youtube.com/watch?v=oqUgcxwrnSY&ab_channel=별코딩', '동영상', '유튜브', 'HOUR_1', '중', 'FREE', 23),
    (189, 'React Advanced Concepts: Re-Rendering, Performance & More', 'https://www.udemy.com/course/react-advanced', '동영상', '유데미', 'HOUR_10', '중', 'BETWEEN_50K_100K', 23),
    (190, 'React Render Tutorial', 'https://www.youtube.com/playlist?list=PLC3y8-rFHvwg7czgqpQIBEAHn8D6l530t', '동영상', '유튜브', 'HOUR_3', '하', 'FREE', 23),
    (191, '8 React Js performance optimization techniques YOU HAVE TO KNOW!', 'https://www.youtube.com/watch?v=CaShN6mCJB0 ', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 23),
    (192, 'Learn React Query In 50 Minutes', 'https://www.youtube.com/watch?v=r8Dg0KVnfMA', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 24),
    (193, 'React Query Tutorial for Beginners', 'https://www.youtube.com/playlist?list=PLC3y8-rFHvwjTELCrPrcZlo6blLBUspd2', '동영상', '유튜브', 'HOUR_3', '하', 'FREE', 24),
    (194, 'React Query', 'https://www.codeit.kr/topics/react-query', '동영상', '코드잇', 'OVER_10', '상', 'FREE', 24),
    (195, 'React Query |TanStack Query:Server State Management in React', 'https://www.udemy.com/course/react-query-tanstack-query-server-state-management-in-react/?couponCode=ST8MT220425G1', '동영상', '유데미', 'HOUR_5', '하', 'UNDER_50K', 24),
    (196, '리액트 쿼리', 'https://ebook-product.kyobobook.co.kr/dig/epd/ebook/E000006500261', '책', '교보문고', 'OVER_10', '중', 'UNDER_50K', 24),
    (197, 'React Query / TanStack Query: React Server State Management', 'https://www.udemy.com/course/learn-react-query/?couponCode=ST8MT220425G1', '동영상', '유데미', 'HOUR_10', '중', 'BETWEEN_50K_100K', 24),
    (198, 'State Management with React Query', 'https://product.kyobobook.co.kr/detail/S000202678072', '책', '교보문고', 'OVER_10', '상', 'UNDER_50K', 24),
    (199, 'React Query : quick start', 'https://www.youtube.com/watch?v=rQwJMmgx_bg', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 24),
    (200, 'Learn React Query In 50 Minutes', 'https://www.youtube.com/watch?v=r8Dg0KVnfMA', '동영상', '유튜브', 'HOUR_1', '중', 'FREE', 24),
    (201, 'React Query Tutorial', 'https://www.youtube.com/playlist?list=PLzYM-WGWIJDTMei3yRgQtiDGlUdP1ydw3', '동영상', '유튜브', 'HOUR_3', '하', 'FREE', 24),
    (202, 'Vue Test Utils', 'https://joshua1988.github.io/vue-camp/testing/vue-test-util.html#%E1%84%8E%E1%85%AC%E1%84%89%E1%85%B5%E1%86%AB-vue-cli-3-x-%E1%84%87%E1%85%A5%E1%84%8C%E1%85%A5%E1%86%AB-%E1%84%8B%E1%85%B5%E1%84%89%E1%85%A1%E1%86%BC-%E1%84%8B%E1%85%A6%E1%84%89%E1%85%A5-%E1%84%89%E1%85%A5%E1%86%AF%E1%84%8E%E1%85%B5-%E1%84%87%E1%85%A1%E1%86%BC%E1%84%87%E1%85%A5%E1%86%B8', '블로그', 'GitHub', 'HOUR_1', '하', 'FREE', 25),
    (203, 'Vue Unit Testing', 'https://www.youtube.com/playlist?list=PLXDouhCU5r6oai6AB-WpDNPxEAqhvDfFt', '동영상', '유튜브', 'HOUR_3', '하', 'FREE', 25),
    (204, 'Testing Vue 3 apps with Vue Test Utils', 'https://www.youtube.com/playlist?list=PLC2LZCNWKL9ahK1IoODqYxKu5aA9T5IOA', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 25),
    (205, 'Vue Testing with Vue Test Utils', 'https://www.youtube.com/watch?v=QIDhzBg5eWY', '동영상', '유튜브', 'HOUR_3', '하', 'FREE', 25),
    (206, '[최신] Vue 강의 끝판왕 : Nuxt 3 완벽 마스터', 'https://www.inflearn.com/course/vue-%EB%81%9D%ED%8C%90%EC%99%95-nuxt3-%EC%99%84%EB%B2%BD%EB%A7%88%EC%8A%A4%ED%84%B0', '동영상', '인프런', 'OVER_10', '상', 'BETWEEN_100K_200K', 26),
    (207, 'Nuxt.js 시작하기', 'https://www.inflearn.com/course/%EB%84%89%EC%8A%A4%ED%8A%B8-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0', '동영상', '인프런', 'HOUR_10', '상', 'BETWEEN_50K_100K', 26),
    (208, 'Nuxt 3 기반으로 AI Flatform 만들기', 'https://www.youtube.com/playlist?list=PLIZTLPwzS_qXH5YR-3ZxN5W5gqgDlxwQ1', '동영상', '유튜브', 'HOUR_3', '중', 'FREE', 26),
    (209, 'Nuxt.js 강좌', 'https://www.youtube.com/playlist?list=PLDE8MlAqcTnA9bJPt_aA-9A0YehTJ3FrC', '동영상', '유튜브', 'HOUR_3', '중', 'FREE', 26),
    (210, 'Nuxt3 Pinia Full Course (feat. News API)', 'https://www.youtube.com/watch?v=5eA0V540hZs', '동영상', '유튜브', 'HOUR_3', '상', 'FREE', 26),
    (211, 'Nuxt 3 Tutorial', 'https://www.youtube.com/playlist?list=PL4cUxeGkcC9haQlqdCQyYmL_27TesCGPC', '동영상', '유튜브', 'HOUR_3', '하', 'FREE', 26),
    (212, 'Master Nuxt.js - A Vuejs framework by building projects', 'https://www.udemy.com/course/master-nuxtjs-a-vuejs-framework-by-building-projects-and-deploy/', '동영상', '유데미', 'HOUR_3', '중', 'UNDER_50K', 26),
    (213, 'Angular SSR In Depth (formerly Angular Universal)', 'https://www.udemy.com/course/angular-universal-course/?srsltid=AfmBOootMXpadDq_XUYQfVcQceOcvF08PJy6eLnaJ4_ofUw5TBfB8MAG', '동영상', '유데미', 'HOUR_5', '중', 'BETWEEN_50K_100K', 27),
    (214, 'Angular 16 Server Side Rendering and Client Side Rendering - Angular Universal', 'https://www.youtube.com/watch?v=lZoRAcoEFOw', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 27),
    (215, 'Angular SSR Deep Dive (With Client HYDRATION)', 'https://www.youtube.com/watch?v=U1MP4uCuUVI', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 27),
    (216, 'https://angular.io/guide/universal', 'https://v17.angular.io/guide/ssr', '책', '공식문서', 'OVER_10', '중', 'FREE', 27),
    (217, 'Angular 19 SSR Guide', 'https://www.youtube.com/playlist?list=PL_euSNU_eLbc91j2QvA_URGFwbHZsjS95', '동영상', '유튜브', 'HOUR_3', '하', 'FREE', 27),
    (218, '[Vanilla Javascript] Jasmine을 이용해 테스트 코드 작성해보기', 'https://datobi.tistory.com/55', '블로그', '블로그', 'HOUR_1', '중', 'FREE', 28),
    (219, 'Jasmine JavaScript Testing Second Edition', 'https://product.kyobobook.co.kr/detail/S000035154674', '책', '교보문고', 'OVER_10', '중', 'BETWEEN_50K_100K', 28),
    (220, '[10분 테코톡] 자스민, 병민의 웹팩 최적화 Part1', 'https://www.youtube.com/watch?v=QXYWlqK2eHI', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 28),
    (221, 'Jasmine Testing Framework Course', 'https://www.youtube.com/playlist?list=PL_euSNU_eLbcpJdoM-WWzUlNNVM4TwtMl', '동영상', '유튜브', 'HOUR_10', '상', 'FREE', 28),
    (222, 'Jasmine JS: Start Testing From-Scratch', 'https://www.testim.io/blog/jasmine-js-a-from-scratch-tutorial-to-start-testing/', '블로그', '블로그', 'HOUR_3', '중', 'FREE', 28),
    (223, 'JavaScript Testing with Jasmine', 'https://product.kyobobook.co.kr/detail/S000028165901', '책', '교보문고', 'OVER_10', '상', 'UNDER_50K', 28),
    (224, 'Jasmine Testing Framework: A Complete Guide', 'https://www.lambdatest.com/learning-hub/jasmine-unit-testing', '블로그', '블로그', 'HOUR_3', '중', 'FREE', 28),
    (225, 'Webpack 5: Optimizing For Production', 'https://www.udemy.com/course/webpack-optimizing-for-production/?couponCode=ST8MT220425G1', '동영상', '유데미', 'HOUR_10', '중', 'BETWEEN_50K_100K', 29),
    (226, 'Webpack', 'https://www.youtube.com/playlist?list=PLuHgQVnccGMChcT9IKopFDoAIoTA-03DA', '동영상', '유튜브', 'HOUR_3', '하', 'FREE', 29),
    (227, 'webpack', 'https://github.com/webpack/webpack', '책', 'GitHub', 'HOUR_1', '하', 'FREE', 29),
    (228, 'webpack DOCS', 'https://webpack.kr/concepts/', '책', '공식문서', 'OVER_10', '하', 'FREE', 29),
    (229, 'Webpack 5 Fundamentals', 'https://www.youtube.com/playlist?list=PLB67cosR0_lPUXIK35J8M7EQUbUJQMA0Q', '동영상', '유튜브', 'HOUR_3', '하', 'FREE', 29),
    (230, '프론트엔드 개발자를 위한 웹팩', 'https://www.inflearn.com/course/%ED%94%84%EB%9F%B0%ED%8A%B8%EC%97%94%EB%93%9C-%EC%9B%B9%ED%8C%A9#curriculum', '동영상', '인프런', 'HOUR_5', '하', 'UNDER_50K', 29),
    (231, '프론트엔드 개발환경의 이해와 실습 (webpack, babel, eslint..)', 'https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD', '동영상', '인프런', 'HOUR_10', '상', 'BETWEEN_50K_100K', 29),
    (232, 'Webpack 5 Up and Running', 'https://product.kyobobook.co.kr/detail/S000003531061', '책', '교보문고', 'OVER_10', '상', 'UNDER_50K', 29),
    (233, 'Webpack 5: The Complete Guide For Beginners', 'https://www.udemy.com/course/webpack-from-beginner-to-advanced', '동영상', '유데미', 'HOUR_5', '하', 'BETWEEN_50K_100K', 29),
    (234, '웹팩 핸드북', 'https://joshua1988.github.io/webpack-guide/guide.html', '책', 'GitHub', 'HOUR_1', '하', 'FREE', 29),
    (235, 'Webpack 5 and Vite: A New Way to Learn - Active Thinking', 'https://www.udemy.com/course/webpack-5-vite/', '동영상', '유데미', 'HOUR_5', '중', 'UNDER_50K', 29),
    (236, 'Webpack 5 Ninja - Build Micro frontend and web apps', 'https://www.udemy.com/course/webpack-5-ninja-build-micro-frontend-and-web-apps', '동영상', '유데미', 'HOUR_10', '중', 'BETWEEN_50K_100K', 29),
    (237, 'Learn React Micro Frontend From Scratch Using Webpack', 'https://www.udemy.com/course/learn-react-micro-frontends-from-scratch-using-webpack', '동영상', '유데미', 'HOUR_5', '상', 'BETWEEN_50K_100K', 29),
    (238, 'Webpack for React Applications', 'https://www.udemy.com/course/webpack-for-react-applications', '동영상', '유데미', 'HOUR_5', '중', 'UNDER_50K', 29),
    (239, 'webpack', 'https://www.youtube.com/playlist?list=PL-qMANrofLysX7hRV9BQymJFLD7Fasiv6', '동영상', '유튜브', 'HOUR_3', '하', 'FREE', 29),
    (240, 'CloudFront 총 정리', 'https://www.youtube.com/watch?v=-r_S_kweXlk&list=PLfth0bK2MgIazkNsXM59WNVCY_6kwSnxU', '동영상', '유튜브', 'HOUR_3', '하', 'FREE', 30),
    (241, 'CI/CD 5분 개념 정리 (현업에서 쓰는 개발 프로세스)', 'https://youtu.be/0Emq5FypiMM?si=xU4tZLVc5gsifqoI', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 30),
    (242, 'Amazon S3 및 CloudFront에 React 기반 단일 페이지 애플리케이션 배포', 'https://docs.aws.amazon.com/ko_kr/prescriptive-guidance/latest/patterns/deploy-a-react-based-single-page-application-to-amazon-s3-and-cloudfront.html', '블로그', '공식문서', 'HOUR_1', '하', 'FREE', 30),
    (243, '제발 깃허브 액션🔥 모르는 개발자 없게해 주세요 🙏', 'https://youtu.be/iLqGzEkusIw?si=Nqg-hETnetlMqUTF', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 30),
    (244, '실무에 바로 적용하는 AWS 배포', 'https://www.inflearn.com/course/%EC%8B%A4%EB%AC%B4-%EB%B0%94%EB%A1%9C-%EC%A0%81%EC%9A%A9%ED%95%98%EB%8A%94-aws-%EB%B0%B0%ED%8F%AC', '동영상', '인프런', 'HOUR_5', '중', 'UNDER_50K', 30),
    (245, 'S3와 CloudFront를 이용하여 에러없이 SPA 배포하기', 'https://bigboss.dev/2022/11/cloudfront-functions-for-spa/', '블로그', '블로그', 'HOUR_1', '하', 'FREE', 30),
    (246, '도대체 프론트엔드 빌드는 왜 하는거에요?', 'https://youtu.be/D-fqNyTV3b8?si=VC0kKgLUKmw-ddpF', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 30),
    (247, 'The cloud architects guide to CloudFront', 'https://www.udemy.com/course/the-cloud-architects-guide-to-cloudfront/?utm_source=adwords&utm_medium=udemyads&utm_campaign=Search_DSA_Beta_Prof_la.EN_cc.ROW-English&campaigntype=Search&portfolio=ROW-English&language=EN&product=Course&test=&audience=DSA&topic=&priority=Beta&utm_content=deal4584&utm_term=_._ag_162511579404_._ad_696197165421_._kw__._de_c_._dm__._pl__._ti_dsa-1677053911088_._li_9196622_._pd__._&matchtype=&gad_source=1&gbraid=0AAAAADROdO1LjJ0fto2rbz32I6LKCIy2j&gclid=CjwKCAjwn6LABhBSEiwAsNJrjujizbVpi1kgEdDANfpV0dR_vBKndtzVFeOVrHcYXsrn7BcdADmGyRoC9ncQAvD_BwE&couponCode=ST8MT220425G1', '동영상', '유데미', 'HOUR_3', '중', 'UNDER_50K', 30),
    (248, '[Front-End] CI/CD에 대해서 알아보고 배포 준비하기', 'https://velog.io/@hayoung474/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-Github-Action%EB%A5%BC-%ED%86%B5%ED%95%9C-%EB%B9%8C%EB%93%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%9E%90%EB%8F%99%ED%99%94', '블로그', '블로그', 'HOUR_3', '하', 'FREE', 30),
    (249, '프로트엔드 배포 일지', 'https://babble-dev.tistory.com/32', '블로그', '블로그', 'HOUR_3', '하', 'FREE', 30),
    (250, 'AWS 배포 완벽가이드 (feat. Lightsail, Docker, ECS)', 'https://www.inflearn.com/course/aws-배포-완벽가이드', '동영상', '인프런', 'OVER_10', '중', 'BETWEEN_50K_100K', 30),
    (251, '비전공자도 이해할 수 있는 Docker 입문/실전', 'https://www.inflearn.com/course/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90-docker-%EC%9E%85%EB%AC%B8-%EC%8B%A4%EC%A0%84?srsltid=AfmBOoodrUu-ydxnuDiryh1SVY89-Pvz4y9YWzfdDsVKnhP5qaMmoeVP', '동영상', '인프런', 'HOUR_10', '중', 'BETWEEN_50K_100K', 30),
    (252, '【한글자막】 DevOps 학습: 파이프라인 및 Docker를 이용한 Jenkins 와의 CI/CD', 'https://www.udemy.com/course/best-devops-docker-jenkins-cicd/', '동영상', '유데미', 'HOUR_5', '중', 'BETWEEN_50K_100K', 30),
    (253, '【한글자막】 Docker & Kubernetes : 실전 가이드', 'https://www.udemy.com/course/docker-kubernetes-2022', '동영상', '유데미', 'OVER_10', '상', 'BETWEEN_100K_200K', 30),
    (254, '배포자동화(CI/CD) - Github Actions/Nuxtjs/Docker/EC2', 'https://www.youtube.com/watch?v=E3i9qt0SS-I', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 30),
    (255, '프론트엔드 개발자를 위한 Docker로 React 개발 및 배포하기', 'https://velog.io/@oneook/Docker%EB%A1%9C-React-%EA%B0%9C%EB%B0%9C-%EB%B0%8F-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0', '블로그', '블로그', 'HOUR_1', '중', 'FREE', 30),
    (256, '개발자를 위한 쉬운 도커', 'https://www.inflearn.com/course/개발자를-위한-쉬운-도커', '동영상', '인프런', 'HOUR_10', '하', 'BETWEEN_50K_100K', 30),
    (257, 'Frontend 효율적으로 배포하기 (React + Nginx + Docker)', 'https://ye0nn.tistory.com/67', '블로그', '블로그', 'HOUR_1', '하', 'FREE', 30),
    (258, '[Docker] 프론트에서 도커로 배포 자동화하기', 'https://velog.io/@navyjeongs/Docker-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%90%EC%84%9C-%EB%8F%84%EC%BB%A4%EB%A1%9C-%EB%B0%B0%ED%8F%AC-%EC%9E%90%EB%8F%99%ED%99%94%ED%95%98%EA%B8%B0', '블로그', '블로그', 'HOUR_1', '하', 'FREE', 30),
    (259, '프론트엔드 배포 자동화(feat. Netlify, Github Actions)', 'https://velog.io/@j7papa/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EB%B0%B0%ED%8F%AC-%EC%9E%90%EB%8F%99%ED%99%94feat.-Netlify-Github-Actions', '블로그', '블로그', 'HOUR_3', '하', 'FREE', 30),
    (260, '[실습] Docker 전체 흐름 느껴보기', 'https://www.youtube.com/watch?v=Rw1gRR7lZwQ', '동영상', '유튜브', 'HOUR_3', '하', 'FREE', 30),
    (261, 'Dockerize your React app and serve your build artifacts through Nginx', 'https://www.youtube.com/watch?v=gM2cWo1DWIk', '동영상', '유튜브', 'HOUR_1', '중', 'FREE', 30),
    (262, '실무에 바로 적용하는 프런트엔드 테스트 - 1부. 테스트 기초: 단위・통합 테스트', 'https://www.inflearn.com/course/%EC%8B%A4%EB%AC%B4%EC%A0%81%EC%9A%A9-%ED%94%84%EB%9F%B0%ED%8A%B8%EC%97%94%EB%93%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-1%EB%B6%80', '동영상', '인프런', 'HOUR_5', '중', 'BETWEEN_50K_100K', 33),
    (263, '근본있는 프론트엔드 유닛테스트', 'https://www.inflearn.com/course/%EA%B7%BC%EB%B3%B8%EC%9E%88%EB%8A%94-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EC%9C%A0%EB%8B%9B%ED%85%8C%EC%8A%A4%ED%8A%B8', '동영상', '인프런', 'HOUR_5', '하', 'UNDER_50K', 33),
    (264, 'React - 컴포넌트 테스팅 (React Testing Library)', 'https://velog.io/@goodjam92/React-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%ED%85%8C%EC%8A%A4%ED%8C%85-React-Testing-Library', '블로그', '블로그', 'HOUR_1', '하', 'FREE', 33),
    (265, 'Snapshot Testing', 'https://jestjs.io/docs/snapshot-testing', '블로그', '블로그', 'HOUR_3', '하', 'FREE', 33),
    (266, 'react testing library와 jest로 React 유닛 테스트 구현하기', 'https://blog.pumpkin-raccoon.com/81', '블로그', '블로그', 'HOUR_1', '하', 'FREE', 33),
    (267, 'React Testing Library and Jest: The Complete Guide', 'https://www.udemy.com/course/react-testing-library-and-jest/?couponCode=ST7MT290425G1', '동영상', '유데미', 'HOUR_10', '상', 'BETWEEN_50K_100K', 33),
    (268, '실무에 바로 적용하는 프런트엔드 테스트 - 2부. 테스트 심화: 시각적 회귀・E2E 테스트', 'https://www.inflearn.com/course/%EC%8B%A4%EB%AC%B4%EC%A0%81%EC%9A%A9-%ED%94%84%EB%9F%B0%ED%8A%B8%EC%97%94%EB%93%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-2%EB%B6%80', '동영상', '인프런', 'HOUR_5', '중', 'BETWEEN_50K_100K', 34),
    (269, '따라하며 배우는 리액트 테스트 [2023.11 업데이트]', 'https://www.inflearn.com/course/%EB%94%B0%EB%9D%BC%ED%95%98%EB%8A%94-%EB%A6%AC%EC%95%A1%ED%8A%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8#curriculum', '동영상', '인프런', 'HOUR_10', '하', 'UNDER_50K', 34),
    (270, '프런트엔드 개발을 위한 테스트 입문', 'https://ebook-product.kyobobook.co.kr/dig/epd/ebook/E000008900593', '책', '교보문고', 'OVER_10', '중', 'UNDER_50K', 34),
    (271, '실용적인 프론트엔드 테스트 전략 (2)', 'https://ui.toast.com/weekly-pick/ko_20190116#%EC%B6%94%EA%B0%80-%EC%8B%9C%EA%B0%81%EC%A0%81-%ED%9A%8C%EA%B7%80-%ED%85%8C%EC%8A%A4%ED%8A%B8', '블로그', '블로그', 'OVER_10', '하', 'FREE', 34),
    (272, '1시간에 끝내는 Linux 기본 명령어', 'https://www.youtube.com/watch?v=ymwMfvzAOPg&list=PL8oUjFBfGVJxH_oJkYfRwSqM9Q5Fy5C1X', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 35),
    (273, '가장 쉬운 리눅스 강좌', 'https://www.youtube.com/watch?v=tPWBF13JIVk', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 35),
    (274, '[우분투 리눅스 기초 강의] 이것이 우분투 리눅스다(3판)', 'https://www.youtube.com/watch?v=wDGzJFmSwN8&list=PLVsNizTWUw7HAcyW6bma7trGJfiTSDA44', '동영상', '유튜브', 'OVER_10', '중', 'FREE', 35),
    (275, '리눅스 입문 - 개념으로 탄탄히!!', 'https://www.inflearn.com/course/%EB%A6%AC%EB%88%85%EC%8A%A4-%EC%9E%85%EB%AC%B8', '동영상', '인프런', 'OVER_10', '하', 'BETWEEN_50K_100K', 35),
    (276, '리눅스 커맨드라인 툴 (Full ver.)', 'https://www.inflearn.com/course/%EB%A6%AC%EB%88%85%EC%8A%A4-%EC%BB%A4%EB%A7%A8%EB%93%9C%EB%9D%BC%EC%9D%B8-%ED%88%B4', '동영상', '인프런', 'OVER_10', '하', 'BETWEEN_50K_100K', 35),
    (277, '시스템엔지니어가 알려주는 리눅스 실전편 Bash Shell Script', 'https://www.inflearn.com/course/%EB%A6%AC%EB%88%85%EC%8A%A4-bash-%EC%8B%A4%EC%A0%84%ED%8E%B8', '동영상', '인프런', 'HOUR_10', '상', 'BETWEEN_50K_100K', 35),
    (278, 'Complete Linux Training Course to Get Your Dream IT Job 2025', 'https://www.udemy.com/course/complete-linux-training-course-to-get-your-dream-it-job/?couponCode=ST8MT220425G1', '동영상', '유데미', 'OVER_10', '하', 'BETWEEN_100K_200K', 35),
    (279, 'Mastering Linux: The Comprehensive Guide', 'https://www.udemy.com/course/mastering-linux/?couponCode=ST8MT220425G1', '동영상', '유데미', 'OVER_10', '하', 'UNDER_50K', 35),
    (280, 'Linux 초보자를 위한 기초 명령어와 텍스트 편집기 사용법', 'https://codingon.co.kr/lessonDetail', '동영상', '코딩온', 'HOUR_10', '하', 'UNDER_50K', 35),
    (281, 'Linux 명령 및 셸 스크립팅 실습 소개', 'https://www.coursera.org/learn/hands-on-introduction-to-linux-commands-and-shell-scripting', '동영상', 'Coursera', 'OVER_10', '하', 'FREE', 35),
    (282, 'Advanced Embedded Linux Development 특화 과정', 'https://www.coursera.org/specializations/advanced-embedded-linux-development', '동영상', 'Coursera', 'OVER_10', '중', 'FREE', 35),
    (283, '실용적 유닉스 커맨드', 'https://www.codeit.kr/topics/practical-unix-commands', '동영상', '코드잇', 'HOUR_5', '하', 'FREE', 35),
    (284, '생활코딩 - 리눅스(Linux)', 'https://edu.goorm.io/lecture/12984/%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9-%EB%A6%AC%EB%88%85%EC%8A%A4-linux', '동영상', 'goormedu', 'OVER_10', '중', 'FREE', 35),
    (285, '쉽게 배우는 리눅스: 우분투 실습을 통한 Linux 기초 다지기', 'https://ebook-product.kyobobook.co.kr/dig/epd/ebook/E000010611227', '책', '교보문고', 'OVER_10', '하', 'UNDER_50K', 35),
    (286, '시스템 관리자와 일반 사용자를 위한 Unix & Linux 입문', 'https://ebook-product.kyobobook.co.kr/dig/epd/ebook/E000005522281', '책', '교보문고', 'OVER_10', '하', 'UNDER_50K', 35),
    (287, 'Mastering Linux Device Driver Development', 'https://ebook-product.kyobobook.co.kr/dig/epd/ebook/E000003560522', '책', '교보문고', 'OVER_10', '상', 'UNDER_50K', 35),
    (288, '실무 초밀착 리눅스:클라우드 환경 운영부터 성능분석까지', 'https://fastcampus.co.kr/dev_online_linuxcloud', '동영상', 'FASTCAMPUS', 'OVER_10', '상', 'UNKNOWN', 35),
    (289, '혼자 공부하는 네트워크', 'https://www.youtube.com/playlist?list=PLVsNizTWUw7HfOCgvlfHIDPPo3TE-2iQM', '동영상', '유튜브', 'OVER_10', '하', 'FREE', 36),
    (290, '새내기 개발자들을 위한 필수 가이드', 'https://www.youtube.com/watch?app=desktop&v=dsoAkoxZ13o', '동영상', '유튜브', 'HOUR_5', '하', 'FREE', 36),
    (291, '모두의 네트워크', 'https://m.yes24.com/Goods/Detail/61794014', '책', 'Yes24', 'OVER_10', '하', 'UNDER_50K', 36),
    (292, '컴퓨터 네트워킹(하향식 접근)', 'https://product.kyobobook.co.kr/detail/S000061694627', '책', '교보문고', 'OVER_10', '중', 'UNDER_50K', 36),
    (293, 'HTTP 완벽 가이드', 'https://www.yes24.com/product/goods/15381085', '책', 'Yes24', 'OVER_10', '상', 'UNDER_50K', 36),
    (294, '[네트워크]네트워크 기초 지식 정리', 'https://noahlogs.tistory.com/47', '블로그', '블로그', 'HOUR_1', '하', 'FREE', 36),
    (295, '왕초보를 위한 네트워크 기초', 'https://www.inflearn.com/course/%EC%99%95%EC%B4%88%EB%B3%B4-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EA%B8%B0%EC%B4%88', '동영상', '인프런', 'HOUR_10', '하', 'BETWEEN_50K_100K', 36),
    (296, '네트워크,그림으로 이해하자', 'https://www.inflearn.com/course/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EA%B7%B8%EB%A6%BC-%EC%9D%B4%ED%95%B4', '동영상', '인프런', 'HOUR_3', '하', 'BETWEEN_50K_100K', 36),
    (297, '개발자를 위한 컴퓨터공학 2: 혼자 공부하는 네트워크', 'https://www.inflearn.com/course/%EA%B0%9C%EB%B0%9C%EC%9E%90-%EC%BB%B4%ED%93%A8%ED%84%B0%EA%B3%B5%ED%95%99-%ED%98%BC%EC%9E%90%EA%B3%B5%EB%B6%80%ED%95%98%EB%8A%94-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC', '동영상', '인프런', 'OVER_10', '하', 'FREE', 36),
    (298, '외워서 끝내느 네트워크 핵심이론 - 응용', 'https://www.inflearn.com/course/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%ED%95%B5%EC%8B%AC%EC%9D%B4%EB%A1%A0-%EC%9D%91%EC%9A%A9', '동영상', '인프런', 'HOUR_5', '중', 'UNDER_50K', 36),
    (299, '생활코딩 - 네트워크 개념 잡기(도메인, 네임서버, HTTPS)', 'https://edu.goorm.io/lecture/12973/%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EA%B0%9C%EB%85%90-%EC%9E%A1%EA%B8%B0-%EB%8F%84%EB%A9%94%EC%9D%B8-%EB%84%A4%EC%9E%84%EC%84%9C%EB%B2%84-https', '동영상', 'goormedu', 'HOUR_3', '하', 'FREE', 36),
    (300, '비전공자의 전공자 따라잡기 - 네트워크, HTTP', 'https://www.inflearn.com/course/%EC%A0%84%EA%B3%B5%EC%9E%90-%EB%94%B0%EB%9D%BC%EC%9E%A1%EA%B8%B0-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-http', '동영상', '인프런', 'HOUR_10', '하', 'UNDER_50K', 36),
    (301, '자바 무료 강의 2시간 완성 (1분 자바)', 'https://www.youtube.com/watch?v=DNCBaeCoMug', '동영상', '유튜브', 'HOUR_3', '하', 'FREE', 39),
    (302, 'Do it! 점프 투 자바', 'https://product.kyobobook.co.kr/detail/S000203246484', '책', '교보문고', 'OVER_10', '하', 'UNDER_50K', 39),
    (303, '김영한의 자바 입문 - 코드로 시작하는 자바 첫걸음', 'https://www.inflearn.com/course/%EA%B9%80%EC%98%81%ED%95%9C%EC%9D%98-%EC%9E%90%EB%B0%94-%EC%9E%85%EB%AC%B8', '동영상', '인프런', 'OVER_10', '하', 'FREE', 39),
    (304, '김영한의 실전 자바 - 기본편', 'https://www.inflearn.com/course/%EA%B9%80%EC%98%81%ED%95%9C%EC%9D%98-%EC%8B%A4%EC%A0%84-%EC%9E%90%EB%B0%94-%EA%B8%B0%EB%B3%B8%ED%8E%B8', '동영상', '인프런', 'OVER_10', '하', 'UNDER_50K', 39),
    (305, '김영한의 실전 자바 - 중급 1편+김영한의 실전 자바 - 중급 2편', 'https://www.inflearn.com/course/%EA%B9%80%EC%98%81%ED%95%9C%EC%9D%98-%EC%8B%A4%EC%A0%84-%EC%9E%90%EB%B0%94-%EC%A4%91%EA%B8%89-1', '동영상', '인프런', 'OVER_10', '중', 'BETWEEN_100K_200K', 39),
    (306, '김영한의 실전 자바 - 고급 1편, 멀티스레드와 동시성+김영한의 실전 자바 - 고급 2편, I/O, 네트워크, 리플렉션+김영한의 실전 자바 - 고급 3편, 람다, 스트림, 함수형 프로그래밍', 'https://www.inflearn.com/course/%EA%B9%80%EC%98%81%ED%95%9C%EC%9D%98-%EC%8B%A4%EC%A0%84-%EC%9E%90%EB%B0%94-%EA%B3%A0%EA%B8%89-1', '동영상', '인프런', 'OVER_10', '상', 'UNKNOWN', 39),
    (307, 'Java의 정석', 'https://www.youtube.com/playlist?list=PLW2UjW795-f6xWA2_MUhEVgPauhGl3xIp', '동영상', '유튜브', 'OVER_10', '상', 'FREE', 39),
    (308, 'java 소개', 'https://www.coursera.org/learn/java-introduction', '동영상', 'Coursera', 'OVER_10', '하', 'FREE', 39),
    (309, '핵심 Java 특화 과정', 'https://www.coursera.org/specializations/core-java', '동영상', 'Coursera', 'OVER_10', '중', 'FREE', 39),
    (310, '최신 파이썬 코딩 무료 강의 | 2024 점프 투 파이썬 통합본', 'https://www.youtube.com/watch?v=ftQZo7XaTOA', '동영상', '유튜브', 'HOUR_10', '하', 'FREE', 40),
    (311, '프로그래밍 시작하기 : 파이썬 입문 (Inflearn Original)+프로그래밍 시작하기 : 도전! 45가지 파이썬 기초 문법 실습 (Inflearn Original)', 'https://www.inflearn.com/course/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%9E%85%EB%AC%B8-%EC%9D%B8%ED%94%84%EB%9F%B0-%EC%98%A4%EB%A6%AC%EC%A7%80%EB%84%90?attributionToken=hwHwhgoMCJPhocAGEK79otcCEAEaJDY4MWIxNTdmLTAwMDAtMmY5NC1iNDJhLTg4M2QyNGY3Y2M3NCoHMTAzNjgyNzIso4CXIsXL8xfUsp0VwvCeFba3jC2o5aotmNa3LZruxjCQ97Iw9-jDMJvWty06DmRlZmF1bHRfc2VhcmNoSAFYAWgBegJzaQ', '동영상', '인프런', 'OVER_10', '하', 'BETWEEN_50K_100K', 40),
    (312, '우리를 위한 프로그래밍 : 파이썬 중급 (Inflearn Original)', 'https://www.inflearn.com/course/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%A4%91%EA%B8%89-%EC%9D%B8%ED%94%84%EB%9F%B0-%EC%98%A4%EB%A6%AC%EC%A7%80%EB%84%90', '동영상', '인프런', 'OVER_10', '중', 'BETWEEN_50K_100K', 40),
    (313, '모두를 위한 파이썬 : 필수 문법 배우기 Feat. 오픈소스 패키지 배포 (Inflearn Original)+고수가 되는 파이썬 : 동시성과 병렬성 문법 배우기 Feat. 멀티스레딩 vs 멀티프로세싱 (Inflearn Original)', 'https://www.inflearn.com/course/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%A4%91%EA%B3%A0%EA%B8%89', '동영상', '인프런', 'OVER_10', '상', 'BETWEEN_100K_200K', 40),
    (314, '프로그래밍의 문을 열다: Python 입문', 'https://codingon.co.kr/lessonDetail', '동영상', '코딩온', 'OVER_10', '하', 'UNDER_50K', 40),
    (315, 'Python 마스터로 가는 길: 고급 문법과 응용', 'https://codingon.co.kr/lessonDetail', '동영상', '코딩온', 'OVER_10', '상', 'UNDER_50K', 40),
    (316, 'Python 활용 중급 과정', 'https://www.codeit.kr/paths/practical-python', '동영상', '코드잇', 'OVER_10', '하', 'FREE', 40),
    (317, '생활코딩 - Python 입문', 'https://edu.goorm.io/lecture/28708/%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9-python-%EC%9E%85%EB%AC%B8', '동영상', 'goormedu', 'HOUR_10', '하', 'FREE', 40),
    (318, '점프 투 파이썬', 'https://wikidocs.net/book/1', '책', '위키독스', 'OVER_10', '하', 'FREE', 40),
    (319, 'Kotlin 문법 총 정리 - 1시간', 'https://www.youtube.com/watch?v=OtHkb6wAI5U', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 42),
    (320, '자바 개발자를 위한 코틀린 입문(Java to Kotlin Starter Guide)', 'https://www.inflearn.com/course/java-to-kotlin', '동영상', '인프런', 'HOUR_5', '하', 'BETWEEN_50K_100K', 42),
    (321, '코틀린 고급편', 'https://www.inflearn.com/course/%EC%BD%94%ED%8B%80%EB%A6%B0-%EA%B3%A0%EA%B8%89%ED%8E%B8', '동영상', '인프런', 'HOUR_10', '상', 'BETWEEN_50K_100K', 42),
    (322, '[중급편] 친절한 JETPACK 개론 <상> (Android Kotlin)+[중급편] 친절한 JETPACK 개론 <하> (Android Kotlin)', 'https://www.inflearn.com/course/%EC%B9%9C%EC%A0%88%ED%95%9C-jetpack-1', '동영상', '인프런', 'OVER_10', '중', 'BETWEEN_100K_200K', 42),
    (323, 'Complete Kotlin development masterclass', 'https://www.udemy.com/course/kotlinmasterclass/?couponCode=ST8MT220425G1', '동영상', '유데미', 'OVER_10', '하', 'BETWEEN_100K_200K', 42),
    (324, 'Java 개발자를 위한 Kotlin', 'https://www.coursera.org/learn/kotlin-for-java-developers', '동영상', 'Coursera', 'OVER_10', '중', 'FREE', 42),
    (325, 'Kotlin의 고급 프로그래밍', 'https://www.coursera.org/learn/advanced-programming-in-kotlin', '동영상', 'Coursera', 'OVER_10', '상', 'FREE', 42),
    (326, 'Google 공식 언어 Kotlin 프로그래밍 시작하기', 'https://edu.goorm.io/lecture/20670/google-%EA%B3%B5%EC%8B%9D-%EC%96%B8%EC%96%B4-kotlin-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0', '동영상', 'goormedu', 'OVER_10', '하', 'UNDER_50K', 42),
    (327, 'Kotlin으로 만드는 심플셀스타그램 app', 'https://edu.goorm.io/lecture/45804/kotlin%EC%9C%BC%EB%A1%9C-%EB%A7%8C%EB%93%9C%EB%8A%94-%EC%8B%AC%ED%94%8C%EC%85%80%EC%8A%A4%ED%83%80%EA%B7%B8%EB%9E%A8-app', '동영상', 'goormedu', 'HOUR_5', '하', 'BETWEEN_100K_200K', 42),
    (328, 'Do it! 깡샘의 안드로이드 앱 프로그래밍 with 코틀린 [개정 4판] : 친절한 문법 설명 + 19개 실습 예제로 배우는 모바일 앱 개발', 'https://ebook-product.kyobobook.co.kr/dig/epd/ebook/E000011035564', '책', '교보문고', 'OVER_10', '하', 'UNDER_50K', 42),
    (329, '안드로이드 with Kotlin 앱 프로그래밍 가이드', 'https://ebook-product.kyobobook.co.kr/dig/epd/ebook/E000002949014', '책', '교보문고', 'OVER_10', '하', 'UNDER_50K', 42),
    (330, '코틀린 고급편', 'https://www.inflearn.com/course/코틀린-고급편', '동영상', '인프런', 'HOUR_10', '상', 'UNDER_50K', 42),
    (331, '누구나 SQL - 기초', 'https://www.youtube.com/watch?v=60I72X_aKC4&list=PLb_vgczBBiSRwP4qEA4fvJyAqBWSSrNfq', '동영상', '유튜브', 'HOUR_10', '하', 'FREE', 43),
    (332, 'SQL 마스터클래스', 'https://nomadcoders.co/sql-masterclass', '동영상', '노마드코더', 'OVER_10', '하', 'UNDER_50K', 43),
    (333, '[SQL 기초 강의] 혼자 공부하는 SQL', 'https://www.youtube.com/watch?v=0cRhit1EJM0&list=PLVsNizTWUw7GCfy5RH27cQL5MeKYnl8Pm', '동영상', '유튜브', 'HOUR_10', '하', 'FREE', 43),
    (334, '비전공자의 전공자 따라잡기 - 데이터베이스,SQL', 'https://www.inflearn.com/course/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90-%EC%A0%84%EA%B3%B5%EC%9E%90-%EB%94%B0%EB%9D%BC%EC%9E%A1%EA%B8%B0-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-sql', '동영상', '인프런', 'HOUR_10', '하', 'UNDER_50K', 43),
    (335, '기초탄탄, SQL 톺아보기 (입문과정)', 'https://edu.goorm.io/lecture/45796/%EA%B8%B0%EC%B4%88%ED%83%84%ED%83%84-sql-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0-%EC%9E%85%EB%AC%B8%EA%B3%BC%EC%A0%95', '동영상', 'goormedu', 'HOUR_10', '하', 'BETWEEN_100K_200K', 43),
    (336, '2025 이기적 SQL 개발자 이론서+기출문제', 'https://ebook-product.kyobobook.co.kr/dig/epd/ebook/E000010603338', '책', '교보문고', 'OVER_10', '하', 'UNDER_50K', 43),
    (337, 'Do it! SQL 입문', 'https://ebook-product.kyobobook.co.kr/dig/epd/ebook/E000002945454', '책', '교보문고', 'OVER_10', '하', 'UNDER_50K', 43),
    (338, '혼자 공부하는 SQL', 'https://ebook-product.kyobobook.co.kr/dig/epd/ebook/E000002942571', '책', '교보문고', 'OVER_10', '하', 'UNDER_50K', 43),
    (339, '[백문이불여일타] 데이터 분석을 위한 고급 SQL', 'https://www.inflearn.com/course/%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B6%84%EC%84%9D-%EA%B3%A0%EA%B8%89-sql#curriculum', '동영상', '인프런', 'HOUR_5', '상', 'BETWEEN_50K_100K', 43),
    (340, 'The Ultimate MySQL Bootcamp: Go from SQL Beginner to Expert', 'https://www.udemy.com/course/the-ultimate-mysql-bootcamp-go-from-sql-beginner-to-expert/?couponCode=ST8MT220425G1', '동영상', '유데미', 'OVER_10', '하', 'BETWEEN_100K_200K', 43),
    (341, 'Udacity Nanodegree: SQL', 'https://fastcampus.co.kr/dev_online_udacitysql', '동영상', '유데미', 'OVER_10', '하', 'UNKNOWN', 43),
    (342, '[백문이불여일타] 데이터 분석을 위한 기초 SQL', 'https://www.inflearn.com/course/%EB%B0%B1%EB%AC%B8%EC%9D%B4%EB%B6%88%EC%97%AC%EC%9D%BC%ED%83%80-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B6%84%EC%84%9D-%EA%B8%B0%EC%B4%88-sql', '동영상', '인프런', 'HOUR_3', '하', 'UNDER_50K', 43),
    (343, '[백문이불여일타] 데이터 분석을 위한 중급 SQL', 'https://www.inflearn.com/course/%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B6%84%EC%84%9D-%EC%A4%91%EA%B8%89-sql', '동영상', '인프런', 'HOUR_5', '중', 'UNDER_50K', 43),
    (344, '처음 시작하는 MySQL DataBase', 'https://edu.goorm.io/lecture/13353/%EC%B2%98%EC%9D%8C-%EC%8B%9C%EC%9E%91%ED%95%98%EB%8A%94-mysql-database', '동영상', 'goormedu', 'HOUR_5', '하', 'UNDER_50K', 44),
    (345, '갖고노는 MySQL 데이터베이스 by 얄코', 'https://www.inflearn.com/course/%EC%96%84%EC%BD%94-%EB%A7%88%EC%9D%B4%EC%97%90%EC%8A%A4%ED%81%90%EC%97%98#curriculum', '동영상', '인프런', 'HOUR_5', '하', 'UNDER_50K', 44),
    (346, '[개념 콕] RDB, RDBMS, NoSQL', 'https://nbcamp.spartacodingclub.kr/blog/%EA%B0%9C%EB%85%90-%EC%BD%95-%EC%9B%B9-%EA%B0%9C%EB%B0%9C-%EC%A7%80%EC%8B%9D-spring%ED%8E%B8-rdb-rdbms-nosql-20953', '블로그', '블로그', 'HOUR_1', '하', 'FREE', 44),
    (347, 'NoSQL 설명!! RDB와는 어떤 차이가 있는지도 설명!! MongoDB, Redis 매우 간단한 예제 포함!!', 'https://www.youtube.com/watch?v=sqVByJ5tbNA&t=18s', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 44),
    (348, '처음하는 MongoDB(몽고DB) 와 NoSQL(빅데이터) 데이터베이스 부트캠프 [입문부터 활용까지]', 'https://www.inflearn.com/course/nosql-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EB%AA%BD%EA%B3%A0db-%EC%9E%94%EC%9E%AC%EB%AF%B8%EC%BD%94%EB%94%A9', '동영상', '인프런', 'HOUR_10', '하', 'UNDER_50K', 44),
    (349, 'Javascript로 배우는 NoSQL DB', 'https://www.inflearn.com/course/mongodb_grammar_basics', '동영상', '인프런', 'HOUR_5', '하', 'UNDER_50K', 44),
    (350, 'NoSQL 이해', 'https://www.fun-coding.org/post/mongodb_basic1.html#gsc.tab=0', '블로그', '블로그', 'HOUR_3', '중', 'FREE', 44),
    (351, 'MongoDB를 활용하여, 200억건 이상의 데이터 파이프라인 작성법', 'https://www.inflearn.com/course/%EC%8B%A4%EB%AC%B4%EC%9E%90%EB%8F%84-%EB%AA%A8%EB%A5%B4%EB%8A%94-mongo-%ED%99%9C%EC%9A%A9%EB%B2%95', '동영상', '인프런', 'HOUR_3', '하', 'UNDER_50K', 44),
    (352, 'Learn MongoDB in 2 hours | NoSql Database', 'https://www.udemy.com/course/getting-started-with-mongodb/?couponCode=KRLETSLEARNNOW', '동영상', '유데미', 'HOUR_3', '하', 'UNDER_50K', 44),
    (353, 'Redis : 개발자를 위한 Redis 완벽 가이드', 'https://www.udemy.com/course/redis-the-complete-developers-guide-korean/?couponCode=KRLETSLEARNNOW', '동영상', '유데미', 'OVER_10', '중', 'UNDER_50K', 44),
    (354, '한 눈에 끝내는 SQL', 'https://edu.goorm.io/lecture/15413/%ED%95%9C-%EB%88%88%EC%97%90-%EB%81%9D%EB%82%B4%EB%8A%94-sql', '동영상', 'goormedu', 'OVER_10', '중', 'BETWEEN_50K_100K', 45),
    (355, 'SQL 데이터베이스: 기초부터 데이터 모델링까지', 'https://www.codeit.kr/paths/sql-database-for-developers', '동영상', '코드잇', 'OVER_10', '중', 'UNDER_50K', 45),
    (356, 'SW 개발자를 위한 성능 좋은 SQL 쿼리 작성법', 'https://www.inflearn.com/course/%EC%84%B1%EB%8A%A5%EC%A2%8B%EC%9D%80-%EC%BF%BC%EB%A6%AC%EC%9E%91%EC%84%B1%EB%B2%95?srsltid=AfmBOop4B6wVQpH_jz6hmnmQbW7c76FN66qCPpiR_MsRcxyOjZ7w3nod', '동영상', '인프런', 'HOUR_10', '상', 'BETWEEN_100K_200K', 45),
    (357, '업무에 바로 쓰는 SQL 튜닝', 'https://www.inflearn.com/course/%EC%97%85%EB%AC%B4-sql-%ED%8A%9C%EB%8B%9D?srsltid=AfmBOor_2B3r1qc4Gc0VQ3Wcssas-gWyYgximCXJV9TRBxb_Y1rHAyDZ', '동영상', '인프런', 'HOUR_10', '중', 'BETWEEN_50K_100K', 45),
    (358, '비전공자도 이해할 수 있는 MySQL 성능 최적화 입문/실전 (SQL 튜닝편)', 'https://www.inflearn.com/course/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90-mysql-%EC%84%B1%EB%8A%A5%EC%B5%9C%EC%A0%95%ED%99%95-sql%ED%8A%9C%EB%8B%9D?srsltid=AfmBOoonqPu1uF2BxvwiyKUEHDcK51ynZXjzmhe_9LE5OLnAfuLjF428', '동영상', '인프런', 'HOUR_3', '중', 'BETWEEN_50K_100K', 45),
    (359, 'SQL Tuning', 'https://www.youtube.com/playlist?list=PLCkO8I_DSQ7ejSSRg0FjAC6Y9aiEWeO0a', '동영상', '유튜브', 'HOUR_5', '중', 'FREE', 45),
    (360, 'SQL SERVER 튜닝 가이드(이론편)', 'https://www.youtube.com/playlist?list=PLCkO8I_DSQ7dbWnsv0-DLsmjR_b2OguPU', '동영상', '유튜브', 'HOUR_5', '상', 'FREE', 45),
    (361, 'SQL SERVER 튜닝 가이드(실습편)', 'https://www.youtube.com/playlist?list=PLCkO8I_DSQ7e8fRtslphWS9fGkClGkxfr', '동영상', '유튜브', 'HOUR_5', '상', 'FREE', 45),
    (362, 'SQL Server 컨설턴트가 알려주는, 쿼리 능력 레벨업(고급 T-SQL 쿼리)', 'https://www.inflearn.com/course/sql-%EC%BF%BC%EB%A6%AC%EB%8A%A5%EB%A0%A5', '동영상', '인프런', 'HOUR_10', '상', 'UNDER_50K', 45),
    (363, '스프링 부트 (Spring Boot) 강의', 'https://www.youtube.com/watch?v=rHJgMRimJ4Y&list=PLlTylS8uB2fBOi6uzvMpojFrNe7sRmlzU', '동영상', '유튜브', 'OVER_10', '하', 'FREE', 46),
    (364, '스프링 입문 - 코드로 배우는 스프링 부트, 웹 MVC, DB 접근 기술', 'https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%EC%9E%85%EB%AC%B8-%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8?srsltid=AfmBOorhf7FZ7EFxoVHw6EgjQh2J2Gwya9a2oGKIlkr7yyX5oXo46KzF', '동영상', '인프런', 'HOUR_10', '하', 'FREE', 46),
    (365, '쉽게 배우는 Spring Boot & JPA', 'https://codingapple.com/course/spring-boot-jpa/', '동영상', '코딩애플', 'HOUR_5', '하', 'BETWEEN_50K_100K', 46),
    (366, '자바 스프링 프레임워크(renew ver.) - 신입 프로그래머를 위한 강좌', 'https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC_renew', '동영상', '인프런', 'OVER_10', '하', 'UNDER_50K', 46),
    (367, 'Java 마이크로서비스(MSA) 프로젝트 실습', 'https://www.inflearn.com/course/java-msa-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%8B%A4%EC%8A%B5', '동영상', '인프런', 'HOUR_10', '상', 'BETWEEN_50K_100K', 46),
    (368, '스프링 MVC 1편 - 백엔드 웹 개발 핵심 기술', 'https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-mvc-1', '동영상', '인프런', 'OVER_10', '하', 'BETWEEN_50K_100K', 46),
    (369, '스프링 MVC 2편 - 백엔드 웹 개발 활용 기술', 'https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-mvc-2', '동영상', '인프런', 'OVER_10', '하', 'UNDER_50K', 46),
    (370, '스프링 DB 1편 - 데이터 접근 핵심 원리', 'https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-db-1', '동영상', '인프런', 'OVER_10', '중', 'BETWEEN_50K_100K', 46),
    (371, '실전! 스프링 부트와 JPA 활용1 - 웹 애플리케이션 개발', 'https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8-JPA-%ED%99%9C%EC%9A%A9-1', '동영상', '인프런', 'HOUR_10', '중', 'BETWEEN_50K_100K', 46),
    (372, '스프링 부트 - 핵심 원리와 활용', 'https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8-%ED%95%B5%EC%8B%AC%EC%9B%90%EB%A6%AC-%ED%99%9C%EC%9A%A9', '동영상', '인프런', 'OVER_10', '중', 'BETWEEN_50K_100K', 46),
    (373, '스프링 MVC 2편 - 백엔드 웹 개발 활용 기술', 'https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-mvc-2', '동영상', '인프런', 'OVER_10', '중', 'UNDER_50K', 46),
    (374, '스프링 프레임워크는 내 손에 [스프1탄]', 'https://www.inflearn.com/course/%EC%8A%A4%ED%94%84-spring-1', '동영상', '인프런', 'OVER_10', '하', 'UNDER_50K', 46),
    (375, '스프링 마이크로서비스 코딩 공작소', 'https://product.kyobobook.co.kr/detail/S000061351987', '책', '교보문고', 'OVER_10', '중', 'UNDER_50K', 46),
    (376, '[NarP Series] MVC 프레임워크는 내 손에 [나프2탄]', 'https://www.inflearn.com/course/%EB%82%98%ED%94%84-mvc-2', '동영상', '인프런', 'OVER_10', '하', 'UNDER_50K', 46),
    (377, '스프링 핵심 원리 - 고급편', 'https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%95%B5%EC%8B%AC-%EC%9B%90%EB%A6%AC-%EA%B3%A0%EA%B8%89%ED%8E%B8', '동영상', '인프런', 'OVER_10', '상', 'UNDER_50K', 46),
    (378, '스프링부트 게시판 프로젝트', 'https://www.youtube.com/watch?v=YshcPPHClR4&list=PLV9zd3otBRt7jmXvwCkmvJ8dH5tR_20c0', '동영상', '유튜브', 'HOUR_5', '중', 'FREE', 46),
    (379, '스프링과 스프링부트(Spring Boot)ㅣ정의, 특징, 사용 이유, 생성 방법', 'https://www.codestates.com/blog/content/%EC%8A%A4%ED%94%84%EB%A7%81-%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8', '블로그', '블로그', 'HOUR_3', '하', 'FREE', 46),
    (380, '스프링 부트 3 핵심 가이드', 'https://product.kyobobook.co.kr/detail/S000216104276', '책', '교보문고', 'OVER_10', '중', 'UNDER_50K', 46),
    (381, '스프링 부트 3 백엔드 개발자 되기: 자바 편', 'https://product.kyobobook.co.kr/detail/S000212798297', '책', '교보문고', 'OVER_10', '중', 'UNDER_50K', 46),
    (382, '【한글자막】 Spring Boot 3 & Spring Framework 6 마스터하기! [최신판]', 'https://www.udemy.com/course/spring-boot-and-spring-framework-korean', '동영상', '유데미', 'OVER_10', '상', 'BETWEEN_100K_200K', 46),
    (383, 'Do it! Node.js 프로그래밍 입문', 'https://www.youtube.com/playlist?list=PLG7te9eYUi7vxSvo6hvhOaht8oP0PoCwi', '동영상', '유튜브', 'HOUR_5', '하', 'FREE', 47),
    (384, 'WEB2 - Node.js', 'https://opentutorials.org/course/3332', '동영상', '생활코딩', 'HOUR_3', '중', 'FREE', 47),
    (385, '얄코의 Node.js (Korean ver.)', 'https://www.inflearn.com/course/%EC%96%84%EC%BD%94-node-js', '동영상', '인프런', 'HOUR_5', '하', 'UNDER_50K', 47),
    (386, 'NodeJS - The Complete Guide (MVC, REST APIs, GraphQL, Deno)', 'https://www.udemy.com/course/nodejs-the-complete-guide/?couponCode=ST8MT220425G1', '동영상', '유데미', 'OVER_10', '하', 'BETWEEN_100K_200K', 47),
    (387, 'Node.js로 백엔드 서버 개발하기', 'https://www.codeit.kr/paths/nodejs-backend-development', '동영상', '코드잇', 'OVER_10', '중', 'FREE', 47),
    (388, 'Node.js 서버 프로그래밍 과정', 'https://edu.goorm.io/lecture/13564/node-js-%EC%84%9C%EB%B2%84-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EA%B3%BC%EC%A0%95', '동영상', 'goormedu', 'OVER_10', '중', 'UNDER_50K', 47),
    (389, '[저자 직강] Do it! Node.js 프로그래밍', 'https://edu.goorm.io/lecture/12534/%EC%A0%80%EC%9E%90-%EC%A7%81%EA%B0%95-do-it-node-js-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D', '동영상', 'goormedu', 'OVER_10', '중', 'FREE', 47),
    (390, '한시간만에 Node.js 백엔드 기초 끝내기 (ft. API 구축)', 'https://www.youtube.com/watch?v=Tt_tKhhhJqY', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 47),
    (391, 'Do it! Node.js 프로그래밍 입문', 'https://www.youtube.com/watch?v=4inLYlZOKAU&list=PLG7te9eYUi7vxSvo6hvhOaht8oP0PoCwi', '동영상', '유튜브', 'HOUR_10', '하', 'FREE', 47),
    (392, 'Do it! Node.js 프로그래밍 입문 : 쉽고 빠르게 달리는 백엔드 개발', 'https://ebook-product.kyobobook.co.kr/dig/epd/ebook/E000005463761', '책', '교보문고', 'OVER_10', '중', 'UNDER_50K', 47),
    (393, 'Node.js 프로젝트 투입 일주일 전', 'https://ebook-product.kyobobook.co.kr/dig/epd/ebook/E000002955356', '책', '교보문고', 'OVER_10', '상', 'UNDER_50K', 47),
    (394, '생활코딩! Node.js 노드제이에스 프로그래밍', 'https://ebook-product.kyobobook.co.kr/dig/epd/ebook/E000002928538', '책', '교보문고', 'OVER_10', '중', 'UNDER_50K', 47),
    (395, '테스트주도개발(TDD)로 만드는 NodeJS API 서버', 'https://www.inflearn.com/course/%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%A3%BC%EB%8F%84%EA%B0%9C%EB%B0%9C-tdd-nodejs-api', '동영상', '인프런', 'HOUR_5', '중', 'UNDER_50K', 47),
    (396, '【한글자막】 NodeJS 완벽 가이드 : MVC, REST APIs, GraphQL, Deno', 'https://www.udemy.com/course/nodejs-mvc-rest-apis-graphql-deno/', '동영상', '유데미', 'OVER_10', '상', 'BETWEEN_100K_200K', 47),
    (397, 'Vue.js - Django Web Programming (Blog CRUD and Auth)', 'https://www.udemy.com/course/vuejs-django-web-programming-blog-crud-and-auth/?couponCode=ST8MT220425G1', '동영상', '유데미', 'HOUR_5', '중', 'BETWEEN_50K_100K', 48),
    (398, 'python django tutorial 강좌', 'https://www.youtube.com/watch?v=alrLd9T96aA&list=PLi4xPOplIq7d1vDdLBAvS5PmQR-p6KwUz', '동영상', '유튜브', 'HOUR_5', '하', 'FREE', 48),
    (399, '작정하고 장고! Django REST Framework 편', 'https://www.youtube.com/watch?v=1qiQkKshMUs&list=PLQFurmxCuZ2Qmcl0TJame_N79kP2o7VzG', '동영상', '유튜브', 'HOUR_5', '하', 'FREE', 48),
    (400, '【한글자막】 Django 4 및 Python 풀스택 개발자 마스터 클래스', 'https://www.udemy.com/course/django-4-python/?couponCode=ST8MT220425G1', '동영상', '유데미', 'HOUR_5', '중', 'BETWEEN_100K_200K', 48),
    (401, '실전! Django 활용', 'https://www.inflearn.com/course/%EC%8B%A4%EC%A0%84-django-%ED%99%9C%EC%9A%A9#curriculum', '동영상', '인프런', 'HOUR_5', '중', 'BETWEEN_50K_100K', 48),
    (402, '모두를 위한 장고 특화 과정', 'https://www.coursera.org/specializations/django', '동영상', 'Coursera', 'OVER_10', '중', 'FREE', 48),
    (403, 'Django로 하나로 완성하는 MVP 개발', 'https://www.codeit.kr/paths/django-web-development', '동영상', '코드잇', 'OVER_10', '중', 'FREE', 48),
    (404, 'Django 한 그릇 뚝딱', 'https://ebook-product.kyobobook.co.kr/dig/epd/ebook/E000002986653', '책', '교보문고', 'OVER_10', '중', 'UNDER_50K', 48),
    (405, '이한영의 Django(장고) 입문', 'https://ebook-product.kyobobook.co.kr/dig/epd/ebook/E000005171331', '책', '교보문고', 'OVER_10', '하', 'UNDER_50K', 48),
    (406, '장고 기초 끝내기(django Framework)', 'https://www.youtube.com/playlist?list=PLpzDq-W37heQVO-5JnVMp1blZH3M0lo5Z', '동영상', '유튜브', 'HOUR_10', '하', 'UNDER_50K', 48),
    (407, 'Python Flask Web Framework', 'https://www.youtube.com/playlist?list=PLuHgQVnccGMClNOIuT3b3M4YZjxmult2y', '동영상', '생활코딩', 'HOUR_1', '하', 'FREE', 49),
    (408, '점프 투 플라스크', 'https://wikidocs.net/book/4542', '책', '위키독스', 'OVER_10', '하', 'FREE', 49),
    (409, '【한글자막】 Python FLASK로 웹사이트 만들기', 'https://www.udemy.com/course/python-flask-jose/?couponCode=ST8MT220425G1', '동영상', '유데미', 'OVER_10', '중', 'BETWEEN_50K_100K', 49),
    (410, 'flask/플라스크와 백엔드 기본', 'https://www.inflearn.com/course/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%ED%92%80%EC%8A%A4%ED%83%9D-1', '동영상', '인프런', 'OVER_10', '중', 'BETWEEN_50K_100K', 49),
    (411, '파이썬 플라스크(Flask) 기반 웹 개발 및 업무 자동화 서비스 활용', 'https://www.inflearn.com/course/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%ED%94%8C%EB%9D%BC%EC%8A%A4%ED%81%AC-%EC%9B%B9%EC%84%9C%EB%B9%84%EC%8A%A4', '동영상', '인프런', 'HOUR_10', '하', 'UNDER_50K', 49),
    (412, 'Python용 Flask 알아보기 - 전체 튜토리얼', 'https://www.youtube.com/watch?v=Z1RJmh_OqeA', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 49),
    (413, 'REST APIs with Flask and Python in 2025', 'https://www.udemy.com/course/rest-api-flask-and-python/?couponCode=ST8MT220425G1', '동영상', '유데미', 'OVER_10', '중', 'BETWEEN_100K_200K', 49),
    (414, 'Flask 기반의 파이썬 웹 프로그래밍', 'https://ebook-product.kyobobook.co.kr/dig/epd/ebook/E000002970916', '책', '교보문고', 'OVER_10', '상', 'UNDER_50K', 49),
    (415, 'Flask for Beginners: Creating an Application', 'https://www.coursera.org/projects/flask-for-beginners-creating-an-application', '동영상', 'Coursera', 'HOUR_3', '하', 'FREE', 49),
    (416, 'Python Flask', 'https://www.youtube.com/playlist?list=PLEOnZ6GeucBWvOGSbIKNMp6RMQL9LYRc3', '동영상', '유튜브', 'HOUR_10', '하', 'FREE', 49),
    (417, 'Flask Tutorial Note Web App', 'https://wikidocs.net/book/8078', '책', '위키독스', 'HOUR_3', '하', 'FREE', 49),
    (418, '파이썬과 파이어베이스로 커뮤니티 사이트 만들기', 'https://www.youtube.com/playlist?list=PLqIc89sXpwUCjwzRImFjO2UL8lBopRajj', '동영상', '유튜브', 'HOUR_3', 'nan', 'FREE', 49),
    (419, '실전! 코틀린과 스프링 부트로 도서관리 애플리케이션 개발하기', 'https://www.inflearn.com/course/java-to-kotlin-2?srsltid=AfmBOorwYhOYGDjLQCkG__yqs__NHBpONEGNDTt7xNCGRKkYhpRvFNEA', '동영상', '인프런', 'HOUR_10', '중', 'BETWEEN_50K_100K', 50),
    (420, '자바 개발자를 위한 코틀린 입문', 'https://www.inflearn.com/course/java-to-kotlin', '동영상', '인프런', 'HOUR_10', '하', 'BETWEEN_50K_100K', 50),
    (421, '은행 서버 프로젝트 실습을 통해 배우는 코틀린 마스터 클래스', 'https://www.inflearn.com/course/%EC%9D%80%ED%96%89%EC%84%9C%EB%B2%84-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%8B%A4%EC%8A%B5-%EC%BD%94%ED%8B%80%EB%A6%B0-%EB%A7%88%EC%8A%A4%ED%84%B0%ED%81%B4%EB%9E%98%EC%8A%A4', '동영상', '인프런', 'HOUR_10', '중', 'UNDER_50K', 50),
    (422, '스프링부트+코틀린 - 블로그 프로젝트', 'https://www.youtube.com/watch?v=Fjf5_NQnDVw&list=PLiLLi47PCMPjdezfGUnayz5PwEfwAQCBi', '동영상', '유튜브', 'HOUR_10', '중', 'FREE', 50),
    (423, '코틀린 문법부터 실무까지 (실전 자바->코틀린 변환)', 'https://www.inflearn.com/course/%EC%BD%94%ED%8B%80%EB%A6%B0-%EB%AC%B8%EB%B2%95-%EC%8B%A4%EB%AC%B4-%EC%9E%90%EB%B0%94to%EC%BD%94%ED%8B%80%EB%A6%B0', '동영상', '인프런', 'OVER_10', '상', 'UNDER_50K', 50),
    (424, 'Spring Boot & JPA에서 Java와 Kotlin을 함께 사용하기', 'https://tech.inflab.com/20240110-java-and-kotlin/', '블로그', '블로그', 'HOUR_1', '하', 'FREE', 50),
    (425, '[입문] 누구나 배울 수 있는 코틀린(Kotlin)', 'https://www.inflearn.com/course/kotlin-%EC%9E%85%EB%AC%B8', '동영상', '인프런', 'HOUR_5', '하', 'UNDER_50K', 50),
    (426, 'Kotlin 및 Spring Boot 를 사용하여 RESTFUL API 구축하기', 'https://www.udemy.com/course/build-restful-apis-using-kotlin-and-spring-boot-korean/?couponCode=ST8MT220425G1', '동영상', '유데미', 'HOUR_10', '중', 'UNDER_50K', 50),
    (427, '[고급] Kotlin(코틀린) 개발자를 위한 마스터클래스', 'https://www.udemy.com/course/kotlin-part1/?couponCode=ST8MT220425G1', '동영상', '유데미', 'OVER_10', '상', 'UNDER_50K', 50),
    (428, '[초급] 맛보자! 코틀린과 스프링으로 API 호출하기', 'https://www.inflearn.com/course/%EC%BD%94%ED%8B%80%EB%A6%B0-%EC%8A%A4%ED%94%84%EB%A7%81-api%ED%98%B8%EC%B6%9C-%EC%9E%85%EB%AC%B8?srsltid=AfmBOooOAx44LNVHnS2jyUEBhEWH7kue1OV6yWhDmrlq3ECLKeBpGGXd', '동영상', '인프런', 'HOUR_3', '하', 'FREE', 50),
    (429, '코틀린 쿡북', 'https://www.yes24.com/product/goods/90452827', '책', 'Yes24', 'HOUR_10', '중', 'UNDER_50K', 50),
    (430, '코틀린 마이크로서비스 개발', 'https://www.yes24.com/product/goods/68796734', '책', 'Yes24', 'OVER_10', '상', 'UNDER_50K', 50),
    (431, '자바 ORM 표준 JPA 프로그래밍 - 기본편', 'https://www.inflearn.com/course/ORM-JPA-Basic', '동영상', '인프런', 'OVER_10', '하', 'BETWEEN_50K_100K', 51),
    (432, '실전! 스프링 데이터 JPA', 'https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%EB%8D%B0%EC%9D%B4%ED%84%B0-JPA-%EC%8B%A4%EC%A0%84', '동영상', '인프런', 'HOUR_10', '중', 'BETWEEN_50K_100K', 51),
    (433, '실전! Querydsl', 'https://www.inflearn.com/course/Querydsl-%EC%8B%A4%EC%A0%84', '동영상', '인프런', 'HOUR_10', '상', 'BETWEEN_50K_100K', 51),
    (434, 'ORM, JPA, Spring Data JPA 적용하기 [ 스프링 부트 (Spring Boot) ]', 'https://www.youtube.com/watch?v=OiAYmtq4Av8', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 51),
    (435, '자바 ORM 표준 JPA 프로그래밍', 'https://product.kyobobook.co.kr/detail/S000000935744', '책', '교보문고', 'OVER_10', '중', 'UNDER_50K', 51),
    (436, '[Spring] ORM (Object Relational Mapping) 이란?', 'https://velog.io/@matcha_/Spring-ORM-Object-Relational-Mapping-%EC%9D%B4%EB%9E%80', '블로그', '블로그', 'HOUR_1', '하', 'FREE', 51),
    (437, '스프링 배치', 'https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B0%B0%EC%B9%98', '동영상', '인프런', 'OVER_10', '중', 'BETWEEN_50K_100K', 51),
    (438, 'Spring Batch란? 간단한 개념과 코드 살펴보기', 'https://dkswnkk.tistory.com/707', '블로그', '블로그', 'HOUR_1', '하', 'FREE', 51),
    (439, '스프링 시큐리티 완전 정복 [6.x 개정판]', 'https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0-%EC%99%84%EC%A0%84%EC%A0%95%EB%B3%B5', '동영상', '인프런', 'OVER_10', '중', 'BETWEEN_50K_100K', 51),
    (440, '스프링 시큐리티 OAuth2', 'https://www.inflearn.com/course/%EC%A0%95%EC%88%98%EC%9B%90-%EC%8A%A4%ED%94%84%EB%A7%81-%EC%8B%9C%ED%81%90%EB%A6%AC%ED%8B%B0', '동영상', '인프런', 'OVER_10', '상', 'UNDER_50K', 51),
    (441, '스프링 시큐리티', 'https://www.youtube.com/watch?v=y0PXQgrkb90&list=PLJkjrxxiBSFCKD9TRKDYn7IE96K2u3C3U', '동영상', '유튜브', 'HOUR_3', '중', 'FREE', 51),
    (442, 'Spring Security', 'https://spring.io/projects/spring-security', '블로그', '공식문서', 'HOUR_3', '하', 'FREE', 51),
    (443, '【한글자막】 Spring Security 6 초보에서 마스터 되기 최신강의! (JWT , OAUTH2 포함)', 'https://www.udemy.com/course/spring-security-6-jwt-oauth2-korean/?couponCode=ST8MT220425G1', '동영상', '유데미', 'OVER_10', '중', 'UNDER_50K', 51),
    (444, 'Logback vs SLF4J vs Log4J2 - 차이점은 무엇입니까? 자바 두뇌 두뇌 바이트', 'https://www.youtube.com/watch?v=SWHYrCXIL38&t=90s', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 51),
    (445, '개발자에게 필요한 로그 관리', 'https://www.inflearn.com/course/%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%97%90%EA%B2%8C-%ED%95%84%EC%9A%94%ED%95%9C-%EB%A1%9C%EA%B7%B8%EA%B4%80%EB%A6%AC#curriculum', '동영상', '인프런', 'HOUR_3', '중', 'UNDER_50K', 51),
    (446, '[Spring Boot] 테스트 코드', 'https://sjh9708.tistory.com/195', '블로그', '블로그', 'HOUR_1', '하', 'FREE', 51),
    (447, 'Java/Spring 테스트를 추가하고 싶은 개발자들의 오답노트', 'https://www.inflearn.com/course/%EC%9E%90%EB%B0%94-%EC%8A%A4%ED%94%84%EB%A7%81-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EA%B0%9C%EB%B0%9C%EC%9E%90-%EC%98%A4%EB%8B%B5%EB%85%B8%ED%8A%B8', '동영상', '인프런', 'HOUR_10', '중', 'UNDER_50K', 51),
    (448, '스프링부트 JUnit 테스트 - 시큐리티를 활용한 Bank 애플리케이션', 'https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8-junit-%ED%85%8C%EC%8A%A4%ED%8A%B8', '동영상', '인프런', 'OVER_10', '중', 'UNDER_50K', 51),
    (449, 'Springboot Test(종합)', 'https://www.youtube.com/playlist?list=PLeMeDIV7bypssYJ4ezUDEru-39G1gwXvr', '동영상', '유튜브', 'HOUR_5', '상', 'FREE', 51),
    (450, 'Node.js - Express', 'https://www.inflearn.com/course/node-js-express#curriculum', '동영상', '인프런', 'HOUR_10', '중', 'FREE', 54),
    (451, 'Node.js, Express, MongoDB & More: The Complete Bootcamp', 'https://www.udemy.com/course/nodejs-express-mongodb-bootcamp/?couponCode=ST8MT220425G1', '동영상', '유데미', 'OVER_10', '상', 'BETWEEN_100K_200K', 54),
    (452, 'Node.js 및 Express로 백엔드 앱 개발하기', 'https://www.coursera.org/learn/developing-backend-apps-with-nodejs-and-express', '동영상', 'Coursera', 'OVER_10', '중', 'FREE', 54),
    (453, 'Node.js 및 Express를 사용한 RESTful 마이크로서비스 특화 과정', 'https://www.coursera.org/specializations/restful-microservices-using-node-js-and-express', '동영상', 'Coursera', 'OVER_10', '상', 'FREE', 54),
    (454, 'Node.js 백엔드 개발자 되기', 'https://ebook-product.kyobobook.co.kr/dig/epd/ebook/E000005200379', '책', '교보문고', 'OVER_10', '중', 'UNDER_50K', 54),
    (455, 'Node.js에 TypeScript 적용하기(feat. NodeBird)', 'https://www.inflearn.com/course/nodejs-typescript-%EC%A0%81%EC%9A%A9', '동영상', '인프런', 'HOUR_10', '중', 'UNDER_50K', 54),
    (456, 'Node.js 백엔드 서버 개발 소개(Fastify + Prisma + Typescript와 함께하는)', 'https://www.youtube.com/playlist?list=PLEU9vwKdoCqR9yTVGnfq1tIu5wPraKDV-', '동영상', '유튜브', 'HOUR_3', '중', 'FREE', 54),
    (457, 'WEB5 - Express Passport.js', 'https://www.inflearn.com/course/WEB5-Express-Passport-js', '동영상', '인프런', 'HOUR_3', '하', 'FREE', 54),
    (458, 'EXPRESS.JS: Learn Node! Node js & Express js - Master Nodejs', 'https://www.udemy.com/course/expressjs-learn-node-node-js-express-js-master-nodejs/?couponCode=ST8MT220425G1', '동영상', '유데미', 'OVER_10', '상', 'BETWEEN_50K_100K', 54),
    (459, 'Express JS #15 - Passport.js Authentication', 'https://www.youtube.com/watch?v=_lZUq39FGv0', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 54),
    (460, 'Unit Testing for Typescript & NodeJs Developers with Jest', 'https://www.udemy.com/course/unit-testing-typescript-nodejs', '동영상', '유데미', 'OVER_10', '중', 'BETWEEN_50K_100K', 54),
    (461, 'APTRS DOCS', 'https://aptrs.com/latest/custom-report/pdf/pdf/', '책', '공식문서', 'OVER_10', '중', 'FREE', 56),
    (462, 'Python Django CRM - Course', 'https://www.youtube.com/playlist?list=PLpyspNLjzwBka94O3ABYcRYk8IaBR8hXZ', '동영상', '유튜브', 'HOUR_10', '중', 'FREE', 56),
    (463, '작정하고 장고! Django REST Framework 편', 'https://www.youtube.com/playlist?list=PLQFurmxCuZ2Qmcl0TJame_N79kP2o7VzG', '동영상', '유튜브', 'HOUR_3', '하', 'FREE', 56),
    (464, 'django REST framework', 'https://www.django-rest-framework.org/', '책', '공식문서', 'OVER_10', '하', 'FREE', 56),
    (465, 'DjangoCRM', 'https://github.com/DjangoCRM/django-crm?tab=readme-ov-file', '책', 'GitHub', 'OVER_10', '하', 'FREE', 56),
    (466, 'Django REST Framework 핵심사항', 'https://www.inflearn.com/course/%EC%9E%A5%EA%B3%A0-drf', '동영상', '인프런', 'HOUR_5', '하', 'UNDER_50K', 56),
    (467, 'REST APIs with Flask and Python in 2025', 'https://www.udemy.com/course/rest-api-flask-and-python/?couponCode=ST8MT220425G1', '동영상', '유데미', 'OVER_10', '하', 'BETWEEN_100K_200K', 58),
    (468, 'marshmallow flask python', 'https://www.youtube.com/playlist?list=PLwbVI2LKRNRysiK1pLESNU6kNBSRxSj3I', '동영상', '유튜브', 'HOUR_5', '하', 'FREE', 58),
    (469, 'Python Web | Introduction To Flask SQLAlchemy | CRUD Operations', 'https://www.youtube.com/watch?v=wmIoQaLzhA4', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 58),
    (470, 'Flask SQLAlchemy', 'https://www.youtube.com/playlist?list=PLXmMXHVSvS-BlLA5beNJojJLlpE0PJgCW', '동영상', '유튜브', 'HOUR_10', '중', 'FREE', 58),
    (471, '[Flask] Flask-WTF을 이용한 form 사용하기', 'https://velog.io/@___pepper/Flask-Flask-WTF%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-form-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0', '블로그', '블로그', 'HOUR_1', '하', 'FREE', 58),
    (472, 'flask-marshmallow', 'https://github.com/marshmallow-code/flask-marshmallow', '책', 'GitHub', 'HOUR_1', '하', 'FREE', 58),
    (473, 'Flask-SQLAlchemy Docs', 'https://flask-sqlalchemy.readthedocs.io/en/stable/', '책', '공식문서', 'OVER_10', '하', 'FREE', 58),
    (474, 'Flask-Migrate', 'https://flask-migrate.readthedocs.io/en/latest/', '책', '공식문서', 'OVER_10', '하', 'FREE', 58),
    (475, 'Jenkins를 이용한 CI/CD Pipeline 구축', 'https://www.inflearn.com/course/%EC%A0%A0%ED%82%A8%EC%8A%A4-ci-cd-%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8', '동영상', '인프런', 'OVER_10', '하', 'BETWEEN_50K_100K', 53),
    (476, 'DevOps를 위한 Docker 가상화 기술(Private Harbor Registry)', 'https://www.inflearn.com/course/devops-docker-%EA%B0%80%EC%83%81%ED%99%94-%EA%B8%B0%EC%88%A0', '동영상', '인프런', 'OVER_10', '하', 'BETWEEN_50K_100K', 53),
    (477, '1시간만에 치킨 콤보값으로 배우는 서버 배포', 'https://www.inflearn.com/course/1%EC%8B%9C%EA%B0%84%EB%A7%8C%EC%97%90-%EC%B9%98%ED%82%A8%EC%BD%A4%EB%B3%B4%EA%B0%92-%EC%84%9C%EB%B2%84-%EB%B0%B0%ED%8F%AC', '동영상', '인프런', 'HOUR_1', '하', 'UNDER_50K', 53),
    (478, '그래서 웹서비스는 하나 만들었는데 배포는 어떻게 함?(AWS)', 'https://www.youtube.com/watch?v=cOUhREAWJNw', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 53),
    (479, 'AWS EC2 + Nginx + Docker + SpringBoot + GitHub Action 무중단 배포(Deploy)', 'https://www.youtube.com/playlist?list=PLcyPfaKZ8Ykg4OkqAhFgwLvASs5T_-UjE', '동영상', '유튜브', 'HOUR_5', '중', 'FREE', 53),
    (480, '스프링 부트로 만든 백엔드 서버 처음으로 AWS EC2에 배포해보기!', 'https://www.youtube.com/watch?v=-imYJdLJAU4', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 53),
    (481, '실전 대비! DevOps 인터뷰 완벽 정복 - 고급편', 'https://www.inflearn.com/course/%EB%8D%B0%EB%B8%8C%EC%98%B5%EC%8A%A4-%EC%9D%B8%ED%84%B0%EB%B7%B0-%EC%99%84%EB%B2%BD-%EC%A0%95%EB%B3%B5', '동영상', '인프런', 'HOUR_3', '상', 'UNDER_50K', 53),
    (482, '처음 시작하는 Infrastructure as Code : AWS & 테라폼', 'https://www.inflearn.com/course/%EB%8D%B0%EB%B8%8C%EC%98%B5%EC%8A%A4-%ED%85%8C%EB%9D%BC%ED%8F%BC-aws', '동영상', '인프런', 'HOUR_5', '중', 'UNDER_50K', 53),
    (483, '비전공자도 이해할 수 있는 CI/CD 입문 실전', 'https://www.inflearn.com/course/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90-ci-cd-%EC%9E%85%EB%AC%B8-%EC%8B%A4%EC%A0%84', '동영상', '인프런', 'HOUR_10', '하', 'BETWEEN_50K_100K', 53),
    (484, '하루만에 배우는 express with AWS', 'https://www.inflearn.com/course/%ED%95%98%EB%A3%A8%EB%A7%8C%EC%97%90-%EB%A7%8C%EB%93%9C%EB%8A%94-express-aws', '동영상', '인프런', 'HOUR_10', '하', 'UNDER_50K', 55),
    (485, 'Node.js로 웹 서버 만들기 : Heroku로 배포하기', 'https://www.youtube.com/watch?v=igFgJ5KENy0', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 55),
    (486, '지금 당장 데브옵스 AWS', 'https://www.inflearn.com/course/지금-당장-데브옵스-aws', '책', '인프런', 'OVER_10', '하', 'UNDER_50K', 55),
    (487, 'AWS EC2 접속하기 | Node.js 서버 클라우드에 띄우기', 'https://www.youtube.com/watch?v=lzZ9KSGh6eI', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 55),
    (488, 'Serverless Framework Guide: API Gateway, AWS & Node.js', 'https://www.udemy.com/course/aws-lambda-serverless-framework-build-ecommerce-apis/?kw=node.js+server&src=sac&couponCode=ST8MT220425G1', '동영상', '유데미', 'OVER_10', '하', 'BETWEEN_50K_100K', 55),
    (489, '백엔드 서버 클릭 몇번으로 무료 배포하는 방법', 'https://www.youtube.com/watch?v=SGGebq48h3Y&t=77s', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 55),
    (490, 'Build and Deploy a NodeJS API', 'https://www.udemy.com/course/build-and-deploy-a-nodejs-api/?srsltid=AfmBOorHLtFnIM-wjvPYeKPWMEldz8PjHdnKktV-e8xf51ooPnsPGoWu&utm_source=chatgpt.com', '동영상', '유데미', 'HOUR_1', '상', 'FREE', 55),
    (491, 'Full Node.js Deployment to AWS - FREE SSL, NGINX | Node js HTTPS Server', 'https://www.youtube.com/watch?v=yhiuV6cqkNs', '동영상', '유튜브', 'HOUR_1', '상', 'FREE', 55),
    (492, 'Deploy NodeJS app with PM2 on AWS EC2 instance | Deploying NodeJS in AWS by AWS Avinash Reddy', 'https://www.youtube.com/watch?v=rI6Cr4QqUm4', '동영상', '유튜브', 'HOUR_1', '중', 'FREE', 55),
    (493, 'Deploying Node.js App With PM2', 'https://www.youtube.com/watch?v=RF6Dzwwpduo', '동영상', '유튜브', 'HOUR_1', '중', 'FREE', 55),
    (494, 'Vercel로 Flask 배포하기', 'https://velog.io/@seondal/Vercel-Flask-무료로-배포하기', '블로그', '블로그', 'HOUR_1', '하', 'FREE', 59),
    (495, '[Python] Flask + uWSGI + Nginx를 연결 및 배포', 'https://soyoung-new-challenge.tistory.com/118', '블로그', '블로그', 'HOUR_1', '하', 'FREE', 59),
    (496, 'Flask 또는 Django를 Production 서버로 배포(Deploy)하기', 'https://jay-flow.medium.com/flask-%EB%98%90%EB%8A%94-django%EB%A5%BC-production-%EC%84%9C%EB%B2%84%EB%A1%9C-%EB%B0%B0%ED%8F%AC-deploy-%ED%95%98%EA%B8%B0-1abadb0b941a', '블로그', '블로그', 'HOUR_1', '하', 'FREE', 59),
    (497, 'The Ultimate Flask Course', 'https://www.udemy.com/course/the-ultimate-flask-course/?couponCode=ST8MT220425G1', '동영상', '유데미', 'OVER_10', '중', 'UNDER_50K', 59),
    (498, 'How to Deploy a Python Flask App with Google Cloud Platform (GCP) on a Virtual Machine', 'https://youtu.be/NlO84jRTwPU?si=fwoBwPNSaXUYoOdw', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 59),
    (499, 'AWS 안쓰고 파이썬 플라스크 프로그램, 백엔드 서버 10분만에 http://fly.io 이용해서 배포하는 방법', 'https://youtu.be/9ZYB_bFRW8A?si=6iFrwUBB3rxTQp8J', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 59),
    (500, 'Flask 앱 CI/CD 파이프라인 만들고, 배포 5분만에 하기 | Azure Web App', 'https://youtu.be/huNRWtL-GF8?si=VnDjL0NDiHGFiCjS', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 59),
    (501, 'Azure 무료 VM으로 flask앱 배포하기 | 서버리스 flask 앱 배포와 비교', 'https://youtu.be/2ORb2g_dpCU?si=7XE9IBG836HcsPSz', '동영상', '유튜브', 'HOUR_1', '중', 'UNDER_50K', 59),
    (502, '[Azure] WebApp 생성 및 Flask 배포하기', 'https://dev-astra.tistory.com/384', '블로그', '블로그', 'HOUR_1', '하', 'FREE', 59),
    (503, 'Terraform을 사용하여 기본 Flask 웹 서버 배포', 'https://cloud.google.com/docs/terraform/get-started-with-terraform?hl=ko', '블로그', '블로그', 'HOUR_1', '상', 'FREE', 59),
    (504, 'Django 프로젝트 AWS EC2에 배포하기 - 터미널을 꺼도 서버 돌아가게 하자! (프리 티어)', 'https://woojin.tistory.com/36', '블로그', '블로그', 'HOUR_3', '하', 'FREE', 57),
    (505, 'Django 빠르게 배포하기', 'https://www.codeit.kr/topics/getting-started-with-django/lessons/3620', '동영상', '코드잇', 'HOUR_1', '하', 'BETWEEN_50K_100K', 57),
    (506, '10분만에 Django 프로젝트 Heroku에 배포하기 - [1시간만에 플러터/장고로 풀스택 퀴즈앱 만들기]', 'https://www.youtube.com/watch?v=9NnjMHxhqkI&list=PL3ilpnPyonYfztoBliWzrS6pzV8C5jxdR&index=6', '동영상', '유튜브', 'HOUR_1', '하', 'UNDER_50K', 57),
    (507, '파이썬 웹 프로그래밍 : FlyIO를 사용해 Django를 인터넷에 배포하기', 'https://www.youtube.com/watch?v=CkBIU6nvF2U', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 57),
    (508, 'Django EC2 배포하기', 'https://www.youtube.com/playlist?list=PLOemN3LiCpznbiEeM_XH9Lfzi6TM4cm_9', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 57),
    (509, '파이썬으로 장고(Django) 공략하기 : 입문', 'https://www.inflearn.com/course/django-course', '동영상', '인프런', 'HOUR_10', '하', 'UNDER_50K', 57),
    (510, '작정하고 장고! Django로 Pinterest 따라만들기 : 바닥부터 배포까지', 'https://www.inflearn.com/course/%EC%9E%A5%EA%B3%A0-%ED%95%80%ED%84%B0%EB%A0%88%EC%8A%A4%ED%8A%B8', '동영상', '인프런', 'OVER_10', '하', 'BETWEEN_50K_100K', 57),
    (511, 'Django 서비스 AWS로 배포하기', 'https://nerogarret.tistory.com/45', '블로그', '블로그', 'HOUR_3', '하', 'FREE', 57),
    (512, '[Django] Django 서비스 Azure로 배포하기(제일 빠르고 쉬운 방법)', 'https://medium.com/@heeee/django-django-%EC%84%9C%EB%B9%84%EC%8A%A4-azure%EB%A1%9C-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0-%EC%A0%9C%EC%9D%BC-%EB%B9%A0%EB%A5%B4%EA%B3%A0-%EC%89%AC%EC%9A%B4-%EB%B0%A9%EB%B2%95-7e7d2e005ed7', '블로그', '블로그', 'HOUR_3', '하', 'FREE', 57),
    (513, '제대로 파는 Git & GitHub', 'https://www.youtube.com/watch?v=1I3hMwQU6GU&ab_channel=%EC%96%84%ED%8C%8D%ED%95%9C%EC%BD%94%EB%94%A9%EC%82%AC%EC%A0%84', '동영상', '유튜브', 'HOUR_3', '하', 'FREE', 37),
    (514, '깃, 깃허브 제대로 배우기', 'https://www.youtube.com/watch?v=Z9dvM7qgN9s&ab_channel=%EB%93%9C%EB%A6%BC%EC%BD%94%EB%94%A9', '동영상', '유튜브', 'HOUR_1', '중', 'FREE', 37),
    (515, '깃 연습해보기', 'https://learngitbranching.js.org/?locale=ko', '블로그', '블로그', 'HOUR_1', '하', 'FREE', 37),
    (516, '제대로 파고드는 Git & GitHub - by 얄코(Yalco)', 'https://www.inflearn.com/course/%EC%A0%9C%EB%8C%80%EB%A1%9C-%ED%8C%8C%EB%8A%94-%EA%B9%83', '동영상', '인프런', 'HOUR_10', '중', 'UNDER_50K', 37),
    (517, '【한글자막】 Git & Github 실무 활용 완벽 가이드', 'https://www.udemy.com/course/best-git-github', '동영상', '유데미', 'OVER_10', '중', 'BETWEEN_100K_200K', 37),
    (518, 'Git 팀 작업을 자동화하는 방법 [Hooks와 커스텀 스크립트]', 'https://coding-by-head.tistory.com/entry/git-hook', '블로그', '블로그', 'HOUR_1', '중', 'FREE', 38),
    (519, 'Husky로 Git hooks 자동화하기(+ lint-staged, commitlint)', 'https://meoweundi.tistory.com/37', '블로그', '블로그', 'HOUR_3', '중', 'FREE', 38),
    (520, 'Git Hooks', 'https://www.atlassian.com/ko/git/tutorials/git-hooks', '블로그', '블로그', 'HOUR_3', '중', 'FREE', 38),
    (521, 'husky, lint-staged', 'https://deku.posstree.com/ko/react/husky-lint-staged/', '블로그', '블로그', 'HOUR_1', '중', 'FREE', 38),
    (522, 'Configuring husky pre-commit git hooks', 'https://www.youtube.com/watch?v=jGEkiljxvxU', '동영상', '유튜브', 'HOUR_1', '중', 'FREE', 38),
    (523, 'Git Project Setup with Husky, Conventional Commits, and branching strategies.', 'https://www.youtube.com/watch?app=desktop&v=jNxDNoYEGVU&t=1169s', '동영상', '유튜브', 'HOUR_1', '중', 'FREE', 38),
    (524, '코딩 자율학습 HTML + CSS + 자바스크립트', 'https://product.kyobobook.co.kr/detail/S000001834830', '책', '교보문고', 'OVER_10', '중', 'UNDER_50K', 41),
    (525, '모던 자바스크립트 Deep Dive', 'https://product.kyobobook.co.kr/detail/S000001766445', '책', '교보문고', 'OVER_10', '하', 'UNDER_50K', 41),
    (526, '바닐라 JS로 크롬 앱 만들기', 'https://nomadcoders.co/javascript-for-beginners', '동영상', '노마드코더', 'HOUR_10', '하', 'FREE', 41),
    (527, 'ES6의 정석', 'https://nomadcoders.co/es6-once-and-for-all', '동영상', '노마드코더', 'HOUR_10', '중', 'UNDER_50K', 41),
    (528, 'JavaScript 입문 수업', 'https://www.youtube.com/playlist?list=PLuHgQVnccGMA4uSig3hCjl7wTDeyIeZVU', '동영상', '유튜브', 'HOUR_10', '중', 'FREE', 41),
    (529, 'JavaScript Course for Beginners – Your First Step to Web Development', 'https://www.youtube.com/watch?v=W6NZfCO5SIk&ab_channel=ProgrammingwithMosh', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 41),
    (530, '모던 JavaScript 튜토리얼', 'https://ko.javascript.info/', '블로그', '블로그', 'OVER_10', '상', 'FREE', 41),
    (531, '견고한 JS 소프트웨어 만들기', 'https://www.inflearn.com/course/tdd-%EA%B2%AC%EA%B3%A0%ED%95%9C-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EB%A7%8C%EB%93%A4%EA%B8%B0', '동영상', '인프런', 'HOUR_3', '중', 'UNDER_50K', 41),
    (532, '실무에 바로 적용하는 AWS 배포', 'https://www.inflearn.com/course/%EC%8B%A4%EB%AC%B4-%EB%B0%94%EB%A1%9C-%EC%A0%81%EC%9A%A9%ED%95%98%EB%8A%94-aws-%EB%B0%B0%ED%8F%AC', '동영상', '인프런', 'HOUR_5', '상', 'BETWEEN_50K_100K', 31),
    (533, 'MERN STACK 커뮤니티 : 시작부터 배포까지 알려주는 React', 'https://www.inflearn.com/course/%ED%92%80%EC%8A%A4%ED%83%9D-%EC%BB%A4%EB%AE%A4%EB%8B%88%ED%8B%B0-mern', '동영상', '인프런', 'HOUR_10', '중', 'UNDER_50K', 31),
    (534, '애플리케이션 배포 자동화와 CI/CD', 'https://www.inflearn.com/course/%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EB%B0%B0%ED%8F%AC-%EC%9E%90%EB%8F%99%ED%99%94-ci-cd', '동영상', '인프런', 'HOUR_3', '하', 'UNDER_50K', 31),
    (535, '【한글자막】 Docker & Kubernetes : 실전 가이드', 'https://www.udemy.com/course/docker-kubernetes-2022/?couponCode=CP130525', '동영상', '유데미', 'OVER_10', '중', 'BETWEEN_100K_200K', 31),
    (536, '그래서 웹서비스 하나 만들었는데 배포는 어떻게함? (AWS)', 'https://www.youtube.com/watch?v=cOUhREAWJNw', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 31),
    (537, '프론트 배포를 위한 잡다한 사전 지식', 'https://iborymagic.tistory.com/94', '블로그', '블로그', 'HOUR_3', '중', 'FREE', 31),
    (538, '단 한 번의 커밋으로 배포까지! 프론트엔드 자동화 전략', 'https://notforme.kr/%EB%8B%A8-%ED%95%9C-%EB%B2%88%EC%9D%98-%EC%BB%A4%EB%B0%8B%EC%9C%BC%EB%A1%9C-%EB%B0%B0%ED%8F%AC%EA%B9%8C%EC%A7%80-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EC%9E%90%EB%8F%99%ED%99%94-%EC%A0%84/', '블로고', '블로그', 'HOUR_3', '중', 'FREE', 31),
    (539, 'AWS(Amazon Web Service) 입문자를 위한 강의', 'https://www.udemy.com/course/aws-beginner-sk/?couponCode=CP130525', '동영상', '유데미', 'HOUR_10', '하', 'BETWEEN_50K_100K', 32),
    (540, 'AWS S3 Basics', 'https://www.coursera.org/projects/aws-s3-basics', '동영상', 'Coursera', 'HOUR_3', '하', 'FREE', 32),
    (541, 'Hosting a Static Website (HTML/CSS/Javascript) in AWS S3', 'https://www.coursera.org/projects/hosting-static-web-site-aws', '동영상', 'Coursera', 'HOUR_1', '하', 'FREE', 32),
    (542, 'AWS 기본기', 'https://www.codeit.kr/topics/aws-basic', '동영상', '코드잇', 'HOUR_5', '중', 'FREE', 32),
    (543, '(LV.100)AWS의 파일 저장/관리의 필수서비스 : Amazon S3를 소개합니다!', 'https://www.youtube.com/watch?v=6sL80G4Pn7Y', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 32),
    (544, '[AWS] S3란 무엇인가', 'https://velog.io/@ghldjfldj/AWS-S3%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80', '블로그', '블로그', 'HOUR_3', '중', 'FREE', 32),
    (545, 'AWS Cloudfront: Serve content from multiple S3 buckets', 'https://www.coursera.org/projects/aws-cloudfront-s3', '동영상', 'Coursera', 'HOUR_3', '중', 'FREE', 32),
    (546, 'Create an Amazon CloudFront Distribution and Website | Step-by-Step AWS CDN Tutorial for Beginners', 'https://www.youtube.com/watch?v=GUfAQUjA3a0', '동영상', '유튜브', 'HOUR_1', '하', 'FREE', 32),
    (547, 'Amazon CloudFront Developer Guide', 'https://product.kyobobook.co.kr/detail/S000045921004', '책', '교보문고', 'OVER_10', '상', 'BETWEEN_50K_100K', 32),
    (548, 'AWS S3와 CloudFront 연동 끝까지 가보기', 'https://akku-dev.tistory.com/153', '블로그', '블로그', 'HOUR_3', '중', 'FREE', 32);

DROP TABLE IF EXISTS solution;
DROP TABLE IF EXISTS exam;

CREATE TABLE exam(
    exam_id BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    exam_content TEXT NOT NULL,
    exam_answer INT NOT NULL,
    exam_level VARCHAR(255) NOT NULL,
    option1 VARCHAR(255) NOT NULL,
    option2 VARCHAR(255) NOT NULL,
    option3 VARCHAR(255) NOT NULL,
    option4 VARCHAR(255) NOT NULL,
    sub_id BIGINT NOT NULL,
    CONSTRAINT fk_exam_subject FOREIGN KEY (sub_id) REFERENCES subject(sub_id)
);

CREATE TABLE solution(
    solution_id BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    user_answer INT NOT NULL,
    solution_content TEXT,
    is_pre BOOLEAN NOT NULL,
    exam_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL,
    CONSTRAINT fk_solution_exam FOREIGN KEY (exam_id) REFERENCES exam(exam_id),
    CONSTRAINT fk_solution_users FOREIGN KEY (user_id) REFERENCES users(user_id)
);

-- 1968번 파이썬인데 옵션이 한 줄 이라서 문제 변경 필요합니다.
-- 2626번은 application.yml 문제라서 역시 문제 변경 필요합니다.
INSERT INTO exam(exam_id, exam_content, exam_answer, exam_level, option1, option2, option3, option4, sub_id) VALUES
    (1, 'HTML 문서의 최상위 루트 요소는 무엇인가?', 1, '하', '<html>', '<head>', '<body>', '<doctype>', 1),
    (2, 'head 요소 안에 넣을 수 없는 태그는?', 4, '하', '<title>', '<link>', '<meta>', '<section>', 1),
    (3, '한 페이지에서 필수이며 한 번만 사용해야 하는 요소는?', 1, '하', '<main>', '<header>', '<aside>', '<nav>', 1),
    (4, '시맨틱 태그와 용도 짝짓기가 올바른 것은?', 1, '중', '<nav> — 주요 내비게이션 링크', '<footer> — 본문 주요 콘텐츠', '<aside> — 문서 제목 영역', '<header> — 독립 기사 콘텐츠', 1),
    (5, '<article> 요소를 사용하기에 가장 적합한 예시는?', 1, '중', '블로그 글 한 편', '페이지 상단 로고 영역', '사이트 전역 검색 폼', '레이아웃 용 빈 div', 1),
    (6, '시맨틱 태그 사용의 주요 장점이 아닌 것은?', 4, '중', 'SEO 개선', '보조 기술 접근성 향상', '코드 가독성 향상', '무조건 더 빠른 렌더링 보장', 1),
    (7, '다음 코드 중 문법적으로 유효한 것은?', 1, '상', '<header><h1>T</h1></header><main><section>…</section></main>', '<main><header>…</header></main>', '<nav><main>…</main></nav>', '<footer><header>…</header></footer>', 1),
    (8, '올바르지 않은 요소 중첩은?', 4, '상', '<article><section></section></article>', '<nav><ul><li></li></ul></nav>', '<header><h1></h1><p></p></header>', '<footer><main></main></footer>', 1),
    (9, 'HTML5 아웃라인 알고리즘을 고려할 때 <section> 내부에서 첫 제목으로 가장 적절한 헤딩 수준은?', 1, '상', '<h1>', '<h2>', '<h3>', '<h4>', 1),
    (10, '<main> 요소에 대한 설명으로 옳은 것은?', 2, '상', '문서에 여러 개 포함될 수 있다', '페이지 핵심 콘텐츠를 담으며 유일해야 한다', 'section 요소 안에 중첩될 수 있다', '검색 엔진이 무시하도록 하는 주석 용도이다', 1),
    (11, '단락(문단)을 나타내는 대표적인 블록 요소는?', 1, '하', '<p>', '<span>', '<li>', '<br>', 1),
    (12, '한 줄 내에서 별도 의미 없이 인라인 컨테이너 역할을 하는 태그는?', 1, '하', '<span>', '<div>', '<p>', '<pre>', 1),
    (13, '순서가 없는 목록을 생성하는 요소는?', 1, '하', '<ul>', '<ol>', '<dl>', '<list>', 1),
    (14, '<ol start="5">로 설정했을 때 첫 번째 목록 항목 번호는?', 1, '중', '5', '0', '1', 'A', 1),
    (15, '의미론적 “강조”를 전달하며 스크린 리더가 음성 톤 변화를 줄 수 있는 인라인 요소는?', 1, '중', '<em>', '<i>', '<span>', '<b>', 1),
    (16, '다음 중 정의 목록의 올바른 기본 구조는?', 1, '중', '<dl><dt>용어</dt><dd>정의</dd></dl>', '<dt><dl>용어</dl><dd>정의</dd>', '<dl><dd>정의</dd><dt>용어</dt></dl>', '<ul><li>용어 - 정의</li></ul>', 1),
    (17, '다음 중 유효하지 않은 중첩 목록 구조는?', 2, '상', '<ul><li>Item<ol><li>Sub</li></ol></li></ul>', '<ul><ol><li>Sub</li></ol></ul>', '<ol><li>Item<ul><li>Sub</li></ul></li></ol>', '<ul><li>Item<ul><li>Sub</li></ul></li></ul>', 1),
    (18, '<strong> 요소와 동일한 의미론적 중요도를 제공하지 않는 태그는?', 1, '상', '<b>', '<em>', '<mark>', '<i>', 1),
    (19, '<pre> 요소에 대한 설명으로 옳은 것은?', 1, '상', '공백과 줄바꿈을 그대로 유지한다', '모든 브라우저에서 인라인 요소로 렌더된다', '텍스트를 자동 줄바꿈해 공간을 최소화한다', 'HTML 태그를 자동 이스케이프한다', 1),
    (20, 'reversed 속성이 설정된 <ol> 요소의 기능은?', 1, '상', '목록 번호를 역순으로 표시한다', '번호 대신 라틴 문자(A, B, C)로 표시한다', '목록을 가로로 배치한다', '짝수 번호만 출력한다', 1),
    (21, '이미지를 삽입할 때 사용하는 대표 인라인 요소는?', 1, '하', '<img>', '<picture>', '<figure>', '<video>', 1),
    (22, 'img 요소의 alt 속성 주 목적은?', 1, '하', '시각 장애인 접근성 대체 텍스트 제공', '이미지 자동 크롭 지정', 'SEO 제외 요청', 'CSS 클래스 지정', 1),
    (23, 'video 태그에 사용자 재생 버튼을 표시하려면 필수인 속성은?', 1, '하', 'controls', 'autoplay', 'loop', 'muted', 1),
    (24, 'picture 요소 내부에서 뷰포트 너비별로 다른 소스를 명시하는 태그는?', 1, '중', '<source>', '<img>', '<link>', '<meta>', 1),
    (25, 'audio preload="none"으로 설정 시 브라우저 동작은?', 1, '중', '오디오 데이터 선로드 안 함', '전체 파일 즉시 다운로드', '메타데이터와 일부 버퍼 선로드', '자동 재생 준비', 1),
    (26, 'iframe 요소에서 외부 페이지가 현재 문서를 조작하지 못하도록 제한하는 속성은?', 1, '중', 'sandbox', 'allow', 'referrerpolicy', 'loading', 1),
    (27, '모바일에서 무음 자동 재생을 보장하려면 video 태그에 일반적으로 필요한 속성 조합은?', 1, '상', 'autoplay + muted', 'autoplay + loop', 'muted + controls', 'loop + poster', 1),
    (28, 'track 요소 kind="subtitles"가 제공하는 정보는?', 1, '상', '사용자 언어 번역 자막', '비디오 썸네일', '광고 삽입 지점', 'DRM 키', 1),
    (29, '외부 3rd-party 콘텐츠(예: YouTube) 삽입 시 Living Standard가 권장하는 기본 요소는?', 1, '상', '<iframe>', '<embed>', '<object>', '<param>', 1),
    (30, 'srcset과 sizes를 사용한 img 동작 설명 중 옳지 않은 것은?', 2, '상', 'DPR·뷰포트에 따라 가장 적합한 소스를 선택한다', '모든 소스를 미리 다운로드해 캐시에 저장한다', 'sizes는 레이아웃 너비 힌트를 제공한다', 'srcset은 해상도/너비 조건별 URL 목록을 제공한다', 1),
    (31, 'form 요소에서 action 속성을 생략하면 기본으로 사용되는 전송 대상은?', 1, '하', '현재 문서의 URL', '브라우저 홈 페이지', '/index.html', '전송이 차단되고 오류가 난다', 1),
    (32, '사용자 입력이 이메일 형식(예: user@example.com)인지 자동 검증하려면 어떤 input 타입을 사용해야 하는가?', 1, '하', 'email', 'text', 'url', 'search', 1),
    (33, '서로 배타적인 여러 Radio 버튼을 그룹화하려면 반드시 일치해야 하는 속성은?', 1, '하', 'name', 'id', 'value', 'for', 1),
    (34, '브라우저 기본 제출 버튼 역할을 하는 요소/속성 조합으로 올바른 것은?', 1, '중', '<button type="submit">', '<input type="button">', '<a href="/submit">', '<div role="submit">', 1),
    (35, 'label 요소와 폼 컨트롤을 연계할 때 필수로 동일해야 하는 속성 쌍은?', 1, '중', 'label의 for ↔ 컨트롤의 id', 'label의 id ↔ 컨트롤의 name', 'label의 name ↔ 컨트롤의 value', 'label의 for ↔ 컨트롤의 name', 1),
    (36, '폼 자동 완성 기능을 명시적으로 비활성화하려면 어떤 속성 값을 사용해야 하는가?', 1, '중', 'autocomplete="off"', 'autofill="false"', 'complete="none"', 'disable="autocomplete"', 1),
    (37, '사용자가 하나 이상의 항목을 체크할 수 있으며 값은 on/off로 전송되는 컨트롤은?', 1, '상', '<input type="checkbox">', '<input type="radio">', '<select>', '<input type="range">', 1),
    (38, '다중 선택이 가능한 <select> 요소를 만들기 위해 추가해야 할 필수 속성은?', 1, '상', 'multiple', 'size="1"', 'data-multi="true"', 'selection="many"', 1),
    (39, 'input 요소의 pattern 속성에 정규식을 지정했을 때, 사용자가 패턴에 맞지 않는 값을 입력하고 제출하면 발생하는 기본 동작은?', 1, '상', '브라우저가 제출을 막고 오류 메시지를 표시한다', '서버로 전송되지만 “pattern” 문자열이 함께 포함된다', '브라우저가 값을 빈 문자열로 바꾼 뒤 전송한다', 'pattern 속성은 단순 주석이므로 아무 효과가 없다', 1),
    (40, 'form 요소에 novalidate 속성을 설정하면 어떤 결과가 발생하는가?', 1, '상', 'HTML5 내장 검증을 건너뛰고 즉시 제출한다', '모든 required 속성이 자동으로 제거된다', '서버가 클라이언트 검증 스크립트를 주입한다', '브라우저가 파일 업로드를 차단한다', 1),
    (41, 'HTML 테이블에서 한 행을 나타내는 요소는?', 1, '하', '<tr>', '<th>', '<td>', '<tbody>', 1),
    (42, '표의 열 제목(헤더 셀)을 표현하는 시맨틱 태그는?', 1, '하', '<th>', '<td>', '<caption>', '<colgroup>', 1),
    (43, 'HTML5에서 문서의 문자 인코딩을 선언하기 위한 표준 태그는?', 1, '하', '<meta charset="UTF-8">', '<meta http-equiv="content-type" content="text/html;charset=utf-8">', '<charset>', '<meta encoding="utf-8">', 1),
    (44, '표 머리글 행들을 의미론적으로 그룹화할 때 사용하는 요소는?', 1, '중', '<thead>', '<head>', '<tablehead>', '<caption>', 1),
    (45, '다음 meta 태그는 어떤 역할을 하는가? <meta name="viewport" content="width=device-width, initial-scale=1">', 1, '중', '모바일 화면에서 레이아웃 스케일·줌 동작 제어', '문서 문자 인코딩 설정', '검색 엔진 색인 방지', '쿠키 보안 속성 지정', 1),
    (46, '테이블과 논리적으로 연결된 제목을 제공하기 위한 요소는?', 1, '중', '<caption>', '<title>', '<header>', '<summary>', 1),
    (47, '복잡한 표에서 특정 열의 모든 셀에 적용되는 헤더 셀의 scope 값으로 적절한 것은?', 1, '상', 'col', 'row', 'rowgroup', 'auto', 1),
    (48, '여러 헤더 셀과 관계를 맺는 데이터 셀(td)을 명시적으로 연결할 때 사용하는 속성은?', 1, '상', 'headers', 'scope', 'aria-label', 'colspan', 1),
    (49, 'HTML5에서 <summary> 속성이 더 이상 허용되지 않으므로, 복합 표 요약 정보를 제공하려면 권장되는 방법은?', 1, '상', 'table 요소에 aria-describedby 속성으로 숨은 요약 요소의 id 연결', 'summary="요약" 속성을 계속 사용', '헤더 셀에 data-summary 속성 추가', 'tfoot 내부에 요약 문자열 삽입', 1),
    (50, '다음 중 테이블의 내부 섹션을 사양 순서대로 올바르게 배치한 것은?', 1, '상', '<caption> → <colgroup> → <thead> → <tbody> → <tfoot>', '<thead> → <caption> → <colgroup> → <tbody> → <tfoot>', '<caption> → <thead> → <colgroup> → <tfoot> → <tbody>', '<caption> → <colgroup> → <tbody> → <thead> → <tfoot>', 1),
    (51, '모든 요소에 스타일을 적용하려면 어떤 CSS 선택자를 사용해야 하는가?', 1, '하', '*', '.', '#', '%', 2),
    (52, '클래스 선택자를 선언할 때 사용하는 접두사는?', 1, '하', '.', '#', '@', '&', 2),
    (53, 'p 요소의 직접 자식 span만 선택하려면 올바른 선택자는?', 1, '하', 'p > span', 'p span', 'p + span', 'p ~ span', 2),
    (54, '다음 중 href 속성이 "https://"로 시작하는 a 요소를 선택하는 올바른 방법은?', 1, '중', 'a[href^="https://"]', 'a[href$="https://"]', 'a[href*="https://"]', 'a[href]', 2),
    (55, '다음 셀렉터 중 가장 높은 우선순위(specificity)를 가지는 것은?', 1, '중', '#header .nav li a', '.header-nav > a', 'div#header', 'a.btn-primary', 2),
    (56, '첫 줄에만 스타일을 적용할 때 사용하는 시맨틱 선택자는?', 1, '중', '::first-line', ':first-letter', ':first-of-type', '::before', 2),
    (57, 'button 요소 중 data-role="primary" 이 아니면서 disabled 속성이 없는 경우를 선택하는 올바른 선택자는?', 1, '상', 'button[data-role="primary"]:not([disabled])', 'button:not([data-role="primary"]):disabled', 'button[data-role!="primary"]:disabled', 'button!:primary:not(disabled)', 2),
    (58, 'li:nth-child(2n+1) 선택자가 선택하는 항목은?', 1, '상', '홀수 번째 li (1,3,5 …)', '짝수 번째 li (2,4,6 …)', '3의 배수 li', '첫 번째 li 하나만', 2),
    (59, ':not(.hidden) 선택자의 우선순위는 다음 중 무엇과 동일한가?', 1, '상', '클래스 선택자 하나', '아이디 선택자 하나', '요소(태그) 선택자 하나', '인라인 스타일', 2),
    (60, '[lang|="en"] 속성 선택자가 선택하는 요소는?', 1, '상', 'lang 값이 "en"이거나 "en-"으로 시작하는 요소', 'lang 값에 "en" 문자열이 포함된 모든 요소', 'lang 값이 "-en"으로 끝나는 요소', 'lang 값이 정확히 "en-US"인 요소만', 2),
    (61, '박스 모델에서 콘텐츠(content) 영역 바로 바깥에 위치한 영역은?', 1, '하', 'padding', 'margin', 'border', 'outline', 2),
    (62, '요소에 width: 200px; padding: 10px; border: 5px solid; box-sizing: border-box; 를 지정했다. 요소의 총 렌더링 너비는?', 2, '하', '230px', '200px', '210px', '220px', 2),
    (63, '연속된 두 p 요소가 있을 때, 첫 번째 요소의 margin-bottom이 20px이고 두 번째 요소의 margin-top이 30px이다. 실제 두 요소 사이의 간격은?', 2, '하', '50px', '30px', '20px', '0px', 2),
    (64, 'position: absolute; 가 지정된 요소의 좌표 기준은 기본적으로 어디인가?', 1, '중', '가장 가까운 position 값이 static이 아닌 조상 요소', '브라우저 뷰포트', 'body 요소', '가장 가까운 flex 컨테이너', 2),
    (65, '다음 중 Block Formatting Context(BFC)를 생성하지 않는 선언은?', 4, '중', 'overflow: hidden;', 'float: left;', 'display: inline-block;', 'position: relative;', 2),
    (66, 'z-index 속성을 사용해 레이어 순서를 제어하려면, 일반적으로 요소가 어떤 상태여야 하는가?', 2, '중', 'position이 static이어야 한다', 'position이 relative/absolute/fixed/sticky 중 하나여야 한다', 'display가 inline-block이어야 한다', 'opacity가 1보다 작아야 한다', 2),
    (67, '왼쪽(float:left)으로 부유한 이미지 아래의 문단이 이미지 주위를 감싸지 않도록 하려면 문단에 어떤 clear 값을 적용해야 하는가?', 1, '상', 'clear:left;', 'clear:right;', 'clear:both;', 'clear:none;', 2),
    (68, 'outline 속성에 대한 설명으로 옳은 것은?', 1, '상', 'outline은 요소의 박스 모델 크기에 포함되지 않는다', 'outline은 각 면마다 두께를 다르게 설정할 수 있다', 'outline은 border-radius 값을 따른다', 'outline 속성은 상속된다', 2),
    (69, 'overflow 속성 값 중 내용이 넘칠 때만 스크롤바를 표시하고 평소에는 숨기는 값은?', 1, '상', 'auto', 'scroll', 'hidden', 'visible', 2),
    (70, '다음 중 새로운 stacking context를 만들지 않는 선언은?', 4, '상', 'transform: translateX(10px);', 'opacity: 0.8;', 'position: fixed;', 'overflow: auto;', 2),
    (71, '요소를 Flexbox 컨테이너로 만들기 위한 필수 선언은?', 1, '하', 'display: flex;', 'flex-direction: row;', 'display: grid;', 'position: flex;', 2),
    (72, 'Flexbox에서 주축(main axis) 방향 정렬을 제어하는 속성은?', 1, '하', 'justify-content', 'align-items', 'align-content', 'order', 2),
    (73, 'flex-direction: column;을 설정하면 메인 축(main axis)은 기본적으로 어떤 방향으로 흐르는가?', 1, '하', '위 → 아래', '왼쪽 → 오른쪽', '오른쪽 → 왼쪽', '아래 → 위', 2),
    (74, 'Flex 항목이 한 줄을 넘을 때 줄바꿈을 허용하려면 올바른 선언은?', 1, '중', 'flex-wrap: wrap;', 'white-space: nowrap;', 'overflow-wrap: break-word;', 'flex-flow: nowrap;', 2),
    (75, 'flex 항목의 시각적 순서를 제어하는 order 속성의 기본값은?', 1, '중', '0', '1', '-1', 'auto', 2),
    (76, '개별 Flex 항목이 컨테이너의 align-items 값을 무시하고 자체 교차축 정렬을 지정하려면 어떤 속성을 사용해야 하는가?', 1, '중', 'align-self', 'justify-self', 'flex-basis', 'place-items', 2),
    (77, '세 개의 동일 너비 Grid 열을 생성하는 올바른 선언은?', 1, '중', 'grid-template-columns: repeat(3, 1fr);', 'grid-columns: 1fr 1fr 1fr;', 'grid: auto / 1fr 1fr 1fr;', 'grid-template-rows: repeat(3, 1fr);', 2),
    (78, 'Grid·Flex 컨테이너 모두에서 행과 열 간 간격을 동시에 설정할 수 있는 단일 속성은?', 1, '상', 'gap', 'row-gap', 'column-gap', 'spacing', 2),
    (79, 'grid-auto-flow 속성 값 중 아이템을 열 단위로 자동 배치하도록 지시하는 값은?', 1, '상', 'column', 'row', 'dense', 'auto', 2),
    (80, 'Inline-level Grid 컨테이너를 생성하려면 어떤 display 값을 사용해야 하는가?', 1, '상', 'inline-grid', 'grid-inline', 'inline-flex', 'inline-block', 2),
    (81, '글자 색상을 빨간색으로 지정하는 올바른 CSS 선언은?', 1, '하', 'color: red;', 'background-color: red;', 'font-color: red;', 'text-color: #red;', 2),
    (82, '다음 중 3자리 HEX 색상으로 올바르게 표현한 것은?', 1, '하', '#0af', '#00aaFF', '#0aFf', '#ggg', 2),
    (83, '50% 투명 빨간색을 나타내는 올바른 rgba() 표기는?', 1, '하', 'rgba(255, 0, 0, 0.5)', 'rgba(255, 0, 0, 50)', 'rgba(255, 0, 0, .05)', 'rgb(255, 0, 0, 0.5)', 2),
    (84, '굵기(bold)가 시각적으로 표준인 700에 해당하는 font-weight 값은?', 1, '중', '700', '500', '600', '1000', 2),
    (85, '문단의 줄 간격을 조절할 때 사용하는 CSS 속성은?', 1, '중', 'line-height', 'letter-spacing', 'word-spacing', 'text-indent', 2),
    (86, '다음 중 background 속성의 shorthand 문법으로 유효한 예시는?', 2, '중', 'background: center / cover url("hero.jpg") repeat;', 'background: url("hero.jpg") center / cover no-repeat fixed;', 'background: cover center url("hero.jpg") no-repeat;', 'background: fixed no-repeat url("hero.jpg") / contain center;', 2),
    (87, 'CSS 사용자 정의 속성(변수)을 요소에 적용할 때 올바른 표기는?', 1, '상', 'color: var(--primary);', 'color: $primary;', 'color: var(primary);', 'color: --primary;', 2),
    (88, '선형 그라디언트에서 좌측 상단 → 우측 하단 방향을 지정하는 올바른 값은?', 1, '상', 'linear-gradient(to bottom right, red, blue)', 'linear-gradient(45deg, red, blue)', 'linear-gradient(to top left, red, blue)', 'linear-gradient(right bottom, red, blue)', 2),
    (89, '여러 개의 background 이미지를 지정할 때, 시각적으로 맨 위에 표시되는 것은?', 1, '상', 'background 속성에 나열된 첫 번째 이미지', 'background 속성에 나열된 마지막 이미지', '가장 해상도가 높은 이미지', '가장 작은 파일 크기의 이미지', 2),
    (90, 'em 단위와 rem 단위 차이에 대한 설명으로 옳은 것은?', 1, '상', 'rem은 항상 root(html) 요소의 글꼴 크기를 기준으로 한다', 'em은 언제나 1rem과 동일하다', 'rem은 상속된 부모 요소의 폰트 크기를 기준으로 한다', 'em은 root 요소의 폰트 크기를 무시한다', 2),
    (91, 'transition 속성에서 애니메이션 가속 곡선을 지정하는 데 사용하는 하위 속성은?', 1, '하', 'transition-timing-function', 'transition-delay', 'transition-property', 'transition-duration', 2),
    (92, '다음 애니메이션 선언에서 animation-iteration-count 값을 무한 반복으로 설정하려면 올바른 값은? animation: spin 1s linear _____;', 1, '하', 'infinite', 'forever', 'loop', '0', 2),
    (93, '@keyframes 규칙에서 from 과 to 키워드는 각각 어떤 백분율에 해당하는가?', 1, '하', '0%와 100%', '25%와 75%', '50%와 100%', '100%와 0%', 2),
    (94, '다음 선언 중 애니메이션이 끝난 후 마지막 프레임 상태를 유지하려면 어떤 속성을 추가해야 하는가? animation: fade 2s ease;', 1, '중', 'animation-fill-mode: forwards;', 'animation-direction: reverse;', 'animation-play-state: paused;', 'animation-delay: 2s;', 2),
    (95, 'transition: opacity 200ms ease-in-out 50ms; 선언에서 50ms는 어떤 의미인가?', 1, '중', '지연(delay)', '총 지속 시간(duration)', '가속 곡선(timing-function)', '전환 대상 속성(property)', 2),
    (96, '사용자가 페이지에 마우스를 올렸을 때 애니메이션을 일시 정지하려면 버튼:hover { _____: paused; } 빈칸에 들어갈 속성은?', 1, '중', 'animation-play-state', 'animation-status', 'animation-mode', 'animation-state', 2),
    (97, '다음 중 GPU 가속을 활용하여 부드러운 애니메이션을 만들기 위해 흔히 권장되는 속성은?', 1, '상', 'transform', 'top', 'margin-left', 'width', 2),
    (98, '미디어쿼리 prefer-reduced-motion 에 대한 설명으로 옳은 것은?', 1, '상', '사용자가 움직임 감소를 선호하면 true가 된다', '브라우저 창 크기를 줄였을 때 트리거된다', '고해상도 화면에서만 동작한다', '모바일 기기에서만 지원된다', 2),
    (99, '@media only screen and (max-width: 600px) { … } 규칙은 어떤 상황에서 적용되는가?', 1, '상', '뷰포트 너비가 600px 이하일 때', '뷰포트 너비가 600px 이상일 때', '고대비 모드일 때', '사용자가 다크 모드를 켰을 때', 2),
    (100, 'vh 단위 50vh는 무엇을 의미하는가?', 1, '상', '뷰포트 높이의 50%', '부모 요소 높이의 50%', '문서 전체 높이의 50%', '뷰포트 너비의 50%', 2),
    (101, 'JavaScript에서 변수를 선언할 수 없는 키워드는?', 4, '하', 'let', 'const', 'var', 'define', 3),
    (102, '다음 중 JavaScript의 숫자형 타입은?', 1, '하', 'Number', 'Int', 'Float', 'Decimal', 3),
    (103, '문자열을 나타내는 방법으로 올바르지 않은 것은?', 4, '하', '''Hello''', '"Hello"', '`Hello`', '<Hello>', 3),
    (104, 'undefined와 null의 차이에 대한 설명으로 옳은 것은?', 2, '중', '둘 다 같은 의미이다', 'undefined는 값이 할당되지 않음', 'null은 정의되지 않음', 'undefined는 명시적 초기화', 3),
    (105, 'typeof null의 결과는?', 1, '중', 'object', 'null', 'undefined', 'string', 3),
    (106, 'JavaScript에서 템플릿 리터럴은 무엇으로 묶는가?', 3, '중', '''', '"', '`', '~', 3),
    (107, 'NaN은 어떤 상황에서 발생하는가?', 1, '상', '숫자 나누기 문자', '0 나누기 0', '문자 더하기 숫자', 'undefined와 연산', 3),
    (108, 'const로 선언된 변수는 어떤 특징이 있는가?', 3, '상', '재선언 가능', '값 변경 가능', '블록 스코프', '자동 초기화', 3),
    (109, '다음 중 falsy 값이 아닌 것은?', 4, '상', '0', '''''', 'false', '''false''', 3),
    (110, 'JavaScript에서 세미콜론(;)은 언제 필수인가?', 3, '상', '항상', '절대로 필요 없음', '문장 끝', '객체 안에서', 3),
    (111, 'JavaScript에서 조건문 if를 작성할 때 사용하는 키워드는?', 2, '하', 'when', 'if', 'cond', 'case', 3),
    (112, '조건문에서 여러 조건을 연결하는 연산자는?', 3, '하', '&', '|', '&&', '==', 3),
    (113, 'switch 문에서 각 조건을 나타내는 키워드는?', 1, '하', 'case', 'when', 'option', 'check', 3),
    (114, 'for 루프를 종료하는 키워드는?', 4, '중', 'skip', 'stop', 'continue', 'break', 3),
    (115, '반복문의 조건을 건너뛰고 다음 반복으로 이동하는 키워드는?', 3, '중', 'skip', 'next', 'continue', 'redo', 3),
    (116, 'while 반복문의 조건이 false이면?', 3, '중', '무한 반복', '한 번 실행', '실행 안 됨', '오류 발생', 3),
    (117, 'do...while 루프의 특징으로 옳은 것은?', 3, '상', '조건을 먼저 검사', '조건이 true면 반복 안 함', '무조건 한 번 실행', '사용 불가', 3),
    (118, 'switch 문에서 break를 생략하면?', 3, '상', '에러 발생', '기본값 실행', '다음 case까지 실행', '루프 종료', 3),
    (119, '다음 중 삼항 연산자의 형식으로 올바른 것은?', 1, '상', '조건 ? 참 : 거짓', '조건 : 참 ? 거짓', '조건 ? 거짓 : 참', 'if ? then : else', 3),
    (120, 'for (let i = 0; i < 5; i++)에서 i++의 의미는?', 2, '상', 'i를 1로 설정', 'i를 1씩 증가', 'i를 출력', 'i를 감소', 3),
    (121, 'JavaScript에서 함수를 선언하는 키워드는?', 2, '하', 'method', 'function', 'define', 'func', 3),
    (122, '함수를 실행하려면 어떻게 해야 하는가?', 3, '하', 'call()', 'invoke()', '함수명()', 'do()', 3),
    (123, '함수 내에서 사용된 변수는 기본적으로 어떤 스코프를 가지는가?', 2, '하', '전역', '지역', '블록', '클래스', 3),
    (124, '화살표 함수의 기본 형태로 올바른 것은?', 2, '중', 'function => {}', '() => {}', '-> {}', '{} => ()', 3),
    (125, '함수 표현식은 어떤 변수 키워드와 함께 자주 사용되는가?', 4, '중', 'let', 'const', 'var', '모두 해당', 3),
    (126, 'return 키워드의 기능은?', 2, '중', '함수를 종료', '값을 반환', '다음 반복으로 이동', '코드를 건너뜀', 3),
    (127, '화살표 함수에서 this는 무엇을 참조하는가?', 4, '상', '전역 객체', '함수 자신', '호출 컨텍스트', '화살표 함수는 this를 가지지 않음', 3),
    (128, '즉시 실행 함수(IIFE)의 형식으로 맞는 것은?', 3, '상', 'function(){}', '() => {}', '(function() {})()', '{}();', 3),
    (129, '함수에서 매개변수를 생략하면?', 2, '상', '에러 발생', 'undefined로 처리', '0으로 초기화', 'null로 초기화', 3),
    (130, '함수 내부에서 정의된 함수는 어떤 범위를 가지는가?', 3, '상', '전역', '함수 외부', '지역', 'DOM', 3),
    (131, 'JavaScript에서 배열을 생성하는 방법으로 옳은 것은?', 1, '하', 'var a = [];', 'var a = {};', 'var a = ()', 'var a = <>;', 3),
    (132, '객체에서 속성에 접근하는 방법은?', 2, '하', 'obj->key', 'obj.key', 'obj-key', 'obj:key', 3),
    (133, '다음 중 배열에 요소를 추가하는 메서드는?', 1, '하', 'push()', 'pop()', 'shift()', 'splice()', 3),
    (134, '객체의 속성 값을 삭제하는 키워드는?', 2, '중', 'remove', 'delete', 'clear', 'drop', 3),
    (135, '배열의 모든 요소에 대해 반복 실행하는 메서드는?', 2, '중', 'map()', 'forEach()', 'filter()', 'reduce()', 3),
    (136, '객체의 모든 키를 배열로 반환하는 메서드는?', 2, '중', 'Object.values()', 'Object.keys()', 'Object.entries()', 'Object.map()', 3),
    (137, '배열에서 요소를 제거하는 pop()은 어느 쪽 요소를 제거하는가?', 3, '상', '처음', '중간', '마지막', '랜덤', 3),
    (138, '배열의 길이를 반환하는 속성은?', 3, '상', 'size', 'count', 'length', 'items', 3),
    (139, '객체의 속성과 값을 모두 배열 형태로 반환하는 메서드는?', 3, '상', 'Object.keys()', 'Object.values()', 'Object.entries()', 'Object.toArray()', 3),
    (140, '배열의 복사를 위한 메서드로 적절한 것은?', 1, '상', 'slice()', 'splice()', 'pop()', 'map()', 3),
    (141, 'HTML 요소를 JavaScript로 가져올 때 사용하는 메서드는?', 3, '하', 'getElement()', 'query()', 'getElementById()', 'fetchElement()', 3),
    (142, '다음 중 이벤트 리스너 등록 메서드는?', 3, '하', 'addEvent()', 'setEvent()', 'addEventListener()', 'eventListen()', 3),
    (143, '버튼 클릭 시 실행되는 이벤트 타입은?', 3, '하', 'hover', 'mousedown', 'click', 'submit', 3),
    (144, '다음 중 innerText와 유사한 속성은?', 3, '중', 'textValue', 'htmlText', 'textContent', 'innerHTML', 3),
    (145, '이벤트 객체에서 발생한 요소를 참조하는 속성은?', 1, '중', 'target', 'source', 'caller', 'element', 3),
    (146, '이벤트 전파를 막는 메서드는?', 2, '중', 'preventDefault()', 'stopPropagation()', 'cancelEvent()', 'blockEvent()', 3),
    (147, 'DOMContentLoaded 이벤트는 언제 발생하는가?', 3, '상', '페이지 로딩 시작 시', '스크립트 로딩 완료 시', 'DOM 트리 완성 시', '이미지 로딩 완료 시', 3),
    (148, 'innerHTML 속성의 특징으로 옳은 것은?', 3, '상', '보안에 강함', '텍스트만 출력', 'HTML 태그 포함 출력', '읽기 전용', 3),
    (149, 'HTML 요소 클래스 추가 시 사용하는 메서드는?', 4, '상', 'addClass()', 'appendClass()', 'classAdd()', 'classList.add()', 3),
    (150, '폼 제출 시 기본 동작을 막으려면?', 2, '상', 'event.stopPropagation()', 'event.preventDefault()', 'return false', 'event.block()', 3),
    (151, '다음 선언에서 변수 greeting 의 타입은? let greeting: string = "hello";', 1, '하', 'string', 'any', 'String (래퍼 객체)', 'never', 4),
    (152, 'number[] 타입과 완전히 같은 의미를 갖는 배열 선언은?', 1, '하', 'Array<number>', 'ReadonlyArray<number>', 'Array<any>', 'boolean[]', 4),
    (153, '타입 단언(as)을 올바르게 사용한 예시는?', 1, '하', 'const el = document.getElementById("app") as HTMLDivElement;', 'const num = "3" as number[];', 'const flag = (true) as never;', 'let v = 1; v as;', 4),
    (154, 'unknown 과 any 의 차이에 대한 설명 중 옳은 것은?', 1, '중', 'unknown 값은 사용 전 타입 좁히기(narrowing)가 필요하다', 'any 값은 컴파일 단계에서 아무 연산도 허용되지 않는다', 'unknown 은 런타임에만 존재하는 타입이다', 'any 로 선언된 변수는 자동으로 never 로 업캐스트된다', 4),
    (155, '다음 함수의 반환 타입으로 가장 적절한 것은? function fail(msg: string) { throw new Error(msg); }', 1, '중', 'never', 'void', 'undefined', 'unknown', 4),
    (156, 'enum Color { Red, Green, Blue } 선언에서 Color.Green 의 값은?', 1, '중', '1', '0', '"Green"', 'undefined', 4),
    (157, '다음 중 튜플 타입을 올바르게 선언한 것은?', 1, '상', 'let point: [number, number] = [1, 2];', 'let point: (number, number) = 1, 2;', 'let point = [number, number];', 'let point: number[] = [1, "2"];', 4),
    (158, 'const assertion을 활용해 모든 프로퍼티를 읽기 전용 리터럴로 만드는 예시는? const cfg = _____;', 1, '상', '{ mode: "dark" } as const', 'as const { mode: "dark" }', '{ mode: "dark" } as readonly', 'const { mode: "dark" }', 4),
    (159, '다음 코드에서 Keys 타입은 무엇이 되는가? enum E { A, B, C } type Keys = keyof typeof E;', 1, '상', '"A" | "B" | "C"', '0 | 1 | 2', 'E', 'keyof E (컴파일 오류)', 4),
    (160, 'const str = "hello"; 변수 str 의 타입 추론 결과는?', 1, '상', '"hello" (리터럴 타입)', 'string', 'any', 'never', 4),
    (161, '다음 화살표 함수에서 TypeScript가 추론한 반환 타입은? const add = (a: number, b: number) => a + b;', 1, '하', 'number', 'void', 'any', 'never', 4),
    (162, '‘나머지 매개변수’(rest parameter)를 올바르게 선언한 예시는?', 1, '하', 'function sum(...nums: number[]): number { /*...*/ }', 'function sum(nums...: number): number { /*...*/ }', 'function sum(..nums: number[]): number { /*...*/ }', 'function sum(nums:number) ...rest { /*...*/ }', 4),
    (163, '다음 함수 호출 시 컴파일 오류가 발생하지 않도록 하려면 f에 필요한 오버로드 시그니처는? f("hi"); f(1, 2);', 1, '하', 'function f(str: string): void; function f(a: number, b: number): void;', 'function f(arg: string | number): void;', 'function f(...args: any[]): void;', 'function f(str: string, num: number): void;', 4),
    (164, '제네릭 함수 identity<T>(value: T): T 를 호출한 결과의 타입은? const x = identity<string>("abc");', 1, '중', 'string', 'T', 'any', 'void', 4),
    (165, '제네릭 제약(Constraint)을 올바르게 사용한 예시는?', 1, '중', 'function logLength<T extends { length: number }>(arg: T): number { return arg.length; }', 'function logLength<T = { length: number }>(arg: T): number { return arg.length; }', 'function logLength<T super { length: number }>(arg: T): number { return arg.length; }', 'function logLength<T implements Lengthable>(arg: T): number { return arg.length; }', 4),
    (166, '`this` 매개변수 타입을 명시해 오류를 방지한 올바른 선언은?', 1, '중', 'function handler(this: void, e: Event): void { /*...*/ }', 'function handler(e: Event, this): void { /*...*/ }', 'function handler(this Event, e): void { /*...*/ }', 'function handler(e: Event): this { /*...*/ }', 4),
    (167, '다음 코드에서 T의 기본 타입 매개변수가 string이 되도록 올바른 선언은?', 1, '중', 'function wrap<T = string>(value?: T): T[] { return [value as T]; }', 'function wrap<T extends string>(value: T = ""): T[] { return [value]; }', 'function wrap<T defaults string>(value?: T): T[] { return [value]; }', 'function wrap<T string>(value?: T): T[] { return [value]; }', 4),
    (168, 'TypeScript 함수 오버로드에서 ‘구현부(implementation)’에 대해 옳은 설명은?', 1, '상', '선언된 여러 시그니처 뒤에 단 하나만 존재해야 한다', '오버로드마다 구현을 따로 작성해야 한다', '구현부의 매개변수는 반드시 any 타입이어야 한다', '구현부는 export 되어서는 안 된다', 4),
    (169, '다음 함수는 왜 컴파일 오류가 나는가? function foo(a?: number, b: number) {}', 1, '상', '선택 매개변수는 필수 매개변수 뒤에 올 수 없다', 'number 타입에는 선택 여부를 지정할 수 없다', 'void 반환형을 명시하지 않았다', '매개변수가 두 개 이상이면 반드시 rest 사용', 4),
    (170, '다음 제네릭 함수에서 T가 string | number 일 때 반환 타입은? function toArray<T>(value: T): T[] { return [value]; }', 1, '상', '(string | number)[]', 'string[] | number[]', 'never[]', 'any[]', 4),
    (171, '다음 중 인터페이스 선언으로 올바른 것은?', 1, '하', 'interface User { id: number; name?: string }', 'interface = User { id number; }', 'type interface User = { id: number }', 'interface User: { id; number }', 4),
    (172, '타입 별칭으로 제네릭을 선언할 때 올바른 문법은?', 1, '하', 'type Box<T> = { value: T };', 'alias Box<T> { value: T }', 'type<T> Box = { value: T }', 'typedef Box<T> = { value: T };', 4),
    (173, '`type Keys = keyof { a: string; b: number }` 의 결과는?', 1, '하', '"a" | "b"', 'string | number', '"a" & "b"', 'any', 4),
    (174, '인터섹션 타입 A & B 에 대한 설명으로 옳은 것은?', 1, '중', 'A 와 B 모두의 프로퍼티를 가진 타입이다', 'A 와 B 중 하나를 선택한 유니언이다', '런타임에 자동으로 객체를 병합한다', '중복 프로퍼티가 있으면 never 타입이 된다', 4),
    (175, '다음 유니언 타입을 차별화(discriminated) 하기 위한 공통 프로퍼티는?', 1, '중', 'kind', 'length', 'value', 'type', 4),
    (176, '다음 매핑된 타입 선언의 효과는? type Readonly<T> = { readonly [K in keyof T]: T[K] };', 1, '중', '모든 프로퍼티를 readonly 로 만든다', '모든 프로퍼티를 선택적(optional)으로 만든다', '프로퍼티를 제거한다', '함수 타입으로 변환한다', 4),
    (177, '조건부 타입 T extends string ? string : number 에서 T가 boolean일 때 평가 결과는?', 1, '상', 'number', 'string', 'boolean', 'never', 4),
    (178, '분배 조건부 타입에서 never가 결과로 나오지 않도록 하려면 사용하는 래퍼(Wrapper) 기법은?', 1, '상', '튜플로 감싸기 `[T]`', 'Partial<T> 적용', 'keyof T 사용', 'as const 단언', 4),
    (179, '다음 인터페이스가 있을 때 Optional<T> 의 역할은? interface User { id: number; name: string } type Optional<T> = { [K in keyof T]?: T[K] };', 1, '상', '모든 프로퍼티를 선택적으로 만든다', '모든 프로퍼티를 필수로 만든다', '프로퍼티 key를 union 으로 반환', 'T 타입을 조건부 타입으로 변환', 4),
    (180, '다음 인덱스 시그니처 선언의 의미는? interface StringMap { [key: string]: string }', 1, '상', '임의의 문자열 키에 대해 값은 string 이어야 한다', '키와 값이 항상 같은 문자열이다', '숫자 인덱스 전용 객체이다', '키는 리터럴 타입만 허용한다', 4),
    (181, '다음 클래스 선언에서 명시적으로 접근 제한자를 생략한 name 필드의 기본 접근 수준은?', 1, '하', 'public', 'private', 'protected', 'readonly', 4),
    (182, 'readonly 프로퍼티는 어디에서만 값을 할당(변경)할 수 있는가?', 1, '하', '선언과 동시에 또는 생성자 내부', '어디서든 한 번만', '클래스 외부 아무 곳', '정적 메서드 내부', 4),
    (183, '다음 코드가 컴파일 오류를 일으키는 이유는? abstract class Base {} const b = new Base();', 1, '하', 'abstract 클래스는 직접 인스턴스화할 수 없다', 'Base 클래스에 constructor가 없다', 'extends 키워드가 필요하다', '타입 매개변수가 누락됐다', 4),
    (184, '클래스 멤버 데코레이터를 사용하려면 tsconfig에 설정해야 하는 Compiler 옵션은?', 1, '중', '"experimentalDecorators": true', '"emitDecoratorMetadata": false', '"useDecorators": true', '"strict": false', 4),
    (185, '다음 코드 중 매개변수 프로퍼티(Parameter Property)를 이용한 예시는?', 1, '중', 'constructor(private id: number, public name: string)', 'id!: number;', 'public getId() { return this.id }', 'static from(obj: any) { ... }', 4),
    (186, 'protected 멤버에 대한 설명으로 틀린 것은?', 3, '중', '동일 클래스 내부에서 접근 가능하다', '파생(하위) 클래스 내부에서 접근 가능하다', '클래스 인스턴스 외부에서 접근 가능하다', '인스턴스 외부에서는 접근 불가하다', 4),
    (187, '모듈 시스템에서 모든 내보내기를 객체 하나로 가져오는 올바른 구문은?', 1, '중', 'import * as utils from "./utils";', 'import utils.* from "./utils";', 'import { * } from "utils";', 'require("./utils") as *', 4),
    (188, 'static 멤버에 대한 올바른 접근 방법은? class Counter { static total = 0; }', 1, '상', 'Counter.total', 'new Counter().total', 'Counter.prototype.total', 'this.total', 4),
    (189, '클래스 데코레이터 함수의 첫 번째 매개변수 타입은?', 1, '상', '생성자 함수를 나타내는 (new (...args: any[]) => any)', '인스턴스 타입', 'string', 'PropertyDescriptor', 4),
    (190, '다음 import 구문이 기본값과 이름 내보내기를 동시에 가져오는 정확한 형태는?', 1, '상', 'import def, { named } from "./mod";', 'import { default as def, named } from "./mod";', 'import * as def, named from "./mod";', 'import def, named from "mod";', 4),
    (191, '다음 조건부 타입에서 T가 string | number 일 때 Inferred 타입은? type Inferred<T> = T extends string ? 1 : 0;', 1, '하', '1 | 0', 'never', '1', '0', 4),
    (192, '유틸리티 타입 Partial<T> 의 효과는?', 1, '하', 'T의 모든 프로퍼티를 선택적(optional)으로 만든다', 'T의 모든 프로퍼티를 읽기 전용으로 만든다', 'T의 프로퍼티를 제거한다', 'T를 never 로 변환한다', 4),
    (193, '다음 제네릭에서 infer U 로 추론되는 타입 U는? type ElementType<T> = T extends (infer U)[] ? U : T;', 1, '하', '배열의 요소 타입', '배열 자체 타입', 'never', 'unknown', 4),
    (194, '`NonNullable<T>` 유틸리티 타입은 어떤 멤버를 제거하는가?', 1, '중', 'null 과 undefined', 'void', 'never', '0 과 ""', 4),
    (195, '다음 매핑된 타입에서 `-?` 기호의 의미는? type Req<T> = { [K in keyof T]-?: T[K] };', 1, '중', '선택적(?) 속성 한정자를 제거해 필수로 만든다', 'readonly 한정자를 제거한다', '프로퍼티 키를 제거한다', 'Union 타입을 분배한다', 4),
    (196, 'Exclude<"a" | "b", "a"> 의 결과 타입은?', 1, '중', '"b"', '"a"', '"a" | "b"', 'never', 4),
    (197, '다음 타입에서 infer R 은 무엇을 추론하는가? type ReturnType<T> = T extends (...args: any[]) => infer R ? R : any;', 1, '상', '함수 반환 타입', '함수 매개변수 타입', '함수 this 타입', '함수 호출 시그니처 개수', 4),
    (198, '`Pick<T, K>` 유틸리티 타입 사용 시 K 의 제약은?', 1, '상', 'keyof T 에 속하는 프로퍼티 key union 이어야 한다', '아무 Union 타입 가능', 'number 만 가능', 'T 의 값 타입이 포함되어야 한다', 4),
    (199, '다음 조건부 타입에서 infer 키워드가 필요한 이유는? type First<T extends any[]> = T extends [infer F, ...any] ? F : never;', 1, '상', '배열의 첫 요소 타입을 추론하기 위해', '배열 길이를 체크하기 위해', '프로미스 결과를 기다리기 위해', '제네릭 제약을 제거하기 위해', 4),
    (200, '다음 타입 정의에서 readonly와 optional을 동시에 제거하려면 어떤 유틸리티 조합이 필요한가? type Clean<T> = ____<____<T>>;', 1, '상', 'Required & Mutable (커스텀 Mutable 구현 필요)', 'NonNullable & Exclude', 'Pick & Omit', 'Partial & Readonly', 4),
    (201, 'Virtual DOM의 ‘가상’이 의미하는 것은?', 1, '하', '메모리에 존재하는 DOM 트리의 추상화 객체', '웹 GL로 그린 3D DOM', '브라우저 외부에서 렌더링된 서버 DOM', 'CSS OM의 별칭', 5),
    (202, 'Virtual DOM을 가장 널리 보급한 라이브러리로 평가되는 것은?', 1, '하', 'React', 'AngularJS 1.x', 'jQuery', 'Backbone.js', 5),
    (203, 'Virtual DOM이 브라우저 DOM 직접 조작 대비 성능 이점을 주는 주된 이유는?', 1, '하', '여러 변경을 메모리상에서 모아 최소 패치로 적용하기 때문', 'JS 파싱 시간을 없애기 때문', 'CSS 계산을 스레드오프로드하기 때문', '네이티브 코드로 DOM API를 대체하기 때문', 5),
    (204, '초기의 React(0.14 이전) 렌더 파이프라인 단계 순서는?', 1, '중', 'Render→Diff→Patch', 'Commit→Render→Diff', 'Diff→Render→Mount', 'Reflow→Paint→Diff', 5),
    (205, '2014년 페이스북 논문 ‘Efficient Virtual DOM and Incremental DOM’에서 강조한 핵심 최적화 중 하나는?', 1, '중', 'O(n) 키 기반 Diff', 'CSS-in-JS 캐싱', 'WebAssembly DOM 패치', 'Service Worker 프리패치', 5),
    (206, 'Virtual DOM 개념이 React 외에도 채택된 경량 라이브러리로 유명한 것은?', 1, '중', 'Snabbdom', 'Ember.js', 'Ext JS', 'GWT', 5),
    (207, '‘Virtual DOM은 무조건 실제 DOM 조작보다 빠르다’는 주장에 대한 올바른 반박은?', 1, '상', '계산·Diff 비용이 변경량보다 크면 실제 DOM이 더 빠를 수 있다', '브라우저가 Virtual DOM을 네이티브로 최적화하므로 항상 빠르다', 'JS 엔진이 JIT 컴파일을 못하면 Virtual DOM이 강제된다', 'HTML 문서 크기가 1 KB 미만이면 Virtual DOM이 필요 없다', 5),
    (208, 'React 16 이상에서 Virtual DOM Fiber 아키텍처로 교체된 주된 목표는?', 1, '상', '작업을 잘게 쪼개 스케줄링해 인터랙션 응답성을 높이기 위해', 'DOM API를 완전히 제거하기 위해', 'JS Bundle 크기를 절반으로 줄이기 위해', 'IE9 지원 유지 비용을 줄이기 위해', 5),
    (209, 'Virtual DOM 노드를 일반적으로 ‘VNode’라 부른다. 이 VNode가 직렬화·역직렬화에 적합한 이유는?', 1, '상', '순수 JS 객체로 사이드이펙트 없이 표현돼 JSON 변환이 쉽다', 'DOM Node 인스턴스를 그대로 담기 때문이다', 'HTML 문자열과 1:1 매핑되기 때문이다', '브라우저 IndexedDB에 자동 캐싱되기 때문이다', 5),
    (210, 'Virtual DOM 탄생 이전 퍼포먼스 병목 개선 전통 기법은?', 1, '상', 'DOM Batching(문서 조각·프래그먼트에 변경 누적 후 일괄 삽입)', 'Web GPU 렌더링', 'HTTP/3 PUSH', 'SSR Streaming', 5),
    (211, 'React의 기본 Diff 전략이 O(n) 복잡도를 달성하는 핵심 전제는?', 1, '하', '같은 레벨(Depth)에서만 노드를 비교한다', '모든 형제 노드를 완전 탐색(DFS)한다', 'HTML 태그 이름이 바뀌면 서브트리를 재귀 비교한다', '키가 중복될 때만 비교를 건너뛴다', 5),
    (212, '리스트 요소에 안정적 Key를 지정하지 않으면 발생할 수 있는 UI 문제는?', 1, '하', '입력‧포커스 상태가 잘못된 항목으로 이동한다', 'DOM 노드가 절대로 재사용되지 않는다', 'CSS 클래스가 적용되지 않는다', '브라우저 스크롤 위치가 고정된다', 5),
    (213, '아래 중 Key로 사용하기에 가장 안전한 값은?', 1, '하', '데이터베이스에서 보장된 고유 id', '배열 index', 'Date.now() 호출 결과', 'Math.random() 결과', 5),
    (214, 'Diff 과정에서 태그 이름이 다른 두 노드가 만나면 React는 어떻게 처리하는가?', 1, '중', '이전 노드를 언마운트하고 새 노드를 마운트한다', '텍스트 콘텐츠만 비교해 바꾼다', '속성을 깊이 비교해 바꾼다', '두 노드를 교환(Swap)한다', 5),
    (215, '형제 노드 순서 변경에 가장 큰 비용을 초래하는 Key 사용 패턴은?', 1, '중', 'index를 Key로 사용', '고유 id를 Key로 사용', '문자열 해시를 Key로 사용', '숫자형 Primary Key 사용', 5),
    (216, 'React Diff에서 ‘삽입·삭제·이동’ 3연산을 줄이기 위해 적용되는 리스트 최적화는?', 1, '중', 'Longest Increasing Subsequence(LIS) 탐색', 'Binary Search Tree 재구성', 'KMP 알고리즘', 'Dijkstra', 5),
    (217, 'key=index 사용 시 버그 위험이 가장 높은 경우는?', 1, '상', '사용자가 Todo 항목을 드래그해 순서를 변경할 때', '초기 로딩 시 항목을 한 번만 표시할 때', 'Todo가 읽기 전용일 때', 'Todo 항목 수가 1개일 때', 5),
    (218, 'Diff 알고리즘 성능을 정성적으로 측정하기에 가장 적합한 지표는?', 1, '상', '렌더(Commit)당 DOM Mutation 개수', 'JS Heap 스냅샷 크기', '네트워크 Bandwidth 사용량', '브라우저 FPS(Max)', 5),
    (219, 'React 18 Fiber 스케줄러가 Diff 작업을 중단할 수 있는 이유는?', 1, '상', 'Fiber 노드를 작업 단위로 쪼개 cooperative scheduling 이 가능해서', 'Virtual DOM을 Worker에서 실행하기 때문에', 'Diff를 WASM으로', 'Strict Mode 때문', 5),
    (220, 'Vue 3 PatchFlag 활용 목적은?', 1, '상', '변경 가능성 있는 부분만 빠르게 식별해 불필요한 비교를 줄이기 위해', '모든 노드를 깊이 비교하기 위해', 'HTML 문자열 파싱 속도를 높이기 위해', '브라우저 GC 트리거 회피', 5),
    (221, 'React 18 렌더링 파이프라인의 기본 3단계 순서는?', 1, '하', 'Render → Diff → Commit', 'Commit → Render → Diff', 'Diff → Commit → Render', 'Prepare → Paint → Commit', 5),
    (222, 'Scheduler가 중단·재개할 수 있는 단계는?', 1, '하', 'Render(Diff) 단계', 'Commit 단계', '브라우저 Paint 단계', 'Layout 단계', 5),
    (223, 'Batching은 여러 setState 호출을 어떻게 처리하는가?', 1, '하', '하나의 렌더 사이클로 합친다', '각 호출마다 즉시 렌더', '첫 호출만 실행', 'setTimeout 지연', 5),
    (224, 'Fiber 노드의 우선순위 필드는?', 1, '중', 'lanes', 'tag', 'return', 'index', 5),
    (225, 'Concurrent Mode에서 긴 리스트 응답성 향상 API 조합은?', 1, '중', 'startTransition / useTransition', 'useLayoutEffect / flushSync', 'useImperativeHandle / forwardRef', 'unstable_batchedUpdates / act', 5),
    (226, 'Commit 단계 직후 DOM 변경 확정 후 호출 훅은?', 1, '중', 'useLayoutEffect / componentDidMount', 'useEffect / componentDidUpdate', 'getSnapshotBeforeUpdate', 'shouldComponentUpdate', 5),
    (227, 'Fiber 트리 alternate 포인터가 가리키는 것은?', 1, '상', '현재 트리와 작업 중 트리의 다른 하나', '부모 노드 sibling', 'DevTools 메타', 'Suspense fallback', 5),
    (228, 'Suspense fallback 표시 시 Commit 단계 실제 동작은?', 1, '상', '기존 UI 유지, fallback 부분만 커밋', '전체 DOM 언마운트', '레이아웃 강제', 'Fiber 루트 재생성', 5),
    (229, '우선순위 동등 업데이트 합치기 정책은?', 1, '상', '가장 최근 업데이트만 남기고 합친다', 'FIFO 렌더', '무작위 처리', 'Deferred Value 생성', 5),
    (230, 'Offscreen 컴포넌트 렌더 시 Render 비용 줄이는 기술은?', 1, '상', 'display locking 대신 메모리 트리만 유지', 'Unmount', 'Server Components', 'lanes를 Idle', 5),
    (231, 'DOM 패치 단계의 1차 목표는?', 1, '하', '실제 DOM 변경을 최소 집합으로 적용해 레이아웃·페인트 비용을 줄인다', '가상 DOM 트리를 재귀적으로 깊이 비교한다', 'JS 엔진 GC 주기를 단축한다', 'HTTP 요청을 병렬화한다', 5),
    (232, 'Layout 발생 트리거가 아닌 것은?', 1, '하', '읽기만 수행하는 element.getBoundingClientRect()', 'style 변경', '노드 삭제', 'innerHTML 교체', 5),
    (233, 'React style 속성 diff 전략은?', 1, '하', '바뀐 개별 CSS 프로퍼티만 set', 'cssText 전체 재할당', '모두 null 후 재적용', 'CSSOM 캐시 비움', 5),
    (234, 'Layout Thrashing 방지 일반 방법은?', 1, '중', 'read와 write 작업을 일괄 모아 순서대로 실행', '모든 DOM 작업 setTimeout', 'CSS will-change 남용', 'MutationObserver 감시', 5),
    (235, 'innerHTML 교체가 효율적일 수 있는 시나리오는?', 1, '중', '컨텐츠 전체가 한 번에 완전히 교체되고 작을 때', '리스트 일부 텍스트 변경', '대규모 테이블 셀 일부 업데이트', 'form value 변경', 5),
    (236, '경량 VDOM class 속성 패치 전략은?', 1, '중', '이전·다음 클래스 토큰 비교해 add/remove', 'className 전체 재지정', 'classList.value 할당', 'rAF 내 하나씩', 5),
    (237, 'React flushSync 이점은?', 1, '상', '동기 커밋으로 글리치 없이 연속 업데이트 묶는다', 'Diff 건너뜀', '서버 컴포넌트 제외', 'Worker 오프로드', 5),
    (238, '배치되지 않은 setState 깜빡임 원리는?', 1, '상', '여러 Commit 분리로 Layout/Paint 각각', 'GC 발생', 'GPU 레이어 분리', 'idleCallback', 5),
    (239, 'CSS contain 속성 활용 성능 개선 상황은?', 1, '상', '하위 레이아웃이 외부 영향 없을 때 contain 설정', '상위 Grid 퍼센트폭', 'position fixed 요소', 'z-index 충돌', 5),
    (240, 'SVG/Canvas 반복 갱신 시 대안은?', 1, '상', 'WebGL/Canvas 직접 렌더', 'innerHTML', 'Shadow DOM', 'Service Worker', 5),
    (241, 'Virtual DOM이 fine-grained 변경에 비효율적 이유는?', 1, '하', '전체 서브트리를 재평가·diff해야 해서', 'GPU 가속 꺼짐', 'HTML5 위배', 'WASM 호환x', 5),
    (242, 'Svelte가 빠른 이유는?', 1, '하', '컴파일 단계 분석 후 직접 DOM 코드 생성', '모든 상태를 Proxy', 'Service Worker 캐시', 'WebGL 렌더', 5),
    (243, 'Incremental DOM 핵심 차이점은?', 1, '하', 'Diff 없이 템플릿 실행 중 직접 DOM 명령 스트림', '키 불필요', '모든 노드 제거 후 삽입', '서버 전용', 5),
    (244, 'SolidJS 신호 패러다임 이점은?', 1, '중', '변경 DOM 바인딩만 다시 실행', 'JSX 미사용', 'Worker 렌더', 'LocalStorage 캐싱', 5),
    (245, 'React Server Components가 줄여 주는 비용은?', 1, '중', '클라이언트 JS 번들 크기', 'HTML 크기', 'TLS 왕복', '브라우저 레이아웃', 5),
    (246, 'Resumability 목표는?', 1, '중', 'Hydration 없이 서버 상태 이어받아 즉시 상호작용', 'WebGL 모든 컴포넌트', 'Worker 분산', 'gRPC', 5),
    (247, 'Virtual DOM 필요 없는 이유(정적 콘텐츠 페이지)?', 1, '상', '변경 빈도 낮아 Diff 오버헤드 낭비', '브라우저가 VDOM 차단', 'SSR HTML5 충돌', 'SEO 스크립트 문제', 5),
    (248, 'React Forget 목표는?', 1, '상', '컴파일러로 fine-grained reactivity 자동 도입', '모든 useEffect 제거', 'JSX 포팅', 'webpack 제거', 5),
    (249, 'Astro Islands 아키텍처 방식은?', 1, '상', '필요 인터랙티브 부분만 CSR 하이드레이션', '페이지 전체 Shadow DOM', 'defer 스크립트', 'CSS inline', 5),
    (250, '저사양 기기에서 VDOM 메모리 문제 이유는?', 1, '상', 'VNode 트리가 추가 메모리 상주', 'GPU 캐시 없음', 'HTTP2 push', 'Intl polyfill', 5),
    (251, 'Git은 어떤 형식의 시스템인가?', 2, '하', '클라우드 스토리지', '버전 관리 시스템', '파일 서버', 'DBMS', 6),
    (252, 'Git을 설치한 후 버전을 확인하는 명령어는?', 2, '하', 'git check', 'git version', 'git install', 'git info', 6),
    (253, 'Git 저장소를 초기화하는 명령어는?', 3, '하', 'git start', 'git new', 'git init', 'git create', 6),
    (254, 'Git은 어떤 모델을 기반으로 동작하는가?', 2, '중', '파일 차이 추적 모델', '파일 전체 스냅샷 모델', 'SQL 데이터 모델', 'REST API 모델', 6),
    (255, 'Git의 핵심 구조가 아닌 것은?', 3, '중', 'Commit', 'Branch', 'Pull Request', 'Repository', 6),
    (256, 'Git이 다른 버전 관리 시스템과 구별되는 가장 큰 특징은?', 2, '중', '클라우드 기반', '분산 버전 관리', '서버 의존성', 'GUI 필수', 6),
    (257, 'Git 저장소 내 숨겨진 디렉토리는?', 2, '상', '.gitconfig', '.git', '.repository', '.version', 6),
    (258, 'Git 기본 사용자 이름 설정 명령어는?', 2, '상', 'git user set', 'git config user.name', 'git set username', 'git setup name', 6),
    (259, 'Git 저장소에서 ''working directory''란 무엇인가?', 2, '상', '원격 저장소 경로', '현재 작업 중인 로컬 폴더', '서버 경로', '커밋된 파일 저장소', 6),
    (260, 'Git 저장소에서 ''staging area''란?', 3, '상', '커밋된 파일 공간', '수정 대기 중 공간', '커밋 준비 중인 공간', '삭제 대기 공간', 6),
    (261, 'Git에서 변경 사항을 스테이징 영역에 추가하는 명령어는?', 2, '하', 'git commit', 'git add', 'git push', 'git status', 6),
    (262, '스테이징 영역에 추가된 파일을 저장소에 기록하는 명령어는?', 3, '하', 'git save', 'git push', 'git commit', 'git merge', 6),
    (263, '현재 작업 디렉토리의 변경 상태를 확인하는 명령어는?', 1, '하', 'git status', 'git show', 'git commit', 'git log', 6),
    (264, '마지막 커밋 메시지를 수정하는 명령어는?', 2, '중', 'git amend', 'git commit --amend', 'git edit', 'git rebase', 6),
    (265, '수정한 파일을 이전 상태로 되돌리는 명령어는?', 3, '중', 'git undo', 'git reset file', 'git restore file', 'git rollback', 6),
    (266, 'git log 명령어는 무엇을 보여주는가?', 2, '중', '브랜치 목록', '커밋 기록', '변경된 파일 목록', '서버 상태', 6),
    (267, '스테이징 영역에서 파일을 제거하는 명령어는?', 3, '상', 'git remove', 'git unstage', 'git reset HEAD <file>', 'git restore', 6),
    (268, '로컬 저장소에 새 파일을 생성하고 Git이 추적하도록 하려면 필요한 명령어는?', 2, '상', 'git create', 'git add', 'git push', 'git commit', 6),
    (269, '파일이 staging 되었는지 아닌지 구분하는 명령어는?', 1, '상', 'git diff', 'git compare', 'git check', 'git log', 6),
    (270, '작업 트리와 스테이징 영역의 차이를 보는 명령어는?', 2, '상', 'git status', 'git diff', 'git branch', 'git show', 6),
    (271, 'Git에서 브랜치를 생성하는 명령어는?', 1, '하', 'git branch <branch-name>', 'git create branch', 'git new branch', 'git make branch', 6),
    (272, '현재 브랜치를 확인하는 명령어는?', 2, '하', 'git show-branch', 'git branch', 'git current', 'git check', 6),
    (273, '다른 브랜치로 이동하는 명령어는?', 1, '하', 'git switch', 'git change branch', 'git move branch', 'git jump', 6),
    (274, '브랜치를 삭제하는 명령어는?', 3, '중', 'git remove branch', 'git delete branch', 'git branch -d <branch-name>', 'git clear branch', 6),
    (275, '브랜치를 병합할 때 사용하는 명령어는?', 1, '중', 'git merge', 'git attach', 'git connect', 'git combine', 6),
    (276, '병합 충돌이 발생했을 때 가장 먼저 해야 할 일은?', 2, '중', 'push 하기', '충돌 해결', 'commit 하기', 'reset 하기', 6),
    (277, 'Fast-forward 병합이 가능한 상황은?', 1, '상', '브랜치가 동일 선상일 때', '병렬 작업이 많을 때', '리베이스 후일 때', '충돌 발생 시', 6),
    (278, 'Git에서 리베이스(rebase)의 주요 목적은?', 2, '상', '브랜치 삭제', '커밋 기록을 정리', '브랜치 연결 끊기', '브랜치 복제', 6),
    (279, 'rebase 중 충돌이 발생했을 때 해결 방법은?', 3, '상', 'git abort', 'git reset', '충돌 해결 후 git rebase --continue', 'git merge', 6),
    (280, 'Git 병합 전략 중, 커밋 히스토리를 깔끔하게 유지하는 방법은?', 3, '상', 'merge', 'fast-forward', 'rebase', 'squash', 6),
    (281, 'GitHub에서 원격 저장소를 복제하는 명령어는?', 2, '하', 'git pull', 'git clone', 'git fetch', 'git copy', 6),
    (282, '로컬 저장소를 원격 저장소에 연결하는 명령어는?', 3, '하', 'git connect', 'git link', 'git remote add', 'git sync', 6),
    (283, '원격 저장소의 정보를 확인하는 명령어는?', 2, '하', 'git info remote', 'git remote -v', 'git remote info', 'git check remote', 6),
    (284, 'GitHub에 변경 사항을 업로드하는 명령어는?', 1, '중', 'git push', 'git upload', 'git send', 'git deploy', 6),
    (285, '원격 저장소의 최신 변경 사항을 가져오는 명령어는?', 3, '중', 'git update', 'git fetch', 'git pull', 'git clone', 6),
    (286, 'git fetch 후 로컬 브랜치에 적용하려면 어떤 명령어를 사용해야 하는가?', 3, '중', 'git rebase', 'git checkout', 'git merge', 'git switch', 6),
    (287, '원격 저장소를 삭제하는 명령어는?', 3, '상', 'git remove remote', 'git remote delete', 'git remote rm', 'git delete origin', 6),
    (288, 'git push origin main 명령어의 의미는?', 2, '상', 'main 브랜치를 로컬에 복제', 'main 브랜치를 원격 저장소에 업로드', 'main 브랜치를 삭제', 'main 브랜치 이름 변경', 6),
    (289, 'GitHub에서 포크(fork) 기능은 어떤 역할을 하는가?', 2, '상', '프로젝트를 클론하는 것', '자신의 계정으로 프로젝트를 복사', '서버를 복제', '브랜치를 새로 만드는 것', 6),
    (290, 'GitHub에서 저장소를 복제(clone)한 후 바로 개발할 수 있는 브랜치는?', 1, '상', 'master/main', 'feature', 'develop', 'hotfix', 6),
    (291, 'GitHub에서 협업 시 일반적으로 사용하는 요청 방식은?', 2, '하', 'Push Request', 'Pull Request', 'Merge Request', 'Commit Request', 6),
    (292, 'Pull Request를 생성할 때 필수적으로 지정해야 하는 것은?', 2, '하', '리포지토리 이름', '베이스 브랜치와 비교 브랜치', '커밋 ID', '패치 URL', 6),
    (293, 'GitHub 이슈(Issue)의 주요 목적은?', 2, '하', '코드 수정', '버그 관리 및 기능 요청', '커밋 관리', '프로젝트 복제', 6),
    (294, 'Pull Request에 리뷰어를 지정하는 목적은?', 2, '중', '자동 병합', '코드 검토 요청', '버그 수정', '브랜치 삭제', 6),
    (295, 'GitHub Actions는 무엇을 자동화하는 기능인가?', 2, '중', '이슈 생성', 'CI/CD 파이프라인', '브랜치 복제', '저장소 삭제', 6),
    (296, 'Fork 후 Pull Request를 보내려면 먼저 해야 할 일은?', 2, '중', 'origin으로 직접 push', '포크한 저장소에 push', 'GitHub에서 Fork 취소', '새 브랜치 만들기', 6),
    (297, 'GitHub에서 커밋을 다른 사람과 연동할 때 필요한 것은?', 3, '상', 'Email 등록', 'SSH 키 설정', 'GPG 서명 설정', 'Fork 설정', 6),
    (298, 'GitHub 저장소를 비공개로 변경하려면 필요한 권한은?', 2, '상', 'Contributor', 'Owner', 'Collaborator', 'Reviewer', 6),
    (299, 'GitHub 이슈 템플릿을 설정하는 파일 위치는?', 1, '상', '.github/ISSUE_TEMPLATE/', 'docs/ISSUE/', 'src/issue_template/', 'config/issues/', 6),
    (300, 'GitHub에서 squash merge를 선택하는 주요 이유는?', 1, '상', '히스토리를 깔끔하게 유지하기 위해', '모든 브랜치를 삭제하기 위해', '병합 충돌을 강제 발생시키기 위해', '코드를 롤백하기 위해', 6),
    (301, 'Git Hook은 언제 실행되는 스크립트인가?', 1, '하', '커밋, 푸시 등의 이벤트 시점', 'Git 설치 시점', '브랜치 삭제 시점', '저장소 복제 시점', 7),
    (302, 'Git Hook 스크립트는 기본적으로 어떤 언어로 작성되는가?', 2, '하', 'Python', 'Shell Script', 'JavaScript', 'Ruby', 7),
    (303, 'Git 기본 Hook 파일들이 위치하는 디렉토리는?', 1, '하', '.git/hooks', '.hooks', 'hooks/', 'src/hooks', 7),
    (304, '커밋 전에 코드 검사를 자동으로 실행하기 위해 사용하는 Hook은?', 2, '중', 'post-commit', 'pre-commit', 'pre-push', 'commit-msg', 7),
    (305, '커밋 메시지를 검증하는 데 사용되는 Git Hook은?', 3, '중', 'pre-push', 'pre-commit', 'commit-msg', 'post-merge', 7),
    (306, 'Git Hook은 기본적으로 어떤 파일 형태로 제공되는가?', 2, '중', '활성화된 스크립트 파일', '비활성화된 샘플 파일', 'JSON 설정 파일', 'Markdown 문서', 7),
    (307, 'Git Hook을 전역(global)으로 설정할 수 있는 방법은?', 2, '상', 'global-hooks 디렉토리 지정', 'git config --global core.hooksPath', 'git global hook', 'hooksPath 설정파일 추가', 7),
    (308, 'Git Hook 중 push가 되기 전에 마지막으로 실행되는 Hook은?', 2, '상', 'post-commit', 'pre-push', 'commit-msg', 'post-merge', 7),
    (309, 'Git Hook을 이용해 push를 차단할 수 있는 방법은?', 3, '상', 'pre-commit 실패', 'commit-msg 실패', 'pre-push 실패', 'merge-fail', 7),
    (310, 'Git Hook을 통해 코드 품질 관리를 하는 이유는?', 2, '상', '개발 속도 향상', '코드 일관성 유지', '브랜치 보호', '리포지토리 용량 감소', 7),
    (311, 'Husky의 주요 목적은 무엇인가?', 1, '하', 'Git Hook 관리 자동화', 'Git 리포지토리 복제', '브랜치 자동 생성', '코드 리뷰 자동화', 7),
    (312, 'Husky를 설치하는 기본 명령어는?', 1, '하', 'npm install husky', 'npm add git-hooks', 'npm install hooker', 'npm husky-setup', 7),
    (313, 'Husky를 활성화하기 위해 필요한 명령어는?', 1, '하', 'npx husky install', 'npx husky start', 'npx git-hook', 'npm init husky', 7),
    (314, 'Husky 설치 후 설정을 추가하는 파일은?', 2, '하', '.huskyrc', '.husky/', '.git/hooks', '.huskyconfig', 7),
    (315, 'Husky를 통해 pre-commit Hook을 추가할 때 사용하는 명령어는?', 1, '중', 'npx husky add .husky/pre-commit ''npm test''', 'husky create pre-commit', 'git add pre-commit', 'npm run hook-add', 7),
    (316, 'Husky 설치 시 .gitignore에 추가되지 않는 디렉토리는?', 1, '중', '.husky', 'node_modules', 'hooks', 'build', 7),
    (317, 'Husky를 package.json scripts에 등록하는 이유는?', 2, '중', '테스트 실행', '자동 설치 보장', '버전 업데이트', 'gitignore 무시', 7),
    (318, 'Husky를 설치 후 Git Hook이 정상 동작하지 않는 경우 우선 확인할 사항은?', 1, '상', '.git/hooks 디렉토리 존재 여부', 'npm 버전', 'Prettier 설치 여부', '프로젝트 크기', 7),
    (319, 'Husky를 제거할 때 사용해야 하는 명령어는?', 1, '상', 'npm uninstall husky', 'npm remove git-hook', 'npm husky-remove', 'npx husky delete', 7),
    (320, 'Husky 설치 시 Git Hook을 적용하기 위해 반드시 필요한 것은?', 2, '상', 'package-lock.json', 'git 초기화 (.git 존재)', 'node_modules 재설치', '브랜치 생성', 7),
    (321, 'Husky로 pre-commit Hook을 추가하려면 필요한 명령어는?', 2, '하', 'husky create pre-commit', 'npx husky add .husky/pre-commit', 'git init hook', 'npm install hooker', 7),
    (322, 'Husky를 사용하여 pre-push Hook을 설정할 때 경로는?', 1, '하', '.husky/pre-push', '.git/pre-push', 'hooks/pre-push', '.husky/hooks/pre-push', 7),
    (323, 'Husky Hook 파일에서 실행할 명령어를 작성하는 파일은?', 2, '하', 'package.json', 'Hook script 파일', '.huskyrc', 'hooks-config.js', 7),
    (324, 'Husky로 생성된 Hook 스크립트의 첫 번째 줄은 무엇이어야 하는가?', 2, '중', '#!/usr/bin/env husky', '#!/bin/bash', '#!node', '#!/usr/bin/env node', 7),
    (325, 'Husky의 pre-commit Hook에서 실패할 경우 결과는?', 2, '중', '커밋이 진행된다', '커밋이 차단된다', '푸시가 진행된다', '브랜치가 변경된다', 7),
    (326, 'Husky pre-push Hook에서 실패하면 어떤 일이 발생하는가?', 2, '중', 'push가 정상적으로 완료된다', 'push가 차단된다', 'pull이 시작된다', 'merge conflict 발생', 7),
    (327, 'Husky로 여러 명령어를 pre-commit에 실행할 때 사용하는 방법은?', 2, '상', '쉼표로 구분', '&& 연산자 사용', '파이프(|) 사용', 'AND 명령어 사용', 7),
    (328, 'Husky 설정 후 git commit 시 pre-commit이 동작하지 않는 경우 우선 확인할 것은?', 2, '상', 'node_modules 삭제 여부', '.husky 디렉토리 여부', 'npm 버전', 'yarn.lock 존재 여부', 7),
    (329, 'Husky hook 파일에 명령어를 추가하는 기본 방법은?', 2, '상', 'scripts 항목 수정', '직접 shell script 수정', 'npm script 작성', 'git config 수정', 7),
    (330, 'Husky를 통해 pre-commit에서 lint 검사를 실행할 때 가장 일반적인 방법은?', 2, '상', 'npm test', 'npm run lint', 'npm run build', 'npm install lint', 7),
    (331, 'lint-staged의 주요 목적은 무엇인가?', 2, '하', '전체 코드 linting', '스테이징된 파일만 linting', '빌드 최적화', '버전 관리', 7),
    (332, 'lint-staged를 설치하는 명령어는?', 1, '하', 'npm install lint-staged', 'npm install lint-stage', 'npm add staged-lint', 'npm install pre-lint', 7),
    (333, 'lint-staged 설정을 추가할 수 있는 파일은?', 2, '하', '.lintstagedrc', 'package.json', '.lintstage', '.stagedlint', 7),
    (334, 'lint-staged를 사용할 때 파일 패턴을 설정하는 이유는?', 2, '중', '전체 파일 적용', '변경된 파일만 지정 작업 적용', 'Git 히스토리 추적', '버전 롤백', 7),
    (335, 'lint-staged 설정에서 JavaScript 파일에 ESLint를 적용하려면 어떻게 작성하는가?', 1, '중', '"*.js": "eslint"', '"*.js": "prettier"', '"*.js": "node"', '"*.js": "test"', 7),
    (336, 'lint-staged가 적용되는 파일 범위는?', 2, '중', 'Git에 커밋된 모든 파일', '스테이지된 파일', '로컬 디렉토리 전체', '리포지토리 전체', 7),
    (337, 'lint-staged에서 여러 명령어를 실행하려면 어떻게 설정하는가?', 2, '상', '쉼표로 구분', '배열로 설정', '공백으로 구분', '세미콜론으로 구분', 7),
    (338, 'lint-staged를 통해 commit 전에 파일 포맷팅을 적용하려면 사용하는 명령어는?', 1, '상', 'prettier --write', 'eslint --fix', 'lint --stage', 'node --format', 7),
    (339, 'lint-staged 설정을 .lintstagedrc로 분리하는 이유는?', 1, '상', '설정 관리 편의성', 'CI/CD 통합', '성능 향상', 'Git Hook 자동화', 7),
    (340, 'lint-staged를 사용할 때 실패한 파일이 있을 경우 커밋은 어떻게 되는가?', 2, '상', '커밋 진행', '커밋 차단', '푸시 차단', '브랜치 변경', 7),
    (341, 'Husky와 lint-staged를 함께 사용하는 주된 이유는?', 2, '하', '전체 파일에 lint 적용', '스테이징된 파일에만 lint 및 포맷 적용', '브랜치 보호', '리포지토리 삭제', 7),
    (342, 'lint-staged를 실행하는 위치로 가장 적합한 Git Hook은?', 3, '하', 'post-merge', 'pre-push', 'pre-commit', 'post-commit', 7),
    (343, 'Husky로 lint-staged를 pre-commit에 연결하는 방법은?', 2, '하', 'npm script 등록', 'npx husky add .husky/pre-commit ''npx lint-staged''', 'git push 설정', 'prettier 설정', 7),
    (344, 'lint-staged 실행 실패 시 커밋은 어떻게 되는가?', 2, '중', '커밋 진행', '커밋 차단', '브랜치 변경', 'push 진행', 7),
    (345, 'lint-staged 설정 파일에 여러 명령어를 적용할 때 사용하는 자료형은?', 2, '중', 'Object', 'Array', 'String', 'Number', 7),
    (346, 'Husky 설정 없이 lint-staged만 설치했을 경우 발생하는 문제는?', 1, '중', 'Hook이 작동하지 않음', '빌드 실패', '버전 충돌', '리포지토리 삭제', 7),
    (347, 'lint-staged의 실행 명령어를 npx를 통해 바로 실행하려면 필요한 것은?', 2, '상', 'package.json scripts', 'npx lint-staged', 'git lint', 'npm run lint-stage', 7),
    (348, 'Husky의 pre-commit Hook 스크립트에서 lint-staged를 호출할 때 기본 사용 방법은?', 2, '상', 'npm run lint', 'npx lint-staged', 'eslint staged', 'prettier staged', 7),
    (349, 'lint-staged가 처리하는 파일은 기본적으로 어떤 상태인가?', 2, '상', 'untracked', 'staged', 'committed', 'ignored', 7),
    (350, 'Husky + lint-staged 통합 설정이 잘 작동하면 어떤 이점이 있는가?', 2, '상', '커밋 속도 향상', '코드 품질 유지와 일관성 확보', '브랜치 삭제 자동화', '파일 무결성 검사', 7),
    (351, '다음 중 **Axios 인스턴스**를 생성할 때 사용하는 함수는?', 1, '하', 'axios.create()', 'axios.init()', 'Axios.new()', 'axios.config()', 8),
    (352, '인스턴스 생성 시 공통 **기본 경로**를 지정하려면 어떤 옵션을 설정해야 하는가?', 1, '하', 'baseURL', 'rootPath', 'basePath', 'prefix', 8),
    (353, 'Axios 전역 옵션 중 **요청이 일정 시간 안에 완료되지 않으면** 자동으로 거절되는 한계 시간 옵션은?', 1, '하', 'timeout', 'maxDuration', 'requestLimit', 'delay', 8),
    (354, '환경변수로 baseURL 설정 목적은?', 1, '중', '빌드/배포 환경별 API 엔드포인트 분기', '쿠키 첨부', '서버 컴포넌트 리다이렉트', 'HTTP/3', 8),
    (355, '인스턴스 레벨 공통 헤더 설정 코드 동등 효과는?', 1, '중', 'axios.create({ headers: { common: { ''X-Custom'': ''foo'' } } })', 'axios.setHeader', 'axios.config.headers', 'axios.defaults.set', 8),
    (356, 'withCredentials:true 사용 대표 상황은?', 1, '중', '쿠키·세션 포함 CORS 요청', 'POST 강제', '타임아웃 무시 스트리밍', 'multipart', 8),
    (357, '환경별 구성을 런타임 코드 없이 분기 권장 방법은?', 1, '중', '.env 환경 변수 + 인스턴스 옵션 분기', 'if/else URL', 'localStorage URL', 'setInterval 재설정', 8),
    (358, 'transformResponse 역할은?', 1, '상', '응답 데이터 가공 후 전달', '요청 본문 직렬화', '헤더 토큰 추가', 'HTTP 오류 무시', 8),
    (359, '브라우저 미지원 프로토콜 요청하려면 커스텀할 옵션은?', 1, '상', 'adapter', 'proxy', 'xsrfCookieName', 'decompress', 8),
    (360, '다수 API 서버 통신 권장 인스턴스 관리 방법은?', 1, '상', '서버 종류별 전용 인스턴스 모듈 분리', '전역 axios 하나', '매 요청마다 create', 'XHR 직접 구현', 8),
    (361, '전역 Request 인터셉터 메서드는?', 1, '하', 'axiosInstance.interceptors.request.use()', 'axiosInstance.onRequest()', 'axios.requestInterceptor()', 'axiosInstance.useRequest()', 8),
    (362, 'config 객체 전달 시점은?', 1, '하', 'HTTP 전송 직전', '응답 직후', 'create 직후', '체인 끝', 8),
    (363, '토큰 첨부 헤더는?', 1, '하', 'Authorization: Bearer <token>', 'Auth-Token', 'Set-Cookie', 'X-Access', 8),
    (364, '요청 중복 방지 기본 전략은?', 1, '중', 'Pending Map 큐 관리', 'withCredentials false', 'timeout 0', 'validateStatus null', 8),
    (365, '요청 단계 에러 처리 콜백은?', 1, '중', '.use() 두번째 인자', '없음', 'Promise.reject', 'async keyword', 8),
    (366, '쿼리 파라미터 변환 수정 프로퍼티는?', 1, '중', 'params', 'data', 'headers', 'timeout', 8),
    (367, 'eject 호출 효과는?', 1, '상', '이후 요청부터 제거', '현재 진행 중 요청도 제거', '새로고침 후', 'GC 시', 8),
    (368, '멀티탭 토큰 변경 감지 Web API는?', 1, '상', 'storage 이벤트', 'visibilitychange', 'sendBeacon', 'BroadcastChannel', 8),
    (369, 'Request 인터셉터 비동기 시 문제는?', 1, '상', 'Promise 반환 안하면 체인 멈춤', 'Axios 자동 취소', 'CORS 무시', 'timeout 리셋', 8),
    (370, '로깅 권장 출력 타이밍은?', 1, '상', 'config 수정 전에', 'then 마지막', '응답 인터셉터', 'catch', 8),
    (371, 'Response 인터셉터 메서드는?', 1, '하', 'axiosInstance.interceptors.response.use()', 'axiosInstance.onResponse()', 'axios.responseInterceptor()', 'axiosInstance.after()', 8),
    (372, 'data 전달 시점은?', 1, '하', 'HTTP 응답 수신 직후', '요청 직전', '체인 종료 후', '타임아웃', 8),
    (373, 'validateStatus false 결과 처리?', 1, '하', 'Promise reject', '재시도', 'undefined', '리로드', 8),
    (374, '응답 camelCase 통일 변환 대상은?', 1, '중', 'response.data', 'response.config', 'statusText', 'headers.common', 8),
    (375, '스피너 제어 일반 흐름은?', 1, '중', '요청 전 ON → 응답 후 OFF', '응답 후 ON', '요청 전 OFF', '항상 OFF', 8),
    (376, '파일 다운로드 응답 처리 누락 설정은?', 1, '중', 'responseType:''blob''', 'withCredentials true', 'maxContentLength 0', 'decompress false', 8),
    (377, 'HTTP 200 내부 오류 승격 방법은?', 1, '상', 'return Promise.reject(customError)', 'status=500 재할당', 'throw 불가', 'validateStatus false', 8),
    (378, '에러 로깅 후 체인 유지?', 1, '상', '에러 콜백 로깅 후 reject', '반환 없음', '성공 콜백', 'data 덮어쓰기', 8),
    (379, '1회만 실행 플래그 시 확인점?', 1, '상', '충돌 없는 고유 키 사용', 'delete 필수', 'boolean 필수', 'headers만', 8),
    (380, 'SSR 환경 메모리 릭 없이 인터셉터 사용?', 1, '상', '응답 후 eject', '매 요청 create', 'async 사용 금지', 'validateStatus 200', 8),
    (381, '만료 Access Token 실패시 첫 단계?', 1, '하', 'Refresh Token으로 새 토큰 요청', '로그아웃', '토큰 삭제', '리로드', 8),
    (382, '동시 401 1회 갱신 패턴은?', 1, '하', '요청 큐잉 패턴', 'withCredentials false', 'HTTP 429', 'CancelToken 제거', 8),
    (383, 'Refresh Token 안전 저장 방식?', 1, '하', 'HttpOnly Secure 쿠키', 'localStorage', 'sessionStorage', 'IndexedDB', 8),
    (384, '멀티 탭 오래된 토큰 문제는?', 1, '중', '연쇄 갱신 무한 루프 위험', '쿠키 사라짐', 'CSP 위반', '자동 리로드', 8),
    (385, '큐에 넣어둘 객체는?', 1, '중', 'Promise resolver', 'axios 인스턴스', 'XHR', 'AbortSignal', 8),
    (386, '__retry 플래그 목적은?', 1, '중', '무한 재귀 방지', '타임아웃 두배', 'validateStatus 우회', 'CORS 건너뜀', 8),
    (387, 'Refresh 실패 시 후속 조치?', 1, '상', '로그아웃 후 인증 페이지', '무한 재시도', '기존 토큰 요청', '페이지 새로고침', 8),
    (388, '원본 메서드·바디 보존 재시도 방법?', 1, '상', 'return api(originalConfig)', 'get(url)', '바디 headers', 'method 삭제', 8),
    (389, 'Safari ITP 토큰 쿠키 완화는?', 1, '상', 'SameSite=None; Secure + 짧은 만료', 'localStorage', 'Path 제한', 'Domain 생략', 8),
    (390, 'MSW 사용 이점?', 1, '상', '백엔드 없이 401/refresh 시나리오 테스트', 'JWT 암호화', 'CSP 우회', 'HTTP2 우선', 8),
    (391, '자동 재시도 유틸리티는?', 1, '하', 'axios-retry', 'axios-cache-adapter', 'axios-mock-adapter', 'axios-progress-bar', 8),
    (392, '지수 백오프 500→1000 올바른가?', 1, '하', '500→1000', '250→500', '500→750', '1000→1500', 8),
    (393, '취소 토큰 대체 API는?', 1, '하', 'AbortController / AbortSignal', 'BroadcastChannel', 'SharedWorker', 'ReadableStream.cancel', 8),
    (394, '도메인별 모듈화 권장 패턴은?', 1, '중', '전용 인스턴스 + CRUD export', '전역 axios', '직접 호출', 'Fetch 혼용', 8),
    (395, 'mock replyOnce 시나리오 목적은?', 1, '중', '1회 실패 후 재시도 성공', '캐싱 검증', '웹소켓', '업로드', 8),
    (396, 'Circuit Breaker Open 전환 기준은?', 1, '중', '연속 실패 임계초과', '모든 요청 성공', 'AbortSignal', 'HTTP 3xx', 8),
    (397, '동일 요청 합치기 원리는?', 1, '상', '같은 URL 프라미스 공유', '모든 요청 취소', 'GET→HEAD', '로컬 캐시', 8),
    (398, 'Adapter 커스텀 이점 아닌 것은?', 3, '상', 'CORS 무시 (아님)', 'WebSocket/gRPC', '네트워크 우회', 'React Native 네이티브 모듈', 8),
    (399, '성능 메트릭 측정 간단 방법?', 1, '상', '요청 직전 Date.now 저장, 응답 후 경과 계산', 'hrtime만', 'Network 스크래핑', '패킷 스니핑', 8),
    (400, 'jest.mock axios 단점은?', 1, '상', '인터셉터/어댑터 로직 스킵', '테스트 느림', '2xx 재현 불가', 'TS 타입 실패', 8),
    (401, '클라이언트 잘못된 요청(예: JSON 스키마 위반)에 대한 권장 HTTP 상태 코드는?', 1, '하', '400 Bad Request', '401 Unauthorized', '500 Internal Server Error', '409 Conflict', 9),
    (402, '인증 헤더가 누락된 요청에 서버가 반환해야 할 표준 상태 코드는?', 1, '하', '401 Unauthorized', '403 Forbidden', '412 Precondition Failed', '502 Bad Gateway', 9),
    (403, 'REST API에서 존재하지 않는 리소스에 대한 GET 요청 시 적절한 응답 코드는?', 1, '하', '404 Not Found', '410 Gone', '204 No Content', '422 Unprocessable Entity', 9),
    (404, 'RFC 7807 ‘Problem Details for HTTP APIs’가 권장하는 기본 Content-Type은?', 1, '중', 'application/problem+json', 'application/json; problem', 'text/problem', 'application/vnd.error+json', 9),
    (405, 'RFC 7807 JSON 응답 예시에서 반드시 포함해야 하는 필드는?', 1, '중', 'title', 'instance', 'detail', 'errors', 9),
    (406, '다음 중 4xx와 5xx 상태 코드 차이에 대한 설명으로 옳지 않은 것은?', 4, '중', '4xx는 클라이언트 오류, 5xx는 서버 오류를 나타낸다', '5xx는 재시도 가능성이 4xx보다 높다', '4xx 오류라도 Problem Details 바디를 포함할 수 있다', '4xx는 절대 재시도해서는 안 된다', 9),
    (407, '동일 자원 중복 생성 시 서버가 반환해도 멱등성 규칙을 깨지지 않는 상태 코드는?', 1, '상', '409 Conflict', '201 Created', '202 Accepted', '302 Found', 9),
    (408, 'Problem Details 바디에 커스텀 ‘code’ 정수 필드를 두는 주된 이점은?', 1, '상', '클라이언트가 로컬라이징 메시지를 매핑하기 쉽다', 'HTTP 상태 코드 전송을 생략할 수 있다', 'JSON 패싱을 건너뛸 수 있다', 'CORS 프리플라이트를 우회한다', 9),
    (409, '다음 중 idempotent 메서드가 아닌 것은?', 1, '상', 'POST', 'PUT', 'DELETE', 'HEAD', 9),
    (410, '클라이언트가 429 Too Many Requests 응답을 받을 때 재시도 시점을 알기 위해 확인해야 하는 헤더는?', 1, '상', 'Retry-After', 'Warning', 'WWW-Authenticate', 'Content-Encoding', 9),
    (411, '브라우저 네트워크 오류 vs HTTP 오류 구분 방법은?', 1, '하', '응답 없음 & error.request 존재 → 네트워크 오류', 'status 0이면 HTTP 오류', 'message에 Network Error 포함 시 HTTP 오류', 'https로 시작시 네트워크 오류 없음', 9),
    (412, '422 오류 UX 비추천 패턴은?', 1, '하', '모달 전체 가리고 중앙만 오류', '필드 인라인 표시', '폼 상단 요약', '스낵바 알림', 9),
    (413, '전역 오류 핸들러 역할은?', 1, '하', '로그인 만료 등 공통 처리', '레이아웃 교체', 'CSS 초기화', 'History 재설정', 9),
    (414, '오프라인 GET 요청 전략은?', 1, '중', '대기열 저장 후 복구 시 재시도', '캐시 비우고 에러', '503 구성', '무한 로딩', 9),
    (415, 'Error Boundary 해결 문제는?', 1, '중', '렌더 예외로 인한 흰 화면', 'API 500 재시도', 'CORS 차단', 'WebSocket', 9),
    (416, '중복 POST 방지 클라이언트 조치?', 1, '중', '이전 요청 취소 AbortController', 'Cache-Control no-store', 'POST→GET', '로그 제거', 9),
    (417, 'axios 취소 vs 네트워크 오류 구분 프로퍼티?', 1, '상', 'error.code === ''ERR_CANCELED''', 'message 포함 Network', 'status -1', 'timeout 0', 9),
    (418, '국제화 오류 메시지 비추천 방법은?', 1, '상', '서버가 완제품 문구 제공', '클라이언트 코드 매핑', 'title/detail 키 사용', '템플릿 변수 치환', 9),
    (419, '모바일 에러/재요청 데이터 최소화 우선 고려는?', 1, '상', '오프라인 감지 후 백오프', '해상도 다운', '캐시 삭제', 'UDP 강제', 9),
    (420, '사용자 메시지+디버그 정보 구조 권장?', 1, '상', 'UI 요약 & 콘솔 raw trace', 'alert 모두', '서버 HTML 오류 페이지', '쿠키 저장', 9),
    (421, '멱등 메서드는?', 1, '하', 'PUT', 'POST', 'PATCH', 'CONNECT', 9),
    (422, '고정 3초 4번 총 지연?', 1, '하', '12초', '9초', '6초', '3초', 9),
    (423, '지수 1s 배수2 3회 누적?', 1, '중', '7 s', '6 s', '5 s', '4 s', 9),
    (424, 'Retry-After 120 권장 재시도?', 1, '중', '120초 이상 후', '60초', '즉시', '무시', 9),
    (425, 'POST 안전 재시도 보완책?', 1, '중', 'Idempotency-Key 헤더', 'HTTP/2 업그레이드', '빈 바디', 'PUT 사용', 9),
    (426, '재시도 고려 가능한 408/409?', 1, '중', '408 Request Timeout', '409 Conflict', '400', '401', 9),
    (427, 'Full Jitter 목적은?', 1, '상', '서버 폭주 완화', '총 지연 줄임', 'TCP 우회', 'TLS 감소', 9),
    (428, '재시도 불가 오류 유형?', 1, '상', '400 필드 검증', '502', '408', '429', 9),
    (429, '조건부 PUT 재시도 안전 이유?', 1, '상', 'ETag 버전 동일 시만 수행', 'PUT 캐싱', 'HTTP/3 전용', '브라우저 보장', 9),
    (430, '모바일 TCP 끊김 POST 문제 감소?', 1, '상', '짧은 타임아웃 + 멱등 키', 'HTTP 1.0', '재시도 끔', '인증 제거', 9),
    (431, 'Circuit Closed→Open 조건?', 1, '하', '연속 실패 임계', '성공 200', '301', '쿠키 만료', 9),
    (432, 'Half-Open 성공 전이?', 1, '하', 'Closed', 'Open', 'Forced-Open', 'Isolated', 9),
    (433, 'Open 상태 바로 실패 목적?', 1, '하', '백엔드 부하 차단', '캐시 무효', 'TLS 시간 줄임', 'DNS 재해석', 9),
    (434, '재시도+CB 충돌 위험?', 1, '중', '과도 재시도→즉시 Open', 'Jitter 제거', 'Retry-After 무시', 'HTTP/2 끊김', 9),
    (435, 'Coalescing 효과 시나리오?', 1, '중', '같은 리소스 다수 GET', '다른 POST', 'WebSocket', 'SSE', 9),
    (436, 'Equal Jitter 이점 아닌 것?', 2, '중', '스파이크 완화', '최대/최소 지연 예측', 'Full Jitter보다 대기 줄임', '서버 완화', 9),
    (437, 'Fallback 전략 사례?', 1, '상', '캐시된 데이터로 표시', '재시도 0', 'CB 강제 Close', 'Retry-After 무시', 9),
    (438, 'Hedged Request 주의점?', 1, '상', '멱등 보장 필요', 'DNS TTL 0', 'KEEP-ALIVE 끊기', 'TLS 1.3', 9),
    (439, 'Max-Retry-TTL 목적?', 1, '상', '무제한 지연 방지', 'TCP FIN 감소', '브라우저 버그 회피', 'Keep-Alive 증가', 9),
    (440, 'CB 실시간 튜닝 기법?', 1, '상', 'Feature Flag 기반 임계 조정', '콘솔 변수', '헤더 하드코드', '빌드 상수', 9),
    (441, '자주 쓰는 SLO 쌍은?', 1, '하', '가용성·오류율', 'CPU·메모리', '빌드시간·커버리지', 'PR 리뷰', 9),
    (442, 'P99 증가 의심 원인?', 1, '하', '소수 요청 재시도 지연', '평균 느려짐', '404 급증', '로깅 오류', 9),
    (443, '분산 추적 유용 이유?', 1, '중', 'Trace로 재시도 체인 시각화', '헤더 암호화', '로그 제거', '패킷 캡처', 9),
    (444, 'Chaos 테스트 간단 도구?', 1, '중', 'MSW random error', 'CSS Lint', 'Bundle Analyzer', 'Lighthouse', 9),
    (445, '포스트모템 포함 아님?', 1, '중', '담당자 인적 정보', '타임라인', 'RCA', '재발 방지', 9),
    (446, '알림 임계 낮음 문제?', 1, '상', 'Alert Fatigue', 'MTTR 증가', 'Slack→Email', 'Grafana 꺼짐', 9),
    (447, '롤아웃 안전 배포 전략?', 1, '상', 'Feature Flag Gradual', 'Big-bang', 'Force-push', 'CI 캐시 무효', 9),
    (448, '로그 레벨 매핑?', 1, '상', '시작 debug, 재시도 info, 실패 error', '모두 warn', '재시도 fatal', '성공 error', 9),
    (449, '슬라이딩 윈도우 오류율 이유?', 1, '상', '즉시값 대신 경향 파악', '메트릭 안 삭제', '테스트 속도', '다크 테마', 9),
    (450, '오류율 상승 자동 롤백 기능은?', 1, '상', 'Canary 분석 → rollback', 'Merge Queue', 'multi-stage build', 'npm postinstall', 9),
    (451, 'JSX에서 하나의 컴포넌트가 반환할 수 있는 요소는?', 1, '하', '하나의 부모 요소만 반환해야 한다', '여러 개의 형제 요소를 반환할 수 있다', '모든 요소를 <script> 태그로 감싸야 한다', 'JSX에서는 요소 반환이 필요 없다', 10),
    (452, '다음 중 JSX 문법으로 올바른 것은?', 2, '하', '<div class=''container''>', '<div className=''container''>', '<div classname=''container''>', '<div ClassName=''container''>', 10),
    (453, 'React 컴포넌트 이름은 어떤 규칙을 따라야 하는가?', 3, '하', '소문자로 시작해야 한다', '중괄호로 감싸야 한다', '대문자로 시작해야 한다', '파일 이름과 동일해야 한다', 10),
    (454, 'JSX에서 JavaScript 표현식을 사용할 때 어떤 기호를 사용하는가?', 2, '중', '[]', '{}', '()', '<>', 10),
    (455, 'JSX에서 주석을 다는 올바른 방법은?', 3, '중', '// 주석', '<!-- 주석 -->', '{/* 주석 */}', '# 주석', 10),
    (456, '다음 중 JSX에서 유효한 self-closing 태그는?', 3, '중', '<br>', '<img>', '<input/>', '<div></div>', 10),
    (457, '컴포넌트의 기본 구조로 올바른 것은?', 1, '상', 'function App() { return <h1>Hello</h1>; }', 'let App = () => (<h1>Hello</h1>)', 'component App() => <h1>Hello</h1>', 'function App: return (<h1>Hello</h1>)', 10),
    (458, 'JSX 내에서 조건부 렌더링을 위해 주로 사용하는 연산자는?', 3, '상', '??', '==', '&&', '!=', 10),
    (459, '컴포넌트를 export 하는 기본 방법은?', 2, '상', 'module.export = ComponentName;', 'export default ComponentName;', 'require(ComponentName);', 'ComponentName.export();', 10),
    (460, 'JSX에서 style 속성을 사용할 때 올바른 형식은?', 2, '중', 'style=''color: red;''', 'style={{color: ''red''}}', 'style=''{{color: red}}''', 'style=(color: red)', 10),
    (461, 'React에서 부모 컴포넌트가 자식 컴포넌트에 데이터를 전달할 때 사용하는 것은?', 1, '하', 'props', 'state', 'context', 'ref', 10),
    (462, '다음 중 props의 특징으로 올바른 것은?', 2, '하', '변경 가능한 값이다', '부모 → 자식 방향의 데이터 전달이다', '컴포넌트 내부에서만 사용된다', 'setProps로 값을 변경한다', 10),
    (463, '컴포넌트 내부에서 값의 변경에 따라 다시 렌더링되도록 하는 데이터는?', 2, '하', 'props', 'state', 'context', 'variable', 10),
    (464, 'React에서 state를 변경할 수 있는 올바른 방법은?', 3, '중', 'state = newValue', 'this.state.update(newValue)', 'setState(newValue)', 'state.set(newValue)', 10),
    (465, '함수형 컴포넌트에서 state를 사용하기 위해 import해야 할 Hook은?', 2, '중', 'useEffect', 'useState', 'useReducer', 'useMemo', 10),
    (466, '다음 중 useState의 기본 사용법으로 옳은 것은?', 3, '중', 'const state = useState(0)', 'let [state] = useState(0)', 'const [count, setCount] = useState(0)', 'state, setState = useState(0)', 10),
    (467, 'props를 통해 전달된 값을 변경하려고 할 때의 올바른 대응은?', 1, '상', 'setState로 복사본을 변경한다', 'props 값을 직접 변경한다', 'ref를 사용해 수정한다', 'forceUpdate로 무시하고 렌더링한다', 10),
    (468, 'state는 다음 중 어느 시점에 React가 컴포넌트를 다시 렌더링하도록 만드는가?', 1, '상', 'state 변경 시', 'props 선언 시', '컴포넌트 mount 시', 'CSS 클래스가 바뀔 때', 10),
    (469, '다음 중 props와 state의 공통점은?', 2, '상', '컴포넌트 간 공유 가능', '변경 시 UI 자동 업데이트', '함수형 컴포넌트에서만 사용', '직접 수정 가능', 10),
    (470, 'props의 타입을 미리 지정하여 유효성 검사를 하고 싶을 때 사용하는 것은?', 2, '상', 'TypeGuard', 'PropTypes', 'TypeScript', 'validateProps', 10),
    (471, 'React에서 클릭 이벤트를 등록할 때 사용하는 속성은?', 1, '하', 'onClick', 'onclick', 'click', 'addEventListener', 10),
    (472, 'SyntheticEvent의 기본 동작을 취소하려면 이벤트 객체에서 어떤 메서드를 호출해야 하는가?', 1, '하', 'preventDefault()', 'stopPropagation()', 'cancelBubble()', 'halt()', 10),
    (473, '다음 중 && 연산자를 이용한 조건부 렌더링으로 올바른 것은?', 1, '하', '{isLoggedIn && <Dashboard />}', '{isLoggedIn ? <Dashboard />}', '{isLoggedIn || <Dashboard />}', 'isLoggedIn && <Dashboard />', 10),
    (474, '이벤트 핸들러에 인자를 전달하기 위한 가장 일반적인 방법은?', 1, '중', 'onClick={() => handleClick(id)}', 'onClick={handleClick(id)}', 'onClick={handleClick.bind(this, id)()}', 'onClick="handleClick(id)"', 10),
    (475, '삼항 연산자를 사용한 조건부 렌더링 예시로 적절한 것은?', 1, '중', '{isLoggedIn ? <Logout /> : <Login />}', '{isLoggedIn && <Login /> : <Logout />}', '{isLoggedIn ? <Login />}', '{<Login /> ? isLoggedIn : <Logout />}', 10),
    (476, '컴포넌트가 특정 조건에서 아무것도 렌더링하지 않도록 하려면 일반적으로 무엇을 반환하는가?', 1, '중', 'null', 'undefined', ''''' (빈 문자열)', 'false', 10),
    (477, '이벤트 버블링을 중단하려면 SyntheticEvent에서 어떤 메서드를 호출해야 하는가?', 1, '상', 'stopPropagation()', 'preventDefault()', 'stopBubble()', 'halt()', 10),
    (478, '다음 중 조건에 따라 클래스 이름을 동적으로 지정한 올바른 JSX 구문은?', 1, '상', '<div className={isActive ? ''active'' : ''''}></div>', '<div class=''isActive && active''></div>', '<div className=''isActive ? active''></div>', '<div className={isActive && ''active''}></div>', 10),
    (479, 'React에서 SyntheticEvent 객체는 이벤트 핸들러 종료 후 값을 재사용할 수 없는데, 이를 예외적으로 보존하려면 호출해야 하는 메서드는?', 1, '상', 'persist()', 'keep()', 'save()', 'cache()', 10),
    (480, '다음 코드가 0을 렌더링하는 문제를 방지하기 위한 권장 방법은? {messages.length && <Badge count={messages.length} />}', 1, '상', 'messages.length > 0 && <Badge count={messages.length} />', 'messages.length || <Badge count={messages.length} />', '{messages.length !== 0 && <Badge count={messages.length} />}', 'messages.length && Badge(count={messages.length})', 10),
    (481, '배열을 JSX로 변환할 때 가장 흔히 사용하는 배열 메서드는?', 1, '하', 'map()', 'forEach()', 'filter()', 'reduce()', 10),
    (482, 'key prop은 일반적으로 어디에 지정해야 하는가?', 1, '하', 'map()이 반환하는 각 형제 요소의 최상위 태그', 'ul·ol 같은 부모 컨테이너', '리스트 내부 모든 하위 요소', 'key prop은 필수가 아니다', 10),
    (483, 'React key에 대한 기본 규칙으로 올바른 것은?', 1, '하', '형제 사이에서 고유해야 한다', '페이지 전체에서 절대 고유해야 한다', '숫자만 사용할 수 있다', '렌더마다 새로운 값을 부여해야 한다', 10),
    (484, '다음 중 인덱스를 key로 사용해도 비교적 안전한 경우는?', 1, '중', '항목이 절대 추가·삭제·재정렬되지 않는 정적 목록', '사용자가 드래그로 순서를 바꾸는 목록', '동적으로 삽입·삭제되는 Todo 리스트', '컨트롤된 input 필드를 가진 양방향 폼', 10),
    (485, 'key를 생략하면 React가 주로 어떤 반응을 보이는가?', 1, '중', '개발자 콘솔에 경고를 출력한다', '컴파일 오류가 발생한다', '렌더링이 완전히 중단된다', '성능이 자동으로 최적화된다', 10),
    (486, '다음 중 Fragment에 key를 부여하는 올바른 문법은?', 1, '중', '<React.Fragment key={item.id}>...</React.Fragment>', '<Fragment key>{...}</Fragment>', '<></> key={item.id}', '<Fragment id={item.id}>...</Fragment>', 10),
    (487, '렌더마다 Math.random() 값을 key로 사용하면 주로 발생하는 문제는?', 1, '상', '모든 자식이 매번 언마운트·리마운트되어 상태가 초기화된다', '컴파일 타임 타입 오류가 발생한다', '브라우저 캐시가 비활성화된다', 'React가 diff 과정을 건너뛴다', 10),
    (488, '리스트가 자주 재정렬될 때 가장 바람직한 key 선택은?', 1, '상', '데이터베이스에서 받은 고유 id', '배열 길이', 'Date.now()로 만든 타임스탬프', '요소의 화면 좌표값', 10),
    (489, '중첩(map 안의 map) 리스트를 렌더링할 때 key를 꼭 부여해야 하는 위치는?', 1, '상', '각 map이 반환하는 최상위 형제 요소', '가장 바깥 컨테이너 한 곳만', '가장 안쪽 요소 한 곳만', 'key는 한 레벨에서만 허용된다', 10),
    (490, '다음 중 key prop에 대한 설명으로 옳지 않은 것은?', 4, '상', '문자열 또는 숫자처럼 직렬화 가능한 값이어야 한다', '컴포넌트가 재사용되는 동안 변하지 않아야 한다', 'React diff 알고리즘이 요소 정체성을 추적할 때 사용한다', '렌더링 간 변경하면 DOM 최적화가 강화된다', 10),
    (491, '함수형 컴포넌트에서 전역 컨텍스트 값을 읽어올 때 사용하는 Hook은?', 1, '하', 'useContext', 'useState', 'useReducer', 'useMemo', 10),
    (492, '사용자 정의 Hook을 만들 때 반드시 지켜야 하는 명명 규칙은?', 1, '하', 'use로 시작해야 한다', '대문자로 시작해야 한다', 'with로 시작해야 한다', 'Hook 접미사를 붙여야 한다', 10),
    (493, 'useEffect의 두 번째 인수에 빈 배열([])을 전달하면 언제 실행되는가?', 1, '하', '컴포넌트가 처음 마운트될 때만', '모든 렌더링마다', '의존성 값이 변경될 때마다', '언마운트될 때만', 10),
    (494, 'useRef로 생성한 ref.current 값의 핵심 특징은?', 1, '중', '렌더 사이에 값이 바뀌어도 재렌더링을 일으키지 않는다', '값이 변경되면 자동으로 상태 업데이트가 발생한다', 'DOM 엘리먼트에만 사용할 수 있다', '매 렌더링마다 새로운 객체가 생성된다', 10),
    (495, '복잡한 상태 전이를 깔끔하게 관리하기 위해 useState 대신 권장되는 Hook은?', 1, '중', 'useReducer', 'useCallback', 'useMemo', 'useRef', 10),
    (496, '계산 비용이 큰 값을 메모이제이션하여 렌더링 성능을 최적화할 때 사용하는 Hook은?', 1, '중', 'useMemo', 'useEffect', 'useLayoutEffect', 'useCallback', 10),
    (497, '다음 코드에서 handleClick 함수가 매 렌더링마다 새로 생성되는 문제를 방지하려면?', 1, '상', 'const handleClick = useCallback(() => setCount(c => c + 1), []);', 'const handleClick = useMemo(() => () => setCount(c => c + 1), []);', 'const handleClick = useEffect(() => setCount(c => c + 1), []);', 'const handleClick = useRef(() => setCount(c => c + 1));', 10),
    (498, 'useEffect 콜백이 반환하는 함수의 주 용도는?', 1, '상', '이전 effect를 정리(clean-up)하는 데 사용된다', '의존성 배열을 강제로 재계산한다', '렌더링 결과를 직접 DOM에 삽입한다', '상태 업데이트를 배치(batching)한다', 10),
    (499, '자식 컴포넌트의 DOM 혹은 인스턴스에 부모가 접근할 수 있도록 만드는 고급 기술은?', 1, '상', 'forwardRef', 'memo', 'lazy', 'StrictMode', 10),
    (500, 'Hooks의 핵심 규칙으로 옳지 않은 것은?', 2, '상', 'Hook은 함수형 컴포넌트 최상위에서만 호출해야 한다', 'Hook은 조건문·반복문 안에서 자유롭게 호출할 수 있다', '커스텀 Hook 내부에서도 다른 Hook을 호출할 수 있다', 'Class 컴포넌트에서는 Hook을 사용할 수 없다', 10),
    (501, 'Redux의 핵심 개념은?', 2, '하', '컴포넌트 상태 공유', '단일 상태 트리', '다중 스토어 구조', '컴파일 시간 상태', 11),
    (502, 'Redux에서 상태를 변경할 수 있는 유일한 방법은?', 3, '하', 'Reducer 호출', 'Store 직접 수정', 'Action dispatch', 'State mutation', 11),
    (503, 'Redux에서 상태를 저장하는 객체는?', 1, '하', 'store', 'reducer', 'action', 'component', 11),
    (504, 'Redux의 세 가지 핵심 원칙 중 아닌 것은?', 2, '중', '상태는 단일 객체로 저장된다', '상태는 직접 수정할 수 있다', '상태 변경은 순수 함수로 수행된다', '상태는 읽기 전용이다', 11),
    (505, 'Redux를 사용하는 주요 이유는?', 2, '중', '성능 향상', '상태 공유와 예측 가능한 흐름', '렌더링 속도 증가', '자동 라우팅', 11),
    (506, 'Redux의 상태는 어떤 성격을 가진다?', 3, '중', '비순차적', '비동기적', '불변(immutable)', '동적 변경 가능', 11),
    (507, 'React에서 Redux를 연결하는 가장 일반적인 라이브러리는?', 1, '상', 'react-redux', 'redux-connect', 'react-context', 'redux-react', 11),
    (508, 'Redux의 동작 방식에 가장 가까운 비유는?', 1, '상', '게시판에 메모 남기기', '직접 수정', '데이터베이스 삽입', '로컬스토리지 저장', 11),
    (509, 'Redux 상태 트리에서 상태를 변경하는 순수 함수는?', 3, '상', 'action', 'dispatcher', 'reducer', 'store', 11),
    (510, 'Redux는 어떤 디자인 패턴에 기반하고 있는가?', 3, '상', 'MVC', 'Observer', 'Flux', 'Factory', 11),
    (511, 'Redux에서 액션 객체는 어떤 필드를 반드시 포함해야 하는가?', 2, '하', 'payload', 'type', 'value', 'dispatch', 11),
    (512, 'Reducer 함수의 주요 특징은?', 3, '하', '비결정적 함수', '부작용을 가진 함수', '순수 함수', '비동기 함수', 11),
    (513, '리듀서는 어떤 값을 반환해야 하는가?', 2, '하', 'dispatch 함수', '변경된 상태', '액션 객체', '이벤트 객체', 11),
    (514, '다음 중 올바른 액션 생성자 함수는?', 4, '중', 'create(type)', 'generateAction()', 'dispatchAction()', 'function that returns a type and optional payload', 11),
    (515, '액션 생성자(action creator)는 무엇을 반환하는가?', 3, '중', 'dispatch', 'reducer', '액션 객체', '상태 트리', 11),
    (516, '리듀서가 상태를 변경할 수 있는 조건은?', 2, '중', '외부 상태 참조', '새로운 상태 객체 반환', '상태 직접 수정', 'DOM 접근', 11),
    (517, '여러 개의 리듀서를 하나로 합치기 위해 사용하는 함수는?', 3, '상', 'combine()', 'mergeReducers()', 'combineReducers()', 'createReducers()', 11),
    (518, '리듀서 내부에서 상태를 변경할 때 가장 중요한 규칙은?', 3, '상', '기존 상태를 직접 수정', 'payload에 따라 조건 분기', '새 상태를 복사 후 반환', 'state를 삭제 후 생성', 11),
    (519, 'dispatch는 어떤 역할을 하는가?', 1, '상', '리듀서 실행', '상태 조회', '스토어 생성', '미들웨어 실행', 11),
    (520, 'type 값이 없는 액션을 dispatch하면?', 2, '상', '에러 발생', '무시됨', '무작위 처리', 'store 초기화', 11),
    (521, 'Redux에서 상태를 저장하는 핵심 객체는?', 2, '하', 'provider', 'store', 'context', 'reducer', 11),
    (522, '스토어를 생성할 때 사용하는 함수는?', 1, '하', 'createStore()', 'makeStore()', 'initStore()', 'buildStore()', 11),
    (523, 'Redux에서 상태를 조회하는 함수는?', 1, '하', 'getState()', 'useState()', 'state()', 'readState()', 11),
    (524, '스토어에 리듀서를 연결하는 역할은?', 3, '중', 'dispatch()', 'subscribe()', 'combineReducers()', 'reducer()', 11),
    (525, 'React와 Redux를 연결하는 최상위 컴포넌트는?', 1, '중', 'Provider', 'Connect', 'ReduxWrapper', 'StoreBridge', 11),
    (526, '스토어에서 구독을 해제하는 방법은?', 1, '중', 'unsubscribe()', 'remove()', 'detach()', 'off()', 11),
    (527, '상태 변경 시마다 실행되는 함수를 등록하려면?', 1, '상', 'subscribe()', 'watch()', 'track()', 'observer()', 11),
    (528, 'Redux에서 상태 변경이 일어나면 어떤 방식으로 UI가 갱신되는가?', 3, '상', '자동 갱신', 'store에서 직접 렌더링', '구독 함수 호출', 'action에서 직접 수정', 11),
    (529, 'store.dispatch()는 어떤 역할을 수행하는가?', 2, '상', '리듀서 초기화', '액션 전달 및 상태 변경', '상태 초기화', 'UI 리렌더링', 11),
    (530, 'Redux에서 상태는 어떤 구조로 저장되는가?', 3, '상', '클래스 객체', 'Map', '단일 JSON 객체', '배열 트리', 11),
    (531, 'Redux 미들웨어의 주된 목적은?', 2, '하', '스토어 생성', '비동기 로직 처리', 'UI 렌더링', '액션 강제 취소', 11),
    (532, 'Redux에서 미들웨어를 적용할 때 사용하는 함수는?', 1, '하', 'applyMiddleware()', 'useMiddleware()', 'createMiddleware()', 'bindMiddleware()', 11),
    (533, 'Redux에서 비동기 액션을 처리하기 위해 사용하는 대표적 미들웨어는?', 1, '하', 'redux-thunk', 'redux-loop', 'redux-saga', 'redux-promise', 11),
    (534, 'redux-thunk 미들웨어를 사용하면 액션 생성자가 반환할 수 있는 것은?', 3, '중', '객체만 가능', '문자열', '함수', '숫자', 11),
    (535, 'redux-saga는 어떤 문법을 활용하는가?', 3, '중', 'callback', 'async/await', 'generator', 'observable', 11),
    (536, '비동기 요청 중 상태를 관리하기 위한 일반적인 상태 값은?', 1, '중', 'loading, success, error', 'fetch, render, complete', 'start, wait, end', 'idle, go, stop', 11),
    (537, 'redux-logger의 역할은?', 3, '상', '에러 처리', '비동기 요청', '상태 변경 기록 출력', '로딩 스피너 표시', 11),
    (538, 'thunk 함수 내부에서 dispatch를 호출하는 이유는?', 3, '상', '에러를 던지기 위해', '상태를 초기화하기 위해', '비동기 완료 후 상태 변경하기 위해', '스토어 삭제하기 위해', 11),
    (539, '미들웨어는 액션과 리듀서 사이에서 어떤 역할을 하는가?', 2, '상', '액션 필터링', '액션 로깅 및 비동기 처리', '컴포넌트 렌더링', 'HTML 반환', 11),
    (540, '비동기 요청 시 공통된 처리 로직을 중앙화하려면 어떻게 해야 하는가?', 3, '상', '리듀서에 작성', '컴포넌트 내부 처리', '미들웨어에서 처리', '스토어에서 처리', 11),
    (541, 'Redux Toolkit에서 스토어를 생성하는 함수는?', 3, '하', 'createStore()', 'initStore()', 'configureStore()', 'setupStore()', 11),
    (542, 'Redux Toolkit은 어떤 목적을 가지고 설계되었는가?', 2, '하', '성능 향상', '코드 간결성 및 표준화', '미들웨어 제거', '상태 공유 방지', 11),
    (543, 'Redux Toolkit에서 액션 생성과 리듀서를 동시에 정의할 수 있는 함수는?', 2, '하', 'createReducer()', 'createSlice()', 'combineReducer()', 'createAction()', 11),
    (544, 'createSlice로 생성한 리듀서의 액션은 어디에 정의되는가?', 1, '중', 'slice.actions', 'slice.reducers', 'slice.dispatch', 'slice.state', 11),
    (545, 'Redux Toolkit에서 상태 불변성 유지를 위해 사용하는 라이브러리는?', 2, '중', 'Immutable.js', 'Immer', 'ProxyState', 'DraftState', 11),
    (546, 'Redux Toolkit에서 비동기 처리를 위해 사용하는 함수는?', 1, '중', 'createAsyncThunk()', 'useEffect()', 'thunkReducer()', 'createThunk()', 11),
    (547, 'Redux Toolkit에서 slice를 사용할 때 필요한 속성이 아닌 것은?', 4, '상', 'name', 'initialState', 'reducers', 'selectors', 11),
    (548, 'Redux Toolkit에서 extraReducers의 주요 용도는?', 2, '상', '미들웨어 등록', '비동기 액션 처리', '스토어 설정', '로컬 상태 저장', 11),
    (549, 'Redux Toolkit은 어떤 미들웨어를 기본 포함하는가?', 1, '상', 'redux-thunk', 'redux-logger', 'redux-saga', 'redux-observable', 11),
    (550, 'Redux Toolkit에서 slice로부터 리듀서를 가져올 때 사용하는 속성은?', 2, '상', 'slice.state', 'slice.reducer', 'slice.actions', 'slice.dispatch', 11),
    (551, '클라이언트 잘못된 요청(예: JSON 스키마 위반)에 대한 권장 HTTP 상태 코드는?', 1, '하', '400 Bad Request', '401 Unauthorized', '500 Internal Server Error', '409 Conflict', 12),
    (552, '인증 헤더가 누락된 요청에 서버가 반환해야 할 표준 상태 코드는?', 1, '하', '401 Unauthorized', '403 Forbidden', '412 Precondition Failed', '502 Bad Gateway', 12),
    (553, 'REST API에서 존재하지 않는 리소스에 대한 GET 요청 시 적절한 응답 코드는?', 1, '하', '404 Not Found', '410 Gone', '204 No Content', '422 Unprocessable Entity', 12),
    (554, 'RFC 7807 ‘Problem Details for HTTP APIs’가 권장하는 기본 Content-Type은?', 1, '중', 'application/problem+json', 'application/json; problem', 'text/problem', 'application/vnd.error+json', 12),
    (555, 'RFC 7807 JSON 응답 예시에서 반드시 포함해야 하는 필드는?', 1, '중', 'title', 'instance', 'detail', 'errors', 12),
    (556, '다음 중 4xx와 5xx 상태 코드 차이에 대한 설명으로 옳지 않은 것은?', 4, '중', '4xx는 클라이언트 오류, 5xx는 서버 오류를 나타낸다', '5xx는 재시도 가능성이 4xx보다 높다', '4xx 오류라도 Problem Details 바디를 포함할 수 있다', '4xx는 절대 재시도해서는 안 된다', 12),
    (557, '동일 자원 중복 생성 시 서버가 반환해도 멱등성 규칙을 깨지지 않는 상태 코드는?', 1, '상', '409 Conflict', '201 Created', '202 Accepted', '302 Found', 12),
    (558, 'Problem Details 바디에 커스텀 ‘code’ 정수 필드를 두는 주된 이점은?', 1, '상', '클라이언트가 로컬라이징 메시지를 매핑하기 쉽다', 'HTTP 상태 코드 전송을 생략할 수 있다', 'JSON 패싱을 건너뛸 수 있다', 'CORS 프리플라이트를 우회한다', 12),
    (559, '다음 중 idempotent 메서드가 아닌 것은?', 1, '상', 'POST', 'PUT', 'DELETE', 'HEAD', 12),
    (560, '클라이언트가 429 Too Many Requests 응답을 받을 때 재시도 시점을 알기 위해 확인해야 하는 헤더는?', 1, '상', 'Retry-After', 'Warning', 'WWW-Authenticate', 'Content-Encoding', 12),
    (561, '브라우저 네트워크 오류 vs HTTP 오류 구분 방법은?', 1, '하', '응답 없음 & error.request 존재 → 네트워크 오류', 'status 0이면 HTTP 오류', 'message에 Network Error 포함 시 HTTP 오류', 'https로 시작시 네트워크 오류 없음', 12),
    (562, '422 오류 UX 비추천 패턴은?', 1, '하', '모달 전체 가리고 중앙만 오류', '필드 인라인 표시', '폼 상단 요약', '스낵바 알림', 12),
    (563, '전역 오류 핸들러 역할은?', 1, '하', '로그인 만료 등 공통 처리', '레이아웃 교체', 'CSS 초기화', 'History 재설정', 12),
    (564, '오프라인 GET 요청 전략은?', 1, '중', '대기열 저장 후 복구 시 재시도', '캐시 비우고 에러', '503 구성', '무한 로딩', 12),
    (565, 'Error Boundary 해결 문제는?', 1, '중', '렌더 예외로 인한 흰 화면', 'API 500 재시도', 'CORS 차단', 'WebSocket', 12),
    (566, '중복 POST 방지 클라이언트 조치?', 1, '중', '이전 요청 취소 AbortController', 'Cache-Control no-store', 'POST→GET', '로그 제거', 12),
    (567, 'axios 취소 vs 네트워크 오류 구분 프로퍼티?', 1, '상', 'error.code === ''ERR_CANCELED''', 'message 포함 Network', 'status -1', 'timeout 0', 12),
    (568, '국제화 오류 메시지 비추천 방법은?', 1, '상', '서버가 완제품 문구 제공', '클라이언트 코드 매핑', 'title/detail 키 사용', '템플릿 변수 치환', 12),
    (569, '모바일 에러/재요청 데이터 최소화 우선 고려는?', 1, '상', '오프라인 감지 후 백오프', '해상도 다운', '캐시 삭제', 'UDP 강제', 12),
    (570, '사용자 메시지+디버그 정보 구조 권장?', 1, '상', 'UI 요약 & 콘솔 raw trace', 'alert 모두', '서버 HTML 오류 페이지', '쿠키 저장', 12),
    (571, '멱등 메서드는?', 1, '하', 'PUT', 'POST', 'PATCH', 'CONNECT', 12),
    (572, '고정 3초 4번 총 지연?', 1, '하', '12초', '9초', '6초', '3초', 12),
    (573, '지수 1s 배수2 3회 누적?', 1, '중', '7 s', '6 s', '5 s', '4 s', 12),
    (574, 'Retry-After 120 권장 재시도?', 1, '중', '120초 이상 후', '60초', '즉시', '무시', 12),
    (575, 'POST 안전 재시도 보완책?', 1, '중', 'Idempotency-Key 헤더', 'HTTP/2 업그레이드', '빈 바디', 'PUT 사용', 12),
    (576, '재시도 고려 가능한 408/409?', 1, '중', '408 Request Timeout', '409 Conflict', '400', '401', 12),
    (577, 'Full Jitter 목적은?', 1, '상', '서버 폭주 완화', '총 지연 줄임', 'TCP 우회', 'TLS 감소', 12),
    (578, '재시도 불가 오류 유형?', 1, '상', '400 필드 검증', '502', '408', '429', 12),
    (579, '조건부 PUT 재시도 안전 이유?', 1, '상', 'ETag 버전 동일 시만 수행', 'PUT 캐싱', 'HTTP/3 전용', '브라우저 보장', 12),
    (580, '모바일 TCP 끊김 POST 문제 감소?', 1, '상', '짧은 타임아웃 + 멱등 키', 'HTTP 1.0', '재시도 끔', '인증 제거', 12),
    (581, 'Circuit Closed→Open 조건?', 1, '하', '연속 실패 임계', '성공 200', '301', '쿠키 만료', 12),
    (582, 'Half-Open 성공 전이?', 1, '하', 'Closed', 'Open', 'Forced-Open', 'Isolated', 12),
    (583, 'Open 상태 바로 실패 목적?', 1, '하', '백엔드 부하 차단', '캐시 무효', 'TLS 시간 줄임', 'DNS 재해석', 12),
    (584, '재시도+CB 충돌 위험?', 1, '중', '과도 재시도→즉시 Open', 'Jitter 제거', 'Retry-After 무시', 'HTTP/2 끊김', 12),
    (585, 'Coalescing 효과 시나리오?', 1, '중', '같은 리소스 다수 GET', '다른 POST', 'WebSocket', 'SSE', 12),
    (586, 'Equal Jitter 이점 아닌 것?', 2, '중', '스파이크 완화', '최대/최소 지연 예측', 'Full Jitter보다 대기 줄임', '서버 완화', 12),
    (587, 'Fallback 전략 사례?', 1, '상', '캐시된 데이터로 표시', '재시도 0', 'CB 강제 Close', 'Retry-After 무시', 12),
    (588, 'Hedged Request 주의점?', 1, '상', '멱등 보장 필요', 'DNS TTL 0', 'KEEP-ALIVE 끊기', 'TLS 1.3', 12),
    (589, 'Max-Retry-TTL 목적?', 1, '상', '무제한 지연 방지', 'TCP FIN 감소', '브라우저 버그 회피', 'Keep-Alive 증가', 12),
    (590, 'CB 실시간 튜닝 기법?', 1, '상', 'Feature Flag 기반 임계 조정', '콘솔 변수', '헤더 하드코드', '빌드 상수', 12),
    (591, '자주 쓰는 SLO 쌍은?', 1, '하', '가용성·오류율', 'CPU·메모리', '빌드시간·커버리지', 'PR 리뷰', 12),
    (592, 'P99 증가 의심 원인?', 1, '하', '소수 요청 재시도 지연', '평균 느려짐', '404 급증', '로깅 오류', 12),
    (593, '분산 추적 유용 이유?', 1, '중', 'Trace로 재시도 체인 시각화', '헤더 암호화', '로그 제거', '패킷 캡처', 12),
    (594, 'Chaos 테스트 간단 도구?', 1, '중', 'MSW random error', 'CSS Lint', 'Bundle Analyzer', 'Lighthouse', 12),
    (595, '포스트모템 포함 아님?', 1, '중', '담당자 인적 정보', '타임라인', 'RCA', '재발 방지', 12),
    (596, '알림 임계 낮음 문제?', 1, '상', 'Alert Fatigue', 'MTTR 증가', 'Slack→Email', 'Grafana 꺼짐', 12),
    (597, '롤아웃 안전 배포 전략?', 1, '상', 'Feature Flag Gradual', 'Big-bang', 'Force-push', 'CI 캐시 무효', 12),
    (598, '로그 레벨 매핑?', 1, '상', '시작 debug, 재시도 info, 실패 error', '모두 warn', '재시도 fatal', '성공 error', 12),
    (599, '슬라이딩 윈도우 오류율 이유?', 1, '상', '즉시값 대신 경향 파악', '메트릭 안 삭제', '테스트 속도', '다크 테마', 12),
    (600, '오류율 상승 자동 롤백 기능은?', 1, '상', 'Canary 분석 → rollback', 'Merge Queue', 'multi-stage build', 'npm postinstall', 12),
    (601, 'Vue 템플릿에서 데이터 바인딩을 위한 기본 구문은?', 1, '하', '{{  }}', '[[  ]]', '{{{  }}}', '(())', 13),
    (602, 'Vue 인스턴스를 생성할 때 가장 먼저 호출되는 라이프사이클 훅은?', 1, '하', 'beforeCreate', 'created', 'mounted', 'beforeMount', 13),
    (603, '템플릿에서 HTML 특수문자를 이스케이프하지 않고 그대로 출력하려면 사용하는 구문은?', 1, '하', 'v-html="rawHtml"', '{{ rawHtml }}', 'v-bind:html="rawHtml"', 'v-text="rawHtml"', 13),
    (604, '다음 중 Vue 템플릿에 JavaScript 표현식을 사용할 수 없는 위치는?', 3, '중', 'v-bind 디렉티브 값', 'v-on 디렉티브 핸들러', '속성 이름(attribute key)', '텍스트 보간(interpolation) 안', 13),
    (605, 'v-bind:class에 객체를 전달할 때, 클래스가 적용되는 조건은?', 1, '중', '키에 대응하는 값이 true일 때', '키가 문자열이 아닐 때', '값이 null일 때', '객체 길이가 0일 때', 13),
    (606, 'data 옵션에서 함수가 아닌 객체를 반환하면 발생하는 문제는?', 1, '중', '모든 인스턴스가 동일 객체를 공유해 반응성 오류', '템플릿 파싱이 실패하여 빌드 중단', 'watcher가 자동으로 해제됨', 'props 전달이 차단됨', 13),
    (607, '‘this.message’가 DOM에 반영되는 시점은? (mounted 훅 내부에서 변경)', 1, '상', 'mounted 훅 직후에 반영된다', 'nextTick 이후 첫 렌더링 때 반영된다', 'updated 훅 이후에만 반영된다', 'DOM에는 절대 반영되지 않는다', 13),
    (608, '템플릿에서 v-bind 축약형으로 올바른 것은?', 1, '상', ':title="msg"', '.bind(title)="msg"', '@bind:title="msg"', '#title="msg"', 13),
    (609, 'v-on:click="count++" 구문이 예상대로 동작하려면 count는 어디에 있어야 하는가?', 1, '상', 'data()가 반환하는 객체', 'methods 안', 'computed 안', 'watch 안', 13),
    (610, '다음 중 인스턴스 옵션 중 필수가 아닌 것은?', 1, '상', 'methods', 'data', 'el / mount 대상', 'template 또는 render', 13),
    (611, 'Vue 반응형 시스템의 핵심 개념은?', 1, '하', '데이터 변경 ↔ DOM 자동 동기화', '가상 DOM을 직접 조작', '양방향 바인딩 없는 단방향 흐름', 'DOM 변화를 수동으로 감지', 13),
    (612, '계산된 속성(computed)의 특징은?', 1, '하', '의존 데이터가 변할 때만 재평가', '무조건 매 렌더링마다 실행', 'DOM 이벤트 발생 시에만 실행', '블로킹 I/O를 자동 회피', 13),
    (613, 'Vue 3에서 ref(0)으로 반환되는 값의 내부 형식은?', 1, '하', '객체 { value: 0 } (Proxied)', 'Proxy 함수', '숫자 0 그 자체', 'WeakMap', 13),
    (614, 'watch와 computed의 주요 차이점으로 올바른 것은?', 1, '중', 'watch는 부수 효과(side-effect) 실행용', 'watch는 캐싱된 결과를 반환', 'computed는 비동기 호출만 지원', 'computed는 의존성 추적을 하지 않음', 13),
    (615, 'reactive()에 전달해도 반응형이 되지 않는 값은?', 1, '중', 'Map 또는 Set', '평범한 Object', '배열(Array)', '중첩 객체가 없는 null-free 리터럴', 13),
    (616, 'DOM 갱신 후 실행하려면 다음 코드 뒤에 무엇을 해야 하는가? count.value++;', 1, '중', 'await nextTick() 뒤에 console.log 실행', 'flushSync()로 감싼다', 'watchEffect 안에서 실행', 'count.value += 0 으로 강제 트리거', 13),
    (617, 'Vue 3 반응형 시스템이 Vue 2의 defineProperty 대신 사용하는 기술은?', 1, '상', 'ES6 Proxy', 'MutationObserver', 'WeakRef', 'Reflect.metadata', 13),
    (618, 'shallowReactive()를 사용할 때의 이점은?', 1, '상', '루트 레벨만 반응형으로 만들어 메모리·성능 절약', '깊은 중첩 객체까지 자동 추적', 'ref와 동일한 API 제공', 'Computed 속성을 자동 생성', 13),
    (619, 'watch 구성에서 deep:true, immediate:true가 비효율적인 경우는?', 1, '상', '변경 폭이 큰 대용량 중첩 객체를 감시', '원시형(ref) 값을 감시', 'deep 옵션 false', 'immediate false', 13),
    (620, 'watchEffect가 watch보다 적합한 상황은?', 1, '상', '의존 대상을 명시하기 힘든 복합 반응형 로직', '특정 하나의 ref 변경에만 반응', '비동기 API 호출 후 에러 처리', 'props 유효성 검증', 13),
    (621, '요소를 조건부로 렌더링하기 위한 기본 디렉티브는?', 1, '하', 'v-if', 'v-for', 'v-bind', 'v-html', 13),
    (622, '리스트 렌더링에 사용하는 디렉티브는?', 1, '하', 'v-for', 'v-show', 'v-model', 'v-once', 13),
    (623, '양방향 폼 바인딩을 제공하는 디렉티브는?', 1, '하', 'v-model', 'v-text', 'v-pre', 'v-slot', 13),
    (624, 'v-show 디렉티브의 특징으로 올바른 것은?', 1, '중', 'DOM을 한 번만 렌더링하고 display 속성을 토글', '조건이 false면 노드를 아예 생성하지 않는다', '렌더 비용이 v-if보다 높다', '서버 사이드 렌더링에서만 사용된다', 13),
    (625, 'v-bind .camel 수식어 기능은?', 1, '중', 'kebab-case 속성명을 camelCase로 변환', '문자열 값을 자동으로 number로 변환', 'HTML을 이스케이프하지 않고 출력', 'true 값을 전달하면 속성을 제거', 13),
    (626, 'mounted 훅은 언제 호출되는가?', 1, '중', 'DOM 삽입 직후 최초 한 번', 'updated 훅 직후', '컴포넌트 생성 직후', 'beforeUnmount 직전', 13),
    (627, '컴포넌트 제거 직전에 호출되는 훅은?', 1, '상', 'beforeUnmount', 'unmounted', 'beforeUpdate', 'errorCaptured', 13),
    (628, 'Composition API에서 DOM 삽입 후 실행 훅 등록 함수는?', 1, '상', 'onMounted', 'onBeforeMount', 'useMounted', 'setupMounted', 13),
    (629, 'v-on .capture 수식어 역할은?', 1, '상', '이벤트를 캡처 단계에서 처리', '이벤트 버블링 중단', '수신 이벤트를 상위로 전파', '리스너를 한 번만 실행', 13),
    (630, '@keyup.enter 수식어 의미는?', 1, '상', 'Enter 키가 눌렸을 때만 keyup 핸들러 실행', 'keyup 이벤트 캡처 단계', 'Enter 키 아닌 경우 전파 중단', 'keydown 이벤트 변환', 13),
    (631, '부모 → 자식 데이터 전달 메커니즘은?', 1, '하', 'props', 'slots', 'provide/inject', '$refs', 13),
    (632, '자식이 부모에게 값을 전달할 때 호출하는 메서드는?', 1, '하', '$emit', '$dispatch', '$broadcast', '$send', 13),
    (633, '기본(이름 없는) 슬롯 태그는?', 1, '하', '<slot>', '<slot name="default">', '<template #default>', '<slot-default>', 13),
    (634, 'props 타입 유효성 검사 키는?', 1, '중', 'type', 'validator', 'required', 'default', 13),
    (635, '전역 컴포넌트 등록 API는?', 1, '중', 'app.component()', 'Vue.use()', 'defineComponent()', 'createRenderer()', 13),
    (636, '스코프드 슬롯 템플릿 축약은?', 1, '중', '<template #item="slotProps">', '<slot name="item" :slotProps>', '<slot v-bind="item">', '<template v-slot:itemProps>', 13),
    (637, 'prop 값을 직접 변경 시 결과는?', 1, '상', 'Vue가 경고 출력, 변경은 반응형 아님', '부모 원본 데이터 즉시 변경', '변경 허용되나 반응성 깨짐', '런타임 에러 발생', 13),
    (638, 'Composition API 자식이 v-model 지원하려면 emit 이벤트는?', 1, '상', 'update:modelValue', 'modelValue', 'input', 'change:model', 13),
    (639, 'provide/inject 값을 반응형 유지하려면?', 1, '상', 'reactive() 또는 ref()로 래핑한 값 제공', '원시 값 제공', 'JSON 직렬화', 'watchEffect 반환', 13),
    (640, '슬롯 설명 중 틀린 것은?', 4, '상', '슬롯 콘텐츠는 부모 범위에서 컴파일', '동일 컴포넌트 슬롯 이름은 유일', 'fallback 콘텐츠는 슬롯 비어 있을 때 표시', '스코프드 슬롯에서 자식→부모 데이터', 13),
    (641, 'Vue Router 동적 세그먼트 문법은?', 1, '하', '/users/:id', '/users/{id}', '/users/<id>', '/users/*id', 13),
    (642, 'Pinia 스토어 정의 함수는?', 1, '하', 'defineStore', 'createStore', 'useStore', 'initializeStore', 13),
    (643, '라우터 링크 컴포넌트는?', 1, '하', '<RouterLink>', '<RouterView>', '<LinkTo>', '<RouteLink>', 13),
    (644, 'setup 내 current route 얻기 방법은?', 1, '중', 'const route = useRoute()', 'const route = this.$route', 'import { route } from ''vue-router''', 'const route = getCurrentRoute()', 13),
    (645, 'Pinia actions에서 비동기 함수 정의 추가 설정은?', 1, '중', '별도 설정 없이 async/await 사용', 'defineAsyncActions 플러그인', 'setupStore 옵션 true', 'store.$enableAsync() 호출', 13),
    (646, 'Composition API 의존성 주입 함수 쌍은?', 1, '중', 'provide / inject', 'export / import', 'emit / on', 'dispatch / commit', 13),
    (647, 'history 모드 배포 시 서버 설정 주의?', 1, '상', '모든 경로를 index.html로 우회', '404 캐싱', 'gzip 사용 금지', 'URL에 .html 확장자', 13),
    (648, 'storeToRefs() 사용 이유는?', 1, '상', 'state 속성을 ref로 분해해 반응형 링크 유지', 'actions 자동 바인딩', '스토어 영속화', '게터 비동기 변환', 13),
    (649, 'onBeforeRouteLeave 호출 안 되는 경우는?', 1, '상', '같은 경로, 쿼리만 변경', '다른 컴포넌트 네비게이션', 'router.replace(''/'')', '브라우저 뒤로 가기', 13),
    (650, 'SSR에서 클라이언트 전용 코드 안전 실행 방법?', 1, '상', 'if (typeof window !== ''undefined'') { ... }', 'onServerPrefetch 후 실행', 'await useSSRContext()', 'provide(''client'', true)', 13),
    (651, 'Vuex는 어떤 목적을 가지고 설계되었는가?', 3, '하', '라우팅 관리', '컴포넌트 스타일링', '전역 상태 관리', 'API 연동', 14),
    (652, 'Vuex의 상태는 어디에 저장되는가?', 2, '하', '컴포넌트', 'store', 'getter', 'plugin', 14),
    (653, 'Vuex의 주요 네 가지 구성 요소는?', 3, '하', 'state, view, router, service', 'data, props, methods, computed', 'state, getters, mutations, actions', 'store, plugin, route, controller', 14),
    (654, 'Vuex는 어떤 디자인 패턴에서 영감을 받았는가?', 3, '중', 'MVC', 'MVVM', 'Flux', 'Observer', 14),
    (655, 'Vuex store를 Vue 인스턴스에 주입할 때 사용하는 속성은?', 1, '중', 'store', 'data', 'use', 'provide', 14),
    (656, 'Vuex에서 상태를 변경할 수 있는 유일한 방식은?', 2, '중', 'actions', 'mutations', 'getters', 'methods', 14),
    (657, 'store를 여러 모듈로 분할할 때 사용하는 속성은?', 1, '상', 'modules', 'parts', 'reducers', 'groups', 14),
    (658, 'Vuex는 상태를 어떤 방식으로 관리하는가?', 2, '상', '계층 구조로 분산 저장', '싱글톤 구조의 중앙 집중 저장', '로컬 컴포넌트 상태 저장', '네임스페이스 기반 저장', 14),
    (659, 'Vuex 상태를 컴포넌트에서 사용하기 위한 헬퍼 함수는?', 2, '상', 'useState', 'mapState', 'getState', 'useStore', 14),
    (660, 'Vuex store를 생성하는 함수는?', 1, '상', 'createStore', 'makeStore', 'useStore', 'initStore', 14),
    (661, 'Vuex에서 state는 어떤 역할을 하는가?', 3, '하', '상태 읽기 전용 값', '상태를 변경하는 메서드', '애플리케이션의 중앙 상태', '라우터 정보', 14),
    (662, 'getters의 주 목적은?', 3, '하', '상태 변경', '비동기 처리', '계산된 상태 반환', '상태 초기화', 14),
    (663, 'mutations의 특징은?', 3, '하', '비동기 가능', '상태 변경은 하지 않음', '동기적 상태 변경', '컴포넌트 호출에서만 사용', 14),
    (664, 'getters는 어떤 형식으로 정의되는가?', 1, '중', '객체', '배열', '컴포넌트', 'router', 14),
    (665, 'mutations의 첫 번째 인자는?', 3, '중', 'payload', 'getter', 'state', 'commit', 14),
    (666, 'getters는 어떤 방식으로 호출되는가?', 2, '중', 'this.getters()', 'store.getters.name', 'store.call()', 'state.get()', 14),
    (667, 'Vue 컴포넌트에서 state를 가져오기 위한 헬퍼 함수는?', 2, '상', 'useState', 'mapState', 'connect', 'mapMutations', 14),
    (668, 'commit() 함수는 무엇을 실행하는가?', 2, '상', 'state 읽기', 'mutation 실행', 'action 호출', 'router 이동', 14),
    (669, 'state를 직접 변경하는 것이 권장되지 않는 이유는?', 1, '상', '반응형이 깨짐', '에러 발생', 'state가 읽기 전용이기 때문', 'state는 컴포넌트 전용이기 때문', 14),
    (670, 'getters 내부에서는 무엇을 사용할 수 있는가?', 1, '상', 'state와 다른 getters', 'mutations 호출', '비동기 로직', 'DOM 접근', 14),
    (671, 'Vuex에서 actions의 주된 목적은?', 2, '하', '동기 상태 변경', '비동기 작업 처리', '컴포넌트 생성', '라우터 설정', 14),
    (672, 'actions 내부에서 상태 변경을 위해 사용하는 함수는?', 2, '하', 'state()', 'commit()', 'update()', 'mapState()', 14),
    (673, 'actions는 어떤 값을 반환할 수 있는가?', 3, '하', 'store', 'state', 'promise', 'component', 14),
    (674, 'actions의 첫 번째 인자는?', 2, '중', 'state', 'context', 'rootState', 'dispatch', 14),
    (675, '비동기 요청을 처리한 후 mutation을 호출하려면?', 1, '중', 'dispatch → commit', 'commit → dispatch', 'mapState', 'direct setState', 14),
    (676, 'actions에서 다른 actions를 호출할 때 사용하는 메서드는?', 2, '중', 'commit', 'dispatch', 'invoke', 'runAction', 14),
    (677, 'actions 내부에서 context.commit을 사용하는 이유는?', 3, '상', '뷰 업데이트', '상태 직접 접근', 'mutation 실행', 'getter 계산', 14),
    (678, 'actions에서 API 요청 실패를 처리하는 방법은?', 3, '상', 'errorHandler()', 'throw new Error()', 'try...catch 블록 사용', 'setError()', 14),
    (679, 'actions는 왜 mutation을 직접 호출하지 않고 commit을 사용하는가?', 1, '상', '기능 분리', '보안상 이유', 'Vue 컴포넌트와 독립성 확보', 'strict 모드 때문', 14),
    (680, 'Vuex에서 actions는 언제 호출되는가?', 3, '상', '컴포넌트 렌더링 시', 'watcher에 의해', 'dispatch()로 호출될 때', 'router가 변경될 때', 14),
    (681, 'Pinia는 Vue에서 어떤 역할을 하는가?', 2, '하', '라우팅 처리', '상태 관리', '스타일링 지원', '컴포넌트 등록', 14),
    (682, 'Pinia를 사용하려면 가장 먼저 해야 할 일은?', 3, '하', 'Vue 설치', 'useStore 호출', 'createPinia 생성', 'setupState 실행', 14),
    (683, 'Pinia에서 스토어를 생성하는 함수는?', 1, '하', 'defineStore', 'createStore', 'makeStore', 'setupStore', 14),
    (684, 'defineStore의 첫 번째 인자는?', 2, '중', 'state', 'store 이름', 'actions', 'getter', 14),
    (685, 'Pinia에서 상태를 가져올 때 사용하는 방식은?', 3, '중', 'this.$store.state', 'useStore().state', 'useStore()', 'getState()', 14),
    (686, 'Pinia는 어떤 Vue 기능과 잘 통합되는가?', 2, '중', 'watchEffect', 'Composition API', 'Option API', 'script setup', 14),
    (687, 'Pinia에서 정의한 store를 가져오려면?', 2, '상', 'createStore()', 'useStore()', 'defineStore()', 'getState()', 14),
    (688, 'Pinia는 Vue 3 이전에도 사용할 수 있는가?', 2, '상', '가능하다', 'Vue 2는 미지원', 'Vuex 기반', 'React 전용', 14),
    (689, 'Pinia store는 어떻게 구성되는가?', 1, '상', 'state, actions, getters', 'methods, data, props', 'modules, views', 'only state', 14),
    (690, 'Pinia는 Vue의 어떤 API와 함께 사용하는 것이 권장되는가?', 1, '상', 'setup()', 'created()', 'mounted()', 'methods()', 14),
    (691, 'Pinia를 Vue 앱에 적용하려면 어떤 함수로 등록해야 하는가?', 1, '하', 'app.use(pinia)', 'createPinia(pinia)', 'registerPinia()', 'initPinia()', 14),
    (692, 'Pinia에서 반응형 상태를 만들기 위해 사용하는 Vue 기능은?', 2, '하', 'reactive()', 'ref()', 'computed()', 'watch()', 14),
    (693, 'Pinia의 store는 Vue 컴포넌트 내에서 어떻게 사용되는가?', 3, '하', 'mapStore()', 'this.store', 'useStore()', 'getStore()', 14),
    (694, 'Pinia와 Vue Router를 통합할 때 중요한 설정은?', 3, '중', 'routerView()', 'router.push()', 'store 내부에서 router 사용', '라우터와 store 분리', 14),
    (695, 'Pinia에서의 상태 변화는 Vue DevTools에서 추적 가능한가?', 3, '중', '아니다', '조건부 지원', '기본적으로 지원된다', '설치 필요', 14),
    (696, 'Pinia store를 여러 모듈로 나눌 때 사용하는 패턴은?', 2, '중', 'modules', 'defineStore 별도 파일 분리', 'Vuex 모듈', 'composition mixin', 14),
    (697, 'Pinia store 내부의 상태를 외부에서 반응형으로 가져오기 위해 사용하는 방법은?', 3, '상', 'computed()', 'store.state', 'storeToRefs()', 'ref()', 14),
    (698, 'Pinia는 어떤 패러다임에 더 잘 맞는가?', 2, '상', '옵션 기반 API', 'Composition API', 'Class API', 'Template-only', 14),
    (699, 'Pinia는 Vue의 어떤 기능과 가장 밀접하게 통합되어 있는가?', 2, '상', 'Vue Router', 'setup()', 'transition', 'lifecycle hooks', 14),
    (700, 'Pinia store를 컴포넌트에서 자동 추적하기 위해 사용하는 함수는?', 3, '상', 'reactiveStore()', 'toRefs()', 'storeToRefs()', 'trackStore()', 14),
    (701, 'Vue 템플릿에서 데이터 바인딩을 위한 기본 구문은?', 1, '하', '{{  }}', '[[  ]]', '{{{  }}}', '(())', 15),
    (702, 'Vue 인스턴스를 생성할 때 가장 먼저 호출되는 라이프사이클 훅은?', 1, '하', 'beforeCreate', 'created', 'mounted', 'beforeMount', 15),
    (703, '템플릿에서 HTML 특수문자를 이스케이프하지 않고 그대로 출력하려면 사용하는 구문은?', 1, '하', 'v-html="rawHtml"', '{{ rawHtml }}', 'v-bind:html="rawHtml"', 'v-text="rawHtml"', 15),
    (704, '다음 중 Vue 템플릿에 JavaScript 표현식을 사용할 수 없는 위치는?', 3, '중', 'v-bind 디렉티브 값', 'v-on 디렉티브 핸들러', '속성 이름(attribute key)', '텍스트 보간(interpolation) 안', 15),
    (705, 'v-bind:class에 객체를 전달할 때, 클래스가 적용되는 조건은?', 1, '중', '키에 대응하는 값이 true일 때', '키가 문자열이 아닐 때', '값이 null일 때', '객체 길이가 0일 때', 15),
    (706, 'data 옵션에서 함수가 아닌 객체를 반환하면 발생하는 문제는?', 1, '중', '모든 인스턴스가 동일 객체를 공유해 반응성 오류', '템플릿 파싱이 실패하여 빌드 중단', 'watcher가 자동으로 해제됨', 'props 전달이 차단됨', 15),
    (707, '‘this.message’가 DOM에 반영되는 시점은? (mounted 훅 내부에서 변경)', 1, '상', 'mounted 훅 직후에 반영된다', 'nextTick 이후 첫 렌더링 때 반영된다', 'updated 훅 이후에만 반영된다', 'DOM에는 절대 반영되지 않는다', 15),
    (708, '템플릿에서 v-bind 축약형으로 올바른 것은?', 1, '상', ':title="msg"', '.bind(title)="msg"', '@bind:title="msg"', '#title="msg"', 15),
    (709, 'v-on:click="count++" 구문이 예상대로 동작하려면 count는 어디에 있어야 하는가?', 1, '상', 'data()가 반환하는 객체', 'methods 안', 'computed 안', 'watch 안', 15),
    (710, '다음 중 인스턴스 옵션 중 필수가 아닌 것은?', 1, '상', 'methods', 'data', 'el / mount 대상', 'template 또는 render', 15),
    (711, 'Vue 반응형 시스템의 핵심 개념은?', 1, '하', '데이터 변경 ↔ DOM 자동 동기화', '가상 DOM을 직접 조작', '양방향 바인딩 없는 단방향 흐름', 'DOM 변화를 수동으로 감지', 15),
    (712, '계산된 속성(computed)의 특징은?', 1, '하', '의존 데이터가 변할 때만 재평가', '무조건 매 렌더링마다 실행', 'DOM 이벤트 발생 시에만 실행', '블로킹 I/O를 자동 회피', 15),
    (713, 'Vue 3에서 ref(0)으로 반환되는 값의 내부 형식은?', 1, '하', '객체 { value: 0 } (Proxied)', 'Proxy 함수', '숫자 0 그 자체', 'WeakMap', 15),
    (714, 'watch와 computed의 주요 차이점으로 올바른 것은?', 1, '중', 'watch는 부수 효과(side-effect) 실행용', 'watch는 캐싱된 결과를 반환', 'computed는 비동기 호출만 지원', 'computed는 의존성 추적을 하지 않음', 15),
    (715, 'reactive()에 전달해도 반응형이 되지 않는 값은?', 1, '중', 'Map 또는 Set', '평범한 Object', '배열(Array)', '중첩 객체가 없는 null-free 리터럴', 15),
    (716, 'DOM 갱신 후 실행하려면 다음 코드 뒤에 무엇을 해야 하는가? count.value++;', 1, '중', 'await nextTick() 뒤에 console.log 실행', 'flushSync()로 감싼다', 'watchEffect 안에서 실행', 'count.value += 0 으로 강제 트리거', 15),
    (717, 'Vue 3 반응형 시스템이 Vue 2의 defineProperty 대신 사용하는 기술은?', 1, '상', 'ES6 Proxy', 'MutationObserver', 'WeakRef', 'Reflect.metadata', 15),
    (718, 'shallowReactive()를 사용할 때의 이점은?', 1, '상', '루트 레벨만 반응형으로 만들어 메모리·성능 절약', '깊은 중첩 객체까지 자동 추적', 'ref와 동일한 API 제공', 'Computed 속성을 자동 생성', 15),
    (719, 'watch 구성에서 deep:true, immediate:true가 비효율적인 경우는?', 1, '상', '변경 폭이 큰 대용량 중첩 객체를 감시', '원시형(ref) 값을 감시', 'deep 옵션 false', 'immediate false', 15),
    (720, 'watchEffect가 watch보다 적합한 상황은?', 1, '상', '의존 대상을 명시하기 힘든 복합 반응형 로직', '특정 하나의 ref 변경에만 반응', '비동기 API 호출 후 에러 처리', 'props 유효성 검증', 15),
    (721, '요소를 조건부로 렌더링하기 위한 기본 디렉티브는?', 1, '하', 'v-if', 'v-for', 'v-bind', 'v-html', 15),
    (722, '리스트 렌더링에 사용하는 디렉티브는?', 1, '하', 'v-for', 'v-show', 'v-model', 'v-once', 15),
    (723, '양방향 폼 바인딩을 제공하는 디렉티브는?', 1, '하', 'v-model', 'v-text', 'v-pre', 'v-slot', 15),
    (724, 'v-show 디렉티브의 특징으로 올바른 것은?', 1, '중', 'DOM을 한 번만 렌더링하고 display 속성을 토글', '조건이 false면 노드를 아예 생성하지 않는다', '렌더 비용이 v-if보다 높다', '서버 사이드 렌더링에서만 사용된다', 15),
    (725, 'v-bind .camel 수식어 기능은?', 1, '중', 'kebab-case 속성명을 camelCase로 변환', '문자열 값을 자동으로 number로 변환', 'HTML을 이스케이프하지 않고 출력', 'true 값을 전달하면 속성을 제거', 15),
    (726, 'mounted 훅은 언제 호출되는가?', 1, '중', 'DOM 삽입 직후 최초 한 번', 'updated 훅 직후', '컴포넌트 생성 직후', 'beforeUnmount 직전', 15),
    (727, '컴포넌트 제거 직전에 호출되는 훅은?', 1, '상', 'beforeUnmount', 'unmounted', 'beforeUpdate', 'errorCaptured', 15),
    (728, 'Composition API에서 DOM 삽입 후 실행 훅 등록 함수는?', 1, '상', 'onMounted', 'onBeforeMount', 'useMounted', 'setupMounted', 15),
    (729, 'v-on .capture 수식어 역할은?', 1, '상', '이벤트를 캡처 단계에서 처리', '이벤트 버블링 중단', '수신 이벤트를 상위로 전파', '리스너를 한 번만 실행', 15),
    (730, '@keyup.enter 수식어 의미는?', 1, '상', 'Enter 키가 눌렸을 때만 keyup 핸들러 실행', 'keyup 이벤트 캡처 단계', 'Enter 키 아닌 경우 전파 중단', 'keydown 이벤트 변환', 15),
    (731, '부모 → 자식 데이터 전달 메커니즘은?', 1, '하', 'props', 'slots', 'provide/inject', '$refs', 15),
    (732, '자식이 부모에게 값을 전달할 때 호출하는 메서드는?', 1, '하', '$emit', '$dispatch', '$broadcast', '$send', 15),
    (733, '기본(이름 없는) 슬롯 태그는?', 1, '하', '<slot>', '<slot name="default">', '<template #default>', '<slot-default>', 15),
    (734, 'props 타입 유효성 검사 키는?', 1, '중', 'type', 'validator', 'required', 'default', 15),
    (735, '전역 컴포넌트 등록 API는?', 1, '중', 'app.component()', 'Vue.use()', 'defineComponent()', 'createRenderer()', 15),
    (736, '스코프드 슬롯 템플릿 축약은?', 1, '중', '<template #item="slotProps">', '<slot name="item" :slotProps>', '<slot v-bind="item">', '<template v-slot:itemProps>', 15),
    (737, 'prop 값을 직접 변경 시 결과는?', 1, '상', 'Vue가 경고 출력, 변경은 반응형 아님', '부모 원본 데이터 즉시 변경', '변경 허용되나 반응성 깨짐', '런타임 에러 발생', 15),
    (738, 'Composition API 자식이 v-model 지원하려면 emit 이벤트는?', 1, '상', 'update:modelValue', 'modelValue', 'input', 'change:model', 15),
    (739, 'provide/inject 값을 반응형 유지하려면?', 1, '상', 'reactive() 또는 ref()로 래핑한 값 제공', '원시 값 제공', 'JSON 직렬화', 'watchEffect 반환', 15),
    (740, '슬롯 설명 중 틀린 것은?', 4, '상', '슬롯 콘텐츠는 부모 범위에서 컴파일', '동일 컴포넌트 슬롯 이름은 유일', 'fallback 콘텐츠는 슬롯 비어 있을 때 표시', '스코프드 슬롯에서 자식→부모 데이터', 15),
    (741, 'Angular CLI에서 프로덕션용 번들을 생성하려면 어떤 명령을 사용해야 하는가?', 1, '하', 'ng build --configuration production', 'ng serve --prod', 'ng deploy --prod', 'ng compile --prod', 15),
    (742, 'Angular의 Ahead-of-Time 컴파일(AOT) 주된 장점은?', 1, '하', '런타임에 컴파일 오버헤드가 제거되어 초기 로드 속도가 빨라진다', '템플릿 문법 오류를 무시하고 빌드를 계속한다', '의존성 주입을 비활성화해 번들 크기를 줄인다', '개발 서버가 자동 재시작된다', 15),
    (743, 'Angular 16의 기본 렌더러(컴파일러)로 채택된 엔진은?', 1, '하', 'Ivy', 'View Engine', 'Renderer2', 'Zone.js', 15),
    (744, 'Jasmine 단위 테스트에서 비동기 호출 완료를 알리기 위해 주입하는 헬퍼는?', 1, '중', 'done() 콜백', 'fixture.detectChanges()', 'fakeAsync()', 'flushMicrotasks()', 15),
    (745, 'Angular PWA 변환을 자동으로 설정해 주는 CLI 스키매틱 명령은?', 1, '중', 'ng add @angular/pwa', 'ng generate pwa', 'ng init --pwa', 'ng add service-worker', 15),
    (746, '앱을 국제화(i18n) 빌드할 때 locale 별 번들을 만들도록 지정하는 CLI 플래그는?', 1, '중', '--localize', '--i18n', '--translate', '--locale-build', 15),
    (747, '앱 전반에 걸쳐 사용되지 않는 코드가 번들에 포함되지 않도록 하는 Webpack/CLI 최적화 기법은?', 1, '상', 'Tree shaking', 'Code splitting', 'Inlining', 'Polyfilling', 15),
    (748, 'Angular Universal을 사용해 서버 사이드 렌더링(SSR)을 도입하면 얻는 직접적 이점으로 옳은 것은?', 1, '상', '초기 HTML이 완성되어 SEO와 첫 콘텐츠 페인트(FCP)가 개선된다', '브라우저 번들 크기가 자동으로 50% 감소한다', 'Ivy가 비활성화되어 빌드 속도가 빨라진다', 'RxJS 의존성이 제거된다', 15),
    (749, 'ng test 명령이 기본적으로 사용하는 테스트 러너는?', 1, '상', 'Karma', 'Jest', 'Mocha', 'Vitest', 15),
    (750, 'Angular CLI 빌드 시 하위 브라우저용 ES5 코드 번들을 자동 생성해 주는 기능은?', 1, '상', 'Differential loading', 'Lazy chunk preloading', 'Webpack module federation', 'Inline critical CSS', 15),
    (751, 'NgRx는 어떤 프레임워크를 기반으로 한 상태 관리 라이브러리인가?', 3, '하', 'React', 'Vue', 'Angular', 'Svelte', 16),
    (752, 'NgRx는 어떤 디자인 패턴에서 영감을 받았는가?', 2, '하', 'MVC', 'Flux', 'MVVM', 'Factory', 16),
    (753, 'NgRx에서 상태 관리를 위해 사용하는 핵심 단위는?', 2, '하', 'Service', 'Store', 'Controller', 'Directive', 16),
    (754, 'NgRx Store는 어떤 역할을 하는가?', 2, '중', '컴포넌트 생성', '상태 저장소 역할', '라우팅 제어', 'HTTP 요청', 16),
    (755, 'NgRx의 구성 요소가 아닌 것은?', 3, '중', 'Actions', 'Reducers', 'Pipes', 'Selectors', 16),
    (756, 'NgRx에서 사용하는 상태는 어떤 성격을 가지는가?', 1, '중', '읽기 전용', '양방향 바인딩', '함수형 구조', '동적 할당', 16),
    (757, 'NgRx는 어떤 방식으로 상태 변화를 처리하는가?', 3, '상', '서비스 직접 호출', '컴포넌트 바인딩', '액션 → 리듀서', 'setState 호출', 16),
    (758, 'NgRx는 Angular의 어떤 기능과 긴밀하게 통합되는가?', 3, '상', '서비스', '모듈 시스템', 'RxJS', '라우터', 16),
    (759, 'NgRx Store의 주된 이점은?', 2, '상', '동적 스타일링', '상태 추적 가능', '라우팅 단순화', '컴포넌트 자동 생성', 16),
    (760, 'NgRx는 어떤 언어의 기능을 강하게 활용하는가?', 4, '상', 'Java', 'Kotlin', 'JavaScript', 'TypeScript', 16),
    (761, 'NgRx에서 상태를 변경하기 위해 사용하는 함수는?', 1, '하', 'Reducer', 'Selector', 'Effect', 'Service', 16),
    (762, 'Action 객체가 반드시 가져야 하는 속성은?', 3, '하', 'payload', 'state', 'type', 'reducer', 16),
    (763, 'createAction을 통해 생성된 액션은 어떤 함수인가?', 3, '하', '컴포넌트 생성 함수', '비동기 호출 함수', '액션 생성자 함수', '리듀서 함수', 16),
    (764, 'createReducer의 주된 목적은?', 3, '중', 'state 초기화', '비동기 트리거', 'state 업데이트 정의', '라우팅 처리', 16),
    (765, 'on() 함수는 어떤 경우에 사용되는가?', 2, '중', '컴포넌트 마운트 시', '액션 타입에 따라 상태 변경 정의 시', '비동기 호출 시', '라우터 트리거', 16),
    (766, '상태를 변경하지 않고 유지하려면 리듀서 내에서 무엇을 반환해야 하는가?', 3, '중', 'null', 'undefined', '기존 상태 그대로', 'empty object', 16),
    (767, 'Action은 일반적으로 어떤 형식으로 정의되는가?', 3, '상', '클래스', 'JSON', '객체 리터럴', '함수', 16),
    (768, 'createReducer의 인자로 전달되는 값은?', 1, '상', '초기 상태와 on() 배열', 'reducer 함수', 'selector 목록', 'effect 핸들러', 16),
    (769, 'Reducer 함수에서 상태를 변경할 때 지켜야 할 원칙은?', 2, '상', '직접 변경', '불변성을 유지하며 새 객체 반환', '기존 상태에 추가', '비동기 변경', 16),
    (770, 'Action이 Reducer에 도달하려면 무엇을 통해 전달되는가?', 1, '상', 'dispatch', 'store.select', 'effect.send', 'module.emit', 16),
    (771, 'NgRx에서 Effects의 주된 목적은?', 2, '하', '뷰 렌더링', '비동기 작업 처리', '라우터 제어', '스토어 생성', 16),
    (772, 'Effects는 어떤 라이브러리를 활용하여 작동하는가?', 1, '하', 'rxjs', 'lodash', 'zone.js', 'redux', 16),
    (773, 'createEffect 함수는 어떤 값을 반환하는가?', 2, '하', '함수', 'Observable', 'Promise', 'Action', 16),
    (774, 'Effects 클래스에서 액션을 주입받는 기본 속성은?', 2, '중', 'store', 'actions$', 'dispatch', 'select', 16),
    (775, '다음 중 switchMap을 사용하는 이유는?', 2, '중', '동기 처리', '이전 요청 취소 후 새 요청', '순차 실행', '에러 무시', 16),
    (776, 'NgRx Effects는 액션을 어디로 전달하는가?', 2, '중', 'Selector', 'Reducer', 'Service', 'Component', 16),
    (777, 'ofType() 오퍼레이터의 역할은?', 1, '상', '타입별로 액션 필터링', '에러 처리', 'Observable 생성', '스토어 구독', 16),
    (778, 'Effects 내에서 비동기 작업 후 상태를 변경하려면 무엇을 호출해야 하는가?', 4, '상', 'select()', 'dispatch()', 'new Action()', '다른 액션 반환', 16),
    (779, 'createEffect를 정의할 때 두 번째 인자의 옵션으로 사용되는 속성은?', 3, '상', 'type', 'payload', 'dispatch', 'async', 16),
    (780, 'NgRx Effects를 사용하지 않고도 비동기 처리가 가능한가?', 1, '상', '가능하지만 관리 어려움', '절대 불가능', '기본 제공됨', 'Vue에서만 가능', 16),
    (781, 'NgRx에서 상태를 읽을 때 사용하는 함수는?', 3, '하', 'dispatch()', 'createEffect()', 'select()', 'provideStore()', 16),
    (782, 'Selector의 주요 목적은?', 2, '하', '상태 변경', '상태 추출 및 계산', '액션 생성', '라우팅 처리', 16),
    (783, 'createSelector 함수는 어디에 정의되는가?', 2, '하', '@ngrx/effects', '@ngrx/store', '@ngrx/router', '@angular/common', 16),
    (784, 'Selector의 장점 중 아닌 것은?', 4, '중', '재사용 가능', '성능 최적화', '메모이제이션 지원', '자동 상태 변경', 16),
    (785, 'Store에서 select()를 사용하려면 무엇이 필요한가?', 2, '중', 'action type', 'selector 함수', 'reducer map', 'router config', 16),
    (786, 'createFeatureSelector는 어떤 용도로 사용되는가?', 3, '중', 'feature module 생성', '전체 상태 접근', '특정 슬라이스 접근', '디버깅용', 16),
    (787, 'Selector가 상태를 감지할 수 있도록 도와주는 것은?', 2, '상', 'Reducer', 'Observable', 'Promise', 'Component', 16),
    (788, 'Store에서 상태를 구독하려면 어떤 연산자를 사용하는가?', 1, '상', 'pipe()', 'map()', 'catchError()', 'filter()', 16),
    (789, 'Selector는 어떤 패턴을 기반으로 동작하는가?', 2, '상', '비동기 트리거', '구독/발행', '명령형 제어', 'Event bubbling', 16),
    (790, 'Selector 내부에서 다른 Selector를 조합할 수 있는 기능은?', 3, '상', 'createState()', 'combine()', 'createSelector()', 'onSelect()', 16),
    (791, 'NgRx Entity의 주요 목적은?', 2, '하', '비동기 요청 처리', '데이터 정규화 및 목록 관리', '라우터 상태 관리', '로딩 상태 추적', 16),
    (792, 'NgRx Entity는 어떤 형태의 데이터를 관리하기에 적합한가?', 3, '하', '단일 객체', '비동기 응답', 'ID 기반 다수 객체', '로컬 변수', 16),
    (793, 'Entity Adapter를 생성하는 함수는?', 2, '하', 'createReducer', 'createEntityAdapter', 'createSelector', 'defineAdapter', 16),
    (794, 'Entity State에 포함되지 않는 기본 속성은?', 4, '중', 'ids', 'entities', 'selectedEntity', 'adapter', 16),
    (795, 'NgRx Entity에서 단일 항목을 가져오는 함수는?', 3, '중', 'selectEntity', 'getEntityById', 'selectById', 'findEntity', 16),
    (796, 'addOne(), updateOne(), removeOne()은 무엇의 메서드인가?', 3, '중', 'NgRx Store', 'Reducer', 'Entity Adapter', 'Selector', 16),
    (797, 'Entity Adapter에서 상태를 초기화할 때 사용하는 함수는?', 3, '상', 'initializeState', 'setState', 'getInitialState', 'init()', 16),
    (798, 'NgRx Entity는 주로 어떤 성격의 앱에 유용한가?', 2, '상', '단순 입력', '많은 목록 데이터를 다루는 앱', '정적 웹사이트', '싱글 컴포넌트 앱', 16),
    (799, 'Entity에서 다수의 항목을 추가하는 함수는?', 1, '상', 'addMany', 'insertMany', 'pushList', 'mergeEntities', 16),
    (800, 'Entity Adapter는 어떤 방식으로 상태를 변경하는가?', 2, '상', 'state 직접 수정', '불변성 유지하며 새 상태 반환', 'setter 호출', '데이터베이스 변경', 16),
    (801, '클라이언트 잘못된 요청(예: JSON 스키마 위반)에 대한 권장 HTTP 상태 코드는?', 1, '하', '400 Bad Request', '401 Unauthorized', '500 Internal Server Error', '409 Conflict', 17),
    (802, '인증 헤더가 누락된 요청에 서버가 반환해야 할 표준 상태 코드는?', 1, '하', '401 Unauthorized', '403 Forbidden', '412 Precondition Failed', '502 Bad Gateway', 17),
    (803, 'REST API에서 존재하지 않는 리소스에 대한 GET 요청 시 적절한 응답 코드는?', 1, '하', '404 Not Found', '410 Gone', '204 No Content', '422 Unprocessable Entity', 17),
    (804, 'RFC 7807 ‘Problem Details for HTTP APIs’가 권장하는 기본 Content-Type은?', 1, '중', 'application/problem+json', 'application/json; problem', 'text/problem', 'application/vnd.error+json', 17),
    (805, 'RFC 7807 JSON 응답 예시에서 반드시 포함해야 하는 필드는?', 1, '중', 'title', 'instance', 'detail', 'errors', 17),
    (806, '다음 중 4xx와 5xx 상태 코드 차이에 대한 설명으로 옳지 않은 것은?', 4, '중', '4xx는 클라이언트 오류, 5xx는 서버 오류를 나타낸다', '5xx는 재시도 가능성이 4xx보다 높다', '4xx 오류라도 Problem Details 바디를 포함할 수 있다', '4xx는 절대 재시도해서는 안 된다', 17),
    (807, '동일 자원 중복 생성 시 서버가 반환해도 멱등성 규칙을 깨지지 않는 상태 코드는?', 1, '상', '409 Conflict', '201 Created', '202 Accepted', '302 Found', 17),
    (808, 'Problem Details 바디에 커스텀 ‘code’ 정수 필드를 두는 주된 이점은?', 1, '상', '클라이언트가 로컬라이징 메시지를 매핑하기 쉽다', 'HTTP 상태 코드 전송을 생략할 수 있다', 'JSON 패싱을 건너뛸 수 있다', 'CORS 프리플라이트를 우회한다', 17),
    (809, '다음 중 idempotent 메서드가 아닌 것은?', 1, '상', 'POST', 'PUT', 'DELETE', 'HEAD', 17),
    (810, '클라이언트가 429 Too Many Requests 응답을 받을 때 재시도 시점을 알기 위해 확인해야 하는 헤더는?', 1, '상', 'Retry-After', 'Warning', 'WWW-Authenticate', 'Content-Encoding', 17),
    (811, '브라우저 네트워크 오류 vs HTTP 오류 구분 방법은?', 1, '하', '응답 없음 & error.request 존재 → 네트워크 오류', 'status 0이면 HTTP 오류', 'message에 Network Error 포함 시 HTTP 오류', 'https로 시작시 네트워크 오류 없음', 17),
    (812, '422 오류 UX 비추천 패턴은?', 1, '하', '모달 전체 가리고 중앙만 오류', '필드 인라인 표시', '폼 상단 요약', '스낵바 알림', 17),
    (813, '전역 오류 핸들러 역할은?', 1, '하', '로그인 만료 등 공통 처리', '레이아웃 교체', 'CSS 초기화', 'History 재설정', 17),
    (814, '오프라인 GET 요청 전략은?', 1, '중', '대기열 저장 후 복구 시 재시도', '캐시 비우고 에러', '503 구성', '무한 로딩', 17),
    (815, 'Error Boundary 해결 문제는?', 1, '중', '렌더 예외로 인한 흰 화면', 'API 500 재시도', 'CORS 차단', 'WebSocket', 17),
    (816, '중복 POST 방지 클라이언트 조치?', 1, '중', '이전 요청 취소 AbortController', 'Cache-Control no-store', 'POST→GET', '로그 제거', 17),
    (817, 'axios 취소 vs 네트워크 오류 구분 프로퍼티?', 1, '상', 'error.code === ''ERR_CANCELED''', 'message 포함 Network', 'status -1', 'timeout 0', 17),
    (818, '국제화 오류 메시지 비추천 방법은?', 1, '상', '서버가 완제품 문구 제공', '클라이언트 코드 매핑', 'title/detail 키 사용', '템플릿 변수 치환', 17),
    (819, '모바일 에러/재요청 데이터 최소화 우선 고려는?', 1, '상', '오프라인 감지 후 백오프', '해상도 다운', '캐시 삭제', 'UDP 강제', 17),
    (820, '사용자 메시지+디버그 정보 구조 권장?', 1, '상', 'UI 요약 & 콘솔 raw trace', 'alert 모두', '서버 HTML 오류 페이지', '쿠키 저장', 17),
    (821, '멱등 메서드는?', 1, '하', 'PUT', 'POST', 'PATCH', 'CONNECT', 17),
    (822, '고정 3초 4번 총 지연?', 1, '하', '12초', '9초', '6초', '3초', 17),
    (823, '지수 1s 배수2 3회 누적?', 1, '중', '7 s', '6 s', '5 s', '4 s', 17),
    (824, 'Retry-After 120 권장 재시도?', 1, '중', '120초 이상 후', '60초', '즉시', '무시', 17),
    (825, 'POST 안전 재시도 보완책?', 1, '중', 'Idempotency-Key 헤더', 'HTTP/2 업그레이드', '빈 바디', 'PUT 사용', 17),
    (826, '재시도 고려 가능한 408/409?', 1, '중', '408 Request Timeout', '409 Conflict', '400', '401', 17),
    (827, 'Full Jitter 목적은?', 1, '상', '서버 폭주 완화', '총 지연 줄임', 'TCP 우회', 'TLS 감소', 17),
    (828, '재시도 불가 오류 유형?', 1, '상', '400 필드 검증', '502', '408', '429', 17),
    (829, '조건부 PUT 재시도 안전 이유?', 1, '상', 'ETag 버전 동일 시만 수행', 'PUT 캐싱', 'HTTP/3 전용', '브라우저 보장', 17),
    (830, '모바일 TCP 끊김 POST 문제 감소?', 1, '상', '짧은 타임아웃 + 멱등 키', 'HTTP 1.0', '재시도 끔', '인증 제거', 17),
    (831, 'Circuit Closed→Open 조건?', 1, '하', '연속 실패 임계', '성공 200', '301', '쿠키 만료', 17),
    (832, 'Half-Open 성공 전이?', 1, '하', 'Closed', 'Open', 'Forced-Open', 'Isolated', 17),
    (833, 'Open 상태 바로 실패 목적?', 1, '하', '백엔드 부하 차단', '캐시 무효', 'TLS 시간 줄임', 'DNS 재해석', 17),
    (834, '재시도+CB 충돌 위험?', 1, '중', '과도 재시도→즉시 Open', 'Jitter 제거', 'Retry-After 무시', 'HTTP/2 끊김', 17),
    (835, 'Coalescing 효과 시나리오?', 1, '중', '같은 리소스 다수 GET', '다른 POST', 'WebSocket', 'SSE', 17),
    (836, 'Equal Jitter 이점 아닌 것?', 2, '중', '스파이크 완화', '최대/최소 지연 예측', 'Full Jitter보다 대기 줄임', '서버 완화', 17),
    (837, 'Fallback 전략 사례?', 1, '상', '캐시된 데이터로 표시', '재시도 0', 'CB 강제 Close', 'Retry-After 무시', 17),
    (838, 'Hedged Request 주의점?', 1, '상', '멱등 보장 필요', 'DNS TTL 0', 'KEEP-ALIVE 끊기', 'TLS 1.3', 17),
    (839, 'Max-Retry-TTL 목적?', 1, '상', '무제한 지연 방지', 'TCP FIN 감소', '브라우저 버그 회피', 'Keep-Alive 증가', 17),
    (840, 'CB 실시간 튜닝 기법?', 1, '상', 'Feature Flag 기반 임계 조정', '콘솔 변수', '헤더 하드코드', '빌드 상수', 17),
    (841, '자주 쓰는 SLO 쌍은?', 1, '하', '가용성·오류율', 'CPU·메모리', '빌드시간·커버리지', 'PR 리뷰', 17),
    (842, 'P99 증가 의심 원인?', 1, '하', '소수 요청 재시도 지연', '평균 느려짐', '404 급증', '로깅 오류', 17),
    (843, '분산 추적 유용 이유?', 1, '중', 'Trace로 재시도 체인 시각화', '헤더 암호화', '로그 제거', '패킷 캡처', 17),
    (844, 'Chaos 테스트 간단 도구?', 1, '중', 'MSW random error', 'CSS Lint', 'Bundle Analyzer', 'Lighthouse', 17),
    (845, '포스트모템 포함 아님?', 1, '중', '담당자 인적 정보', '타임라인', 'RCA', '재발 방지', 17),
    (846, '알림 임계 낮음 문제?', 1, '상', 'Alert Fatigue', 'MTTR 증가', 'Slack→Email', 'Grafana 꺼짐', 17),
    (847, '롤아웃 안전 배포 전략?', 1, '상', 'Feature Flag Gradual', 'Big-bang', 'Force-push', 'CI 캐시 무효', 17),
    (848, '로그 레벨 매핑?', 1, '상', '시작 debug, 재시도 info, 실패 error', '모두 warn', '재시도 fatal', '성공 error', 17),
    (849, '슬라이딩 윈도우 오류율 이유?', 1, '상', '즉시값 대신 경향 파악', '메트릭 안 삭제', '테스트 속도', '다크 테마', 17),
    (850, '오류율 상승 자동 롤백 기능은?', 1, '상', 'Canary 분석 → rollback', 'Merge Queue', 'multi-stage build', 'npm postinstall', 17),
    (851, '클라이언트 잘못된 요청(예: JSON 스키마 위반)에 대한 권장 HTTP 상태 코드는?', 1, '하', '400 Bad Request', '401 Unauthorized', '500 Internal Server Error', '409 Conflict', 18),
    (852, '인증 헤더가 누락된 요청에 서버가 반환해야 할 표준 상태 코드는?', 1, '하', '401 Unauthorized', '403 Forbidden', '412 Precondition Failed', '502 Bad Gateway', 18),
    (853, 'REST API에서 존재하지 않는 리소스에 대한 GET 요청 시 적절한 응답 코드는?', 1, '하', '404 Not Found', '410 Gone', '204 No Content', '422 Unprocessable Entity', 18),
    (854, 'RFC 7807 ‘Problem Details for HTTP APIs’가 권장하는 기본 Content-Type은?', 1, '중', 'application/problem+json', 'application/json; problem', 'text/problem', 'application/vnd.error+json', 18),
    (855, 'RFC 7807 JSON 응답 예시에서 반드시 포함해야 하는 필드는?', 1, '중', 'title', 'instance', 'detail', 'errors', 18),
    (856, '다음 중 4xx와 5xx 상태 코드 차이에 대한 설명으로 옳지 않은 것은?', 4, '중', '4xx는 클라이언트 오류, 5xx는 서버 오류를 나타낸다', '5xx는 재시도 가능성이 4xx보다 높다', '4xx 오류라도 Problem Details 바디를 포함할 수 있다', '4xx는 절대 재시도해서는 안 된다', 18),
    (857, '동일 자원 중복 생성 시 서버가 반환해도 멱등성 규칙을 깨지지 않는 상태 코드는?', 1, '상', '409 Conflict', '201 Created', '202 Accepted', '302 Found', 18),
    (858, 'Problem Details 바디에 커스텀 ‘code’ 정수 필드를 두는 주된 이점은?', 1, '상', '클라이언트가 로컬라이징 메시지를 매핑하기 쉽다', 'HTTP 상태 코드 전송을 생략할 수 있다', 'JSON 패싱을 건너뛸 수 있다', 'CORS 프리플라이트를 우회한다', 18),
    (859, '다음 중 idempotent 메서드가 아닌 것은?', 1, '상', 'POST', 'PUT', 'DELETE', 'HEAD', 18),
    (860, '클라이언트가 429 Too Many Requests 응답을 받을 때 재시도 시점을 알기 위해 확인해야 하는 헤더는?', 1, '상', 'Retry-After', 'Warning', 'WWW-Authenticate', 'Content-Encoding', 18),
    (861, '브라우저 네트워크 오류 vs HTTP 오류 구분 방법은?', 1, '하', '응답 없음 & error.request 존재 → 네트워크 오류', 'status 0이면 HTTP 오류', 'message에 Network Error 포함 시 HTTP 오류', 'https로 시작시 네트워크 오류 없음', 18),
    (862, '422 오류 UX 비추천 패턴은?', 1, '하', '모달 전체 가리고 중앙만 오류', '필드 인라인 표시', '폼 상단 요약', '스낵바 알림', 18),
    (863, '전역 오류 핸들러 역할은?', 1, '하', '로그인 만료 등 공통 처리', '레이아웃 교체', 'CSS 초기화', 'History 재설정', 18),
    (864, '오프라인 GET 요청 전략은?', 1, '중', '대기열 저장 후 복구 시 재시도', '캐시 비우고 에러', '503 구성', '무한 로딩', 18),
    (865, 'Error Boundary 해결 문제는?', 1, '중', '렌더 예외로 인한 흰 화면', 'API 500 재시도', 'CORS 차단', 'WebSocket', 18),
    (866, '중복 POST 방지 클라이언트 조치?', 1, '중', '이전 요청 취소 AbortController', 'Cache-Control no-store', 'POST→GET', '로그 제거', 18),
    (867, 'axios 취소 vs 네트워크 오류 구분 프로퍼티?', 1, '상', 'error.code === ''ERR_CANCELED''', 'message 포함 Network', 'status -1', 'timeout 0', 18),
    (868, '국제화 오류 메시지 비추천 방법은?', 1, '상', '서버가 완제품 문구 제공', '클라이언트 코드 매핑', 'title/detail 키 사용', '템플릿 변수 치환', 18),
    (869, '모바일 에러/재요청 데이터 최소화 우선 고려는?', 1, '상', '오프라인 감지 후 백오프', '해상도 다운', '캐시 삭제', 'UDP 강제', 18),
    (870, '사용자 메시지+디버그 정보 구조 권장?', 1, '상', 'UI 요약 & 콘솔 raw trace', 'alert 모두', '서버 HTML 오류 페이지', '쿠키 저장', 18),
    (871, '멱등 메서드는?', 1, '하', 'PUT', 'POST', 'PATCH', 'CONNECT', 18),
    (872, '고정 3초 4번 총 지연?', 1, '하', '12초', '9초', '6초', '3초', 18),
    (873, '지수 1s 배수2 3회 누적?', 1, '중', '7 s', '6 s', '5 s', '4 s', 18),
    (874, 'Retry-After 120 권장 재시도?', 1, '중', '120초 이상 후', '60초', '즉시', '무시', 18),
    (875, 'POST 안전 재시도 보완책?', 1, '중', 'Idempotency-Key 헤더', 'HTTP/2 업그레이드', '빈 바디', 'PUT 사용', 18),
    (876, '재시도 고려 가능한 408/409?', 1, '중', '408 Request Timeout', '409 Conflict', '400', '401', 18),
    (877, 'Full Jitter 목적은?', 1, '상', '서버 폭주 완화', '총 지연 줄임', 'TCP 우회', 'TLS 감소', 18),
    (878, '재시도 불가 오류 유형?', 1, '상', '400 필드 검증', '502', '408', '429', 18),
    (879, '조건부 PUT 재시도 안전 이유?', 1, '상', 'ETag 버전 동일 시만 수행', 'PUT 캐싱', 'HTTP/3 전용', '브라우저 보장', 18),
    (880, '모바일 TCP 끊김 POST 문제 감소?', 1, '상', '짧은 타임아웃 + 멱등 키', 'HTTP 1.0', '재시도 끔', '인증 제거', 18),
    (881, 'Circuit Closed→Open 조건?', 1, '하', '연속 실패 임계', '성공 200', '301', '쿠키 만료', 18),
    (882, 'Half-Open 성공 전이?', 1, '하', 'Closed', 'Open', 'Forced-Open', 'Isolated', 18),
    (883, 'Open 상태 바로 실패 목적?', 1, '하', '백엔드 부하 차단', '캐시 무효', 'TLS 시간 줄임', 'DNS 재해석', 18),
    (884, '재시도+CB 충돌 위험?', 1, '중', '과도 재시도→즉시 Open', 'Jitter 제거', 'Retry-After 무시', 'HTTP/2 끊김', 18),
    (885, 'Coalescing 효과 시나리오?', 1, '중', '같은 리소스 다수 GET', '다른 POST', 'WebSocket', 'SSE', 18),
    (886, 'Equal Jitter 이점 아닌 것?', 2, '중', '스파이크 완화', '최대/최소 지연 예측', 'Full Jitter보다 대기 줄임', '서버 완화', 18),
    (887, 'Fallback 전략 사례?', 1, '상', '캐시된 데이터로 표시', '재시도 0', 'CB 강제 Close', 'Retry-After 무시', 18),
    (888, 'Hedged Request 주의점?', 1, '상', '멱등 보장 필요', 'DNS TTL 0', 'KEEP-ALIVE 끊기', 'TLS 1.3', 18),
    (889, 'Max-Retry-TTL 목적?', 1, '상', '무제한 지연 방지', 'TCP FIN 감소', '브라우저 버그 회피', 'Keep-Alive 증가', 18),
    (890, 'CB 실시간 튜닝 기법?', 1, '상', 'Feature Flag 기반 임계 조정', '콘솔 변수', '헤더 하드코드', '빌드 상수', 18),
    (891, '자주 쓰는 SLO 쌍은?', 1, '하', '가용성·오류율', 'CPU·메모리', '빌드시간·커버리지', 'PR 리뷰', 18),
    (892, 'P99 증가 의심 원인?', 1, '하', '소수 요청 재시도 지연', '평균 느려짐', '404 급증', '로깅 오류', 18),
    (893, '분산 추적 유용 이유?', 1, '중', 'Trace로 재시도 체인 시각화', '헤더 암호화', '로그 제거', '패킷 캡처', 18),
    (894, 'Chaos 테스트 간단 도구?', 1, '중', 'MSW random error', 'CSS Lint', 'Bundle Analyzer', 'Lighthouse', 18),
    (895, '포스트모템 포함 아님?', 1, '중', '담당자 인적 정보', '타임라인', 'RCA', '재발 방지', 18),
    (896, '알림 임계 낮음 문제?', 1, '상', 'Alert Fatigue', 'MTTR 증가', 'Slack→Email', 'Grafana 꺼짐', 18),
    (897, '롤아웃 안전 배포 전략?', 1, '상', 'Feature Flag Gradual', 'Big-bang', 'Force-push', 'CI 캐시 무효', 18),
    (898, '로그 레벨 매핑?', 1, '상', '시작 debug, 재시도 info, 실패 error', '모두 warn', '재시도 fatal', '성공 error', 18),
    (899, '슬라이딩 윈도우 오류율 이유?', 1, '상', '즉시값 대신 경향 파악', '메트릭 안 삭제', '테스트 속도', '다크 테마', 18),
    (900, '오류율 상승 자동 롤백 기능은?', 1, '상', 'Canary 분석 → rollback', 'Merge Queue', 'multi-stage build', 'npm postinstall', 18),
    (901, '클라이언트 잘못된 요청(예: JSON 스키마 위반)에 대한 권장 HTTP 상태 코드는?', 1, '하', '400 Bad Request', '401 Unauthorized', '500 Internal Server Error', '409 Conflict', 19),
    (902, '인증 헤더가 누락된 요청에 서버가 반환해야 할 표준 상태 코드는?', 1, '하', '401 Unauthorized', '403 Forbidden', '412 Precondition Failed', '502 Bad Gateway', 19),
    (903, 'REST API에서 존재하지 않는 리소스에 대한 GET 요청 시 적절한 응답 코드는?', 1, '하', '404 Not Found', '410 Gone', '204 No Content', '422 Unprocessable Entity', 19),
    (904, 'RFC 7807 ‘Problem Details for HTTP APIs’가 권장하는 기본 Content-Type은?', 1, '중', 'application/problem+json', 'application/json; problem', 'text/problem', 'application/vnd.error+json', 19),
    (905, 'RFC 7807 JSON 응답 예시에서 반드시 포함해야 하는 필드는?', 1, '중', 'title', 'instance', 'detail', 'errors', 19),
    (906, '다음 중 4xx와 5xx 상태 코드 차이에 대한 설명으로 옳지 않은 것은?', 4, '중', '4xx는 클라이언트 오류, 5xx는 서버 오류를 나타낸다', '5xx는 재시도 가능성이 4xx보다 높다', '4xx 오류라도 Problem Details 바디를 포함할 수 있다', '4xx는 절대 재시도해서는 안 된다', 19),
    (907, '동일 자원 중복 생성 시 서버가 반환해도 멱등성 규칙을 깨지지 않는 상태 코드는?', 1, '상', '409 Conflict', '201 Created', '202 Accepted', '302 Found', 19),
    (908, 'Problem Details 바디에 커스텀 ‘code’ 정수 필드를 두는 주된 이점은?', 1, '상', '클라이언트가 로컬라이징 메시지를 매핑하기 쉽다', 'HTTP 상태 코드 전송을 생략할 수 있다', 'JSON 패싱을 건너뛸 수 있다', 'CORS 프리플라이트를 우회한다', 19),
    (909, '다음 중 idempotent 메서드가 아닌 것은?', 1, '상', 'POST', 'PUT', 'DELETE', 'HEAD', 19),
    (910, '클라이언트가 429 Too Many Requests 응답을 받을 때 재시도 시점을 알기 위해 확인해야 하는 헤더는?', 1, '상', 'Retry-After', 'Warning', 'WWW-Authenticate', 'Content-Encoding', 19),
    (911, '브라우저 네트워크 오류 vs HTTP 오류 구분 방법은?', 1, '하', '응답 없음 & error.request 존재 → 네트워크 오류', 'status 0이면 HTTP 오류', 'message에 Network Error 포함 시 HTTP 오류', 'https로 시작시 네트워크 오류 없음', 19),
    (912, '422 오류 UX 비추천 패턴은?', 1, '하', '모달 전체 가리고 중앙만 오류', '필드 인라인 표시', '폼 상단 요약', '스낵바 알림', 19),
    (913, '전역 오류 핸들러 역할은?', 1, '하', '로그인 만료 등 공통 처리', '레이아웃 교체', 'CSS 초기화', 'History 재설정', 19),
    (914, '오프라인 GET 요청 전략은?', 1, '중', '대기열 저장 후 복구 시 재시도', '캐시 비우고 에러', '503 구성', '무한 로딩', 19),
    (915, 'Error Boundary 해결 문제는?', 1, '중', '렌더 예외로 인한 흰 화면', 'API 500 재시도', 'CORS 차단', 'WebSocket', 19),
    (916, '중복 POST 방지 클라이언트 조치?', 1, '중', '이전 요청 취소 AbortController', 'Cache-Control no-store', 'POST→GET', '로그 제거', 19),
    (917, 'axios 취소 vs 네트워크 오류 구분 프로퍼티?', 1, '상', 'error.code === ''ERR_CANCELED''', 'message 포함 Network', 'status -1', 'timeout 0', 19),
    (918, '국제화 오류 메시지 비추천 방법은?', 1, '상', '서버가 완제품 문구 제공', '클라이언트 코드 매핑', 'title/detail 키 사용', '템플릿 변수 치환', 19),
    (919, '모바일 에러/재요청 데이터 최소화 우선 고려는?', 1, '상', '오프라인 감지 후 백오프', '해상도 다운', '캐시 삭제', 'UDP 강제', 19),
    (920, '사용자 메시지+디버그 정보 구조 권장?', 1, '상', 'UI 요약 & 콘솔 raw trace', 'alert 모두', '서버 HTML 오류 페이지', '쿠키 저장', 19),
    (921, '멱등 메서드는?', 1, '하', 'PUT', 'POST', 'PATCH', 'CONNECT', 19),
    (922, '고정 3초 4번 총 지연?', 1, '하', '12초', '9초', '6초', '3초', 19),
    (923, '지수 1s 배수2 3회 누적?', 1, '중', '7 s', '6 s', '5 s', '4 s', 19),
    (924, 'Retry-After 120 권장 재시도?', 1, '중', '120초 이상 후', '60초', '즉시', '무시', 19),
    (925, 'POST 안전 재시도 보완책?', 1, '중', 'Idempotency-Key 헤더', 'HTTP/2 업그레이드', '빈 바디', 'PUT 사용', 19),
    (926, '재시도 고려 가능한 408/409?', 1, '중', '408 Request Timeout', '409 Conflict', '400', '401', 19),
    (927, 'Full Jitter 목적은?', 1, '상', '서버 폭주 완화', '총 지연 줄임', 'TCP 우회', 'TLS 감소', 19),
    (928, '재시도 불가 오류 유형?', 1, '상', '400 필드 검증', '502', '408', '429', 19),
    (929, '조건부 PUT 재시도 안전 이유?', 1, '상', 'ETag 버전 동일 시만 수행', 'PUT 캐싱', 'HTTP/3 전용', '브라우저 보장', 19),
    (930, '모바일 TCP 끊김 POST 문제 감소?', 1, '상', '짧은 타임아웃 + 멱등 키', 'HTTP 1.0', '재시도 끔', '인증 제거', 19),
    (931, 'Circuit Closed→Open 조건?', 1, '하', '연속 실패 임계', '성공 200', '301', '쿠키 만료', 19),
    (932, 'Half-Open 성공 전이?', 1, '하', 'Closed', 'Open', 'Forced-Open', 'Isolated', 19),
    (933, 'Open 상태 바로 실패 목적?', 1, '하', '백엔드 부하 차단', '캐시 무효', 'TLS 시간 줄임', 'DNS 재해석', 19),
    (934, '재시도+CB 충돌 위험?', 1, '중', '과도 재시도→즉시 Open', 'Jitter 제거', 'Retry-After 무시', 'HTTP/2 끊김', 19),
    (935, 'Coalescing 효과 시나리오?', 1, '중', '같은 리소스 다수 GET', '다른 POST', 'WebSocket', 'SSE', 19),
    (936, 'Equal Jitter 이점 아닌 것?', 2, '중', '스파이크 완화', '최대/최소 지연 예측', 'Full Jitter보다 대기 줄임', '서버 완화', 19),
    (937, 'Fallback 전략 사례?', 1, '상', '캐시된 데이터로 표시', '재시도 0', 'CB 강제 Close', 'Retry-After 무시', 19),
    (938, 'Hedged Request 주의점?', 1, '상', '멱등 보장 필요', 'DNS TTL 0', 'KEEP-ALIVE 끊기', 'TLS 1.3', 19),
    (939, 'Max-Retry-TTL 목적?', 1, '상', '무제한 지연 방지', 'TCP FIN 감소', '브라우저 버그 회피', 'Keep-Alive 증가', 19),
    (940, 'CB 실시간 튜닝 기법?', 1, '상', 'Feature Flag 기반 임계 조정', '콘솔 변수', '헤더 하드코드', '빌드 상수', 19),
    (941, '자주 쓰는 SLO 쌍은?', 1, '하', '가용성·오류율', 'CPU·메모리', '빌드시간·커버리지', 'PR 리뷰', 19),
    (942, 'P99 증가 의심 원인?', 1, '하', '소수 요청 재시도 지연', '평균 느려짐', '404 급증', '로깅 오류', 19),
    (943, '분산 추적 유용 이유?', 1, '중', 'Trace로 재시도 체인 시각화', '헤더 암호화', '로그 제거', '패킷 캡처', 19),
    (944, 'Chaos 테스트 간단 도구?', 1, '중', 'MSW random error', 'CSS Lint', 'Bundle Analyzer', 'Lighthouse', 19),
    (945, '포스트모템 포함 아님?', 1, '중', '담당자 인적 정보', '타임라인', 'RCA', '재발 방지', 19),
    (946, '알림 임계 낮음 문제?', 1, '상', 'Alert Fatigue', 'MTTR 증가', 'Slack→Email', 'Grafana 꺼짐', 19),
    (947, '롤아웃 안전 배포 전략?', 1, '상', 'Feature Flag Gradual', 'Big-bang', 'Force-push', 'CI 캐시 무효', 19),
    (948, '로그 레벨 매핑?', 1, '상', '시작 debug, 재시도 info, 실패 error', '모두 warn', '재시도 fatal', '성공 error', 19),
    (949, '슬라이딩 윈도우 오류율 이유?', 1, '상', '즉시값 대신 경향 파악', '메트릭 안 삭제', '테스트 속도', '다크 테마', 19),
    (950, '오류율 상승 자동 롤백 기능은?', 1, '상', 'Canary 분석 → rollback', 'Merge Queue', 'multi-stage build', 'npm postinstall', 19),
    (951, '모든 요소에 스타일을 적용하려면 어떤 CSS 선택자를 사용해야 하는가?', 1, '하', '*', '.', '#', '%', 20),
    (952, '클래스 선택자를 선언할 때 사용하는 접두사는?', 1, '하', '.', '#', '@', '&', 20),
    (953, 'p 요소의 직접 자식 span만 선택하려면 올바른 선택자는?', 1, '하', 'p > span', 'p span', 'p + span', 'p ~ span', 20),
    (954, 'id 선택자를 선언할 때 사용하는 접두사는?', 2, '하', '.', '#', '$', '!', 20),
    (955, '다음 중 href 속성이 ''https://''로 시작하는 a 요소를 선택하는 올바른 방법은?', 1, '중', 'a[href^="https://"]', 'a[href$="https://"]', 'a[href*="https://"]', 'a[href]', 20),
    (956, '속성 선택자 중 ''title'' 속성이 존재하는 모든 요소를 선택하는 선택자는?', 1, '중', '[title]', '[title*='''']', 'title', ':has(title)', 20),
    (957, '클래스 ''active''와 ''highlight''를 모두 가진 요소를 선택하려면?', 1, '중', '.active.highlight', '#active.highlight', '.active .highlight', '.active, .highlight', 20),
    (958, 'CSS에서 우선순위가 가장 높은 선택자는?', 3, '중', '태그 선택자', '클래스 선택자', 'id 선택자', '전체 선택자', 20),
    (959, '다음 중 선택자 우선순위가 가장 높은 조합은?', 2, '상', '.box #id', '#id .box', 'div.box', '* #id', 20),
    (960, '우선순위를 임의로 높이고 싶을 때 사용하는 키워드는?', 2, '상', 'important!', '!important', '#priority', '.force', 20),
    (961, '박스 모델에서 콘텐츠(content) 영역의 바깥쪽에 위치하는 두 영역은?', 2, '하', 'margin, padding', 'border, margin', 'padding, border', 'margin, content', 20),
    (962, '박스 모델에서 요소의 가장 바깥쪽 여백을 나타내는 것은?', 3, '하', 'padding', 'border', 'margin', 'spacing', 20),
    (963, '콘텐츠 영역과 테두리(border) 사이의 공간은 무엇인가?', 2, '하', 'margin', 'padding', 'spacing', 'outline', 20),
    (964, '다음 중 블록 요소(block element)의 기본 특성이 아닌 것은?', 3, '하', '가로 전체를 차지한다', '줄바꿈이 자동으로 된다', '한 줄에 여러 개 나란히 배치된다', '높이와 너비를 지정할 수 있다', 20),
    (965, '`display: inline-block`의 특징은?', 3, '중', '블록 요소처럼 줄바꿈이 발생한다', '인라인 요소처럼 너비 지정이 불가능하다', '인라인처럼 나란히 배치되고, 블록처럼 사이즈 지정 가능하다', '요소가 사라진다', 20),
    (966, '`position: absolute`인 요소는 기본적으로 어디를 기준으로 배치되는가?', 2, '중', '자신의 부모 요소', '가장 가까운 static이 아닌 조상 요소', '브라우저 뷰포트', '자기 자신', 20),
    (967, '박스 모델에서 `box-sizing: border-box`는 어떤 동작을 하는가?', 3, '중', 'margin을 포함해 총 너비를 계산', 'content만 너비로 계산', 'border와 padding을 포함해 총 너비를 계산', '아무 효과 없음', 20),
    (968, '요소가 float될 경우, 해당 요소 이후 콘텐츠의 레이아웃이 흐트러지는 것을 방지하려면 어떤 속성을 사용해야 하는가?', 3, '중', 'overflow: hidden', 'z-index', 'clear', 'display: block', 20),
    (969, '`position: fixed`와 `absolute`의 차이점은?', 2, '상', 'fixed는 부모 기준이고 absolute는 브라우저 기준이다', 'fixed는 뷰포트 기준이고 absolute는 조상 요소 기준이다', '둘 다 브라우저 기준이다', 'absolute는 항상 화면 중앙에 표시된다', 20),
    (970, 'z-index의 숫자가 클수록 어떻게 되는가?', 2, '상', '더 뒤로 이동한다', '더 앞으로 표시된다', '반응형이 된다', '고정 위치가 된다', 20),
    (971, '`display: flex`를 설정하면 기본적으로 어떤 방향으로 아이템이 정렬되는가?', 2, '하', '세로 방향(column)', '가로 방향(row)', '중앙 정렬', '우측 정렬', 20),
    (972, 'Flexbox에서 주축(main axis)을 설정하는 속성은?', 4, '하', 'flex-wrap', 'align-items', 'justify-content', 'flex-direction', 20),
    (973, '`justify-content: space-between`은 어떤 정렬을 의미하는가?', 2, '하', '아이템들을 왼쪽에 정렬', '아이템 사이에 동일한 간격을 둠', '아이템을 오른쪽 정렬', '아이템의 가운데 정렬', 20),
    (974, 'Flexbox에서 세로 정렬(교차축)을 설정하는 속성은?', 2, '하', 'flex-grow', 'align-items', 'justify-content', 'flex-direction', 20),
    (975, '`grid-template-columns: 1fr 2fr`은 어떤 의미인가?', 3, '중', '1열은 1px, 2열은 2px', '1열은 1단어, 2열은 2단어', '1열은 1비율, 2열은 2비율로 공간 분배', '1열은 고정, 2열은 유동적', 20),
    (976, 'Flexbox에서 자식 요소가 부모의 공간을 초과할 경우 줄바꿈을 허용하려면?', 1, '중', 'flex-wrap: wrap', 'justify-content: stretch', 'align-content: center', 'overflow: scroll', 20),
    (977, '`grid-area` 속성은 어떤 역할을 하는가?', 2, '중', '아이템의 배경을 설정', '그리드 내 아이템의 이름을 지정하여 위치 지정', '아이템 간의 간격을 설정', '아이템의 크기를 고정', 20),
    (978, '`place-items: center`는 어떤 정렬 방식인가?', 3, '중', '가로만 가운데 정렬', '세로만 가운데 정렬', '가로와 세로 모두 가운데 정렬', '양 끝 정렬', 20),
    (979, 'Flex 아이템 간 정렬 우선순위로 적용되는 순서는?', 3, '상', 'align-items > align-self > justify-content', 'justify-content > align-items > align-self', 'align-self > align-items > justify-content', 'justify-content > align-self > align-items', 20),
    (980, '`grid`를 사용하여 두 줄로 나누고, 각 줄에 3개의 동일한 열을 만들려면 올바른 설정은?', 1, '상', 'grid-template-rows: repeat(2, 1fr); grid-template-columns: repeat(3, 1fr);', 'grid-columns: 3; grid-rows: 2;', 'grid-columns: auto; grid-template-rows: 2fr;', 'display: flex; flex-direction: column;', 20),
    (981, '반응형 웹 디자인의 주요 목표는 무엇인가?', 2, '하', '웹사이트를 빠르게 로딩하기 위함', '모든 해상도와 장치에서 최적의 레이아웃을 제공하기 위함', '모든 브라우저에서 똑같이 보이기 위함', '폰트 크기를 크게 하기 위함', 20),
    (982, '다음 중 뷰포트를 설정하는 메타 태그는?', 2, '하', '<meta responsive=''true''>', '<meta name=''viewport'' content=''width=device-width, initial-scale=1.0''>', '<meta screen=''adaptive''>', '<meta name=''media'' content=''responsive''>', 20),
    (983, '미디어 쿼리에서 화면 너비가 768px 이상일 때를 지정하는 문법은?', 2, '하', '@media screen and (max-width: 768px)', '@media screen and (min-width: 768px)', '@media width >= 768px', '@media screen over 768px', 20),
    (984, 'rem 단위는 어떤 값을 기준으로 계산되는가?', 3, '하', '부모 요소의 크기', '가장 가까운 컨테이너의 크기', '루트 요소(html)의 폰트 크기', '디바이스 해상도', 20),
    (985, '다음 중 모바일 우선 접근법(Mobile-first approach)의 핵심은?', 2, '중', '데스크탑 기준으로 시작한 후 모바일 대응', '모바일 스타일을 먼저 정의하고, 데스크탑에 맞춰 확장', '모바일 사이트와 데스크탑 사이트를 분리 개발', '모바일에서는 스타일을 최소화함', 20),
    (986, '다음 중 반응형 이미지 구현 방식이 아닌 것은?', 4, '중', 'srcset 속성을 사용하는 것', 'CSS background-size: cover 사용', 'picture 요소를 사용하는 것', 'img 태그에 고정 px 값을 주는 것', 20),
    (987, '다음 중 em 단위와 rem 단위의 주요 차이점은?', 3, '중', 'em은 절대 단위, rem은 상대 단위', 'em은 루트 기준, rem은 부모 기준', 'em은 부모 기준, rem은 루트 기준', '차이가 없다', 20),
    (988, '다음 중 여러 조건을 AND로 묶어 미디어 쿼리를 작성하는 방법은?', 2, '중', '@media screen { min-width: 600px; max-width: 900px; }', '@media screen and (min-width: 600px) and (max-width: 900px)', '@media (min-width: 600px) or (max-width: 900px)', '@media screen && (600px ~ 900px)', 20),
    (989, '다음 중 반응형 디자인이 접근성을 높이는 이유로 적절한 것은?', 3, '상', '웹사이트의 디자인이 더 화려해진다', '코드가 짧아진다', '모든 사용자에게 일관된 경험을 제공할 수 있다', '이미지 품질이 좋아진다', 20),
    (990, '미디어 쿼리를 사용하여 프린트 전용 스타일을 정의하려면?', 1, '상', '@media print', '@media only-screen', '@media screen-print', '@media screen and (print)', 20),
    (991, 'CSS 트랜지션을 적용하려면 어떤 속성을 사용해야 하는가?', 2, '하', 'animation', 'transition', 'duration', 'keyframes', 20),
    (992, '트랜지션 효과를 줄 때 지속 시간을 설정하는 속성은?', 3, '하', 'transition-delay', 'transition-timing', 'transition-duration', 'transition-speed', 20),
    (993, '다음 중 `transition-timing-function`의 기본값은?', 2, '하', 'linear', 'ease', 'ease-in-out', 'step-start', 20),
    (994, '애니메이션을 무한 반복하고 싶다면 어떤 속성을 사용해야 하는가?', 3, '하', 'animation-repeat: infinite;', 'animation-loop: true;', 'animation-iteration-count: infinite;', 'animation-cycle: always;', 20),
    (995, '`@keyframes`을 사용하는 이유는?', 3, '중', '애니메이션을 설정된 시간만큼 지연하기 위해', '속도 조절을 위해', '애니메이션의 중간 단계를 정의하기 위해', '요소에 그림자를 주기 위해', 20),
    (996, '`animation-fill-mode: forwards`는 어떤 효과를 주는가?', 2, '중', '애니메이션이 끝난 후 처음 상태로 돌아감', '애니메이션이 끝난 후 마지막 상태를 유지함', '애니메이션이 무한 반복됨', '애니메이션이 반대로 실행됨', 20),
    (997, '다음 중 `transform` 속성으로 할 수 있는 작업이 아닌 것은?', 3, '중', '회전', '크기 조절', '색상 변경', '이동', 20),
    (998, '복잡한 커스텀 속도 곡선을 지정하고 싶을 때 사용하는 값은?', 3, '중', 'linear', 'ease-in', 'cubic-bezier', 'bounce', 20),
    (999, '`animation-direction: alternate`는 어떤 동작을 하나?', 3, '상', '한 번만 실행', '앞으로만 실행', '앞뒤로 번갈아 실행', '랜덤하게 실행', 20),
    (1000, '다음 중 트랜지션이 작동하지 않는 속성은?', 3, '상', 'width', 'height', 'display', 'opacity', 20),
    (1001, 'ESLint의 주요 목적은 무엇인가?', 2, '하', '코드 포맷팅', '코드 스타일 검사 및 오류 탐지', 'HTML 검증', '데이터베이스 연결', 21),
    (1002, 'ESLint를 프로젝트에 설치할 때 사용하는 명령어는?', 1, '하', 'npm install eslint', 'npm install prettier', 'npm install lint', 'npm install eslint-prettier', 21),
    (1003, 'ESLint 초기화 설정을 위한 명령어는?', 1, '하', 'eslint init', 'eslint setup', 'eslint create', 'eslint config', 21),
    (1004, 'ESLint는 기본적으로 어떤 언어를 대상으로 한다?', 3, '하', 'Python', 'Java', 'JavaScript', 'C++', 21),
    (1005, 'ESLint가 오류를 감지하는 기본 단위는?', 1, '중', '파일', '프로젝트', '라인', '토큰', 21),
    (1006, 'ESLint 설정 파일 확장자가 아닌 것은?', 4, '중', '.eslintrc.js', '.eslintrc.json', '.eslintrc.yaml', '.eslintconf', 21),
    (1007, 'ESLint에서 규칙을 끄는 방법은?', 1, '중', 'rules: { ''규칙명'': ''off'' }', 'rules: { ''규칙명'': ''on'' }', 'disableRule()', 'eslintOff', 21),
    (1008, 'ESLint를 CLI로 실행할 때 사용하는 기본 명령어는?', 3, '상', 'eslint run', 'eslint check', 'eslint <파일경로>', 'eslint execute', 21),
    (1009, 'ESLint 설정을 공유할 수 있도록 제공되는 것은?', 4, '상', '플러그인', '공유 설정 패키지', 'Preset', 'All of the above', 21),
    (1010, 'ESLint를 설치할 때 전역 설치를 위한 명령어는?', 1, '상', 'npm install -g eslint', 'npm add eslint', 'npm set eslint', 'npm run eslint', 21),
    (1011, 'ESLint 설정 파일에서 규칙을 설정하는 속성은?', 1, '하', 'rules', 'plugins', 'env', 'settings', 21),
    (1012, 'ESLint 규칙 중 코드 스타일 관련 규칙을 설정하는 대표적인 항목은?', 2, '하', 'no-console', 'semi', 'no-undef', 'no-unused-vars', 21),
    (1013, 'ESLint 설정 파일에서 환경(environment)을 설정하는 속성은?', 1, '하', 'env', 'settings', 'globals', 'plugins', 21),
    (1014, 'Node.js 환경을 설정할 때 사용하는 ESLint env 옵션은?', 2, '중', 'browser: true', 'node: true', 'es2021: true', 'commonjs: true', 21),
    (1015, 'ESLint 설정 파일에서 전역 변수(global variables)를 선언하는 속성은?', 1, '중', 'globals', 'global', 'vars', 'expose', 21),
    (1016, 'ESLint 플러그인은 주로 무엇을 확장하기 위해 사용하는가?', 2, '중', '코드 스타일', '문법 검사 범위', '빌드 속도', '버전 관리', 21),
    (1017, 'eslint:recommended 설정은 어떤 역할을 하는가?', 2, '상', '모든 규칙을 끈다', '자주 발생하는 오류를 막는 기본 규칙을 적용한다', '코드 스타일을 통일한다', 'Prettier를 활성화한다', 21),
    (1018, 'ESLint 규칙에서 ''off'', ''warn'', ''error''는 각각 무엇을 의미하는가?', 1, '상', '설정 끄기/경고/에러로 처리', '설정 켜기/무시/로그 출력', '강제 적용/권장/제외', '스킵/로그/실패', 21),
    (1019, 'ESLint 설정 파일이 가장 먼저 찾는 파일 이름은?', 2, '상', '.eslintconfig.js', '.eslintrc.js', 'eslint.config.json', 'config.eslint', 21),
    (1020, 'ESLint에서 특정 파일이나 폴더를 무시할 때 사용하는 파일은?', 2, '상', '.gitignore', '.eslintignore', '.eslintconfig', 'ignored.eslint', 21),
    (1021, 'Prettier의 주요 기능은 무엇인가?', 2, '하', '코드 스타일 검사', '코드 포맷팅 자동화', '오류 탐지', '파일 경로 관리', 21),
    (1022, 'Prettier를 설치하는 명령어는?', 1, '하', 'npm install prettier', 'npm install eslint', 'npm install format', 'npm install prettier-eslint', 21),
    (1023, 'Prettier로 코드를 포맷팅하는 기본 CLI 명령어는?', 3, '하', 'prettier format', 'prettier lint', 'prettier --write', 'prettier fix', 21),
    (1024, 'Prettier는 기본적으로 어떤 오류를 다루는가?', 3, '중', 'Syntax Error', 'Runtime Error', 'Style Error', 'Type Error', 21),
    (1025, 'Prettier 설정 파일 확장자가 아닌 것은?', 4, '중', '.prettierrc', '.prettierrc.js', '.prettierrc.json', '.prettierconfig', 21),
    (1026, 'Prettier 설정에서 줄 길이 최대치를 지정하는 옵션은?', 1, '중', 'printWidth', 'tabWidth', 'lineLength', 'wrapLine', 21),
    (1027, 'Prettier 설정에서 들여쓰기 크기를 지정하는 옵션은?', 2, '상', 'indent', 'tabWidth', 'spaceSize', 'tabSize', 21),
    (1028, 'Prettier에서 세미콜론 사용 여부를 설정하는 옵션은?', 1, '상', 'semi', 'semicolon', 'endSemicolon', 'useSemi', 21),
    (1029, 'Prettier 설정에서 따옴표를 싱글로 사용할지 설정하는 옵션은?', 1, '상', 'singleQuote', 'useSingleQuote', 'quoteType', 'preferSingle', 21),
    (1030, 'Prettier를 VSCode에 통합할 때 필요한 확장 프로그램은?', 1, '상', 'Prettier - Code formatter', 'ESLint Formatter', 'Code Beautifier', 'Auto Linter', 21),
    (1031, 'ESLint와 Prettier를 함께 사용할 때 충돌을 방지하기 위한 패키지는?', 2, '하', 'eslint-plugin-prettier', 'eslint-config-prettier', 'prettier-eslint-config', 'eslint-prettier-sync', 21),
    (1032, 'eslint-plugin-prettier의 역할은?', 1, '하', 'Prettier를 Lint 규칙처럼 동작시킴', 'Prettier 포맷만 적용', 'Lint 설정 제거', 'Prettier 비활성화', 21),
    (1033, 'Prettier 설정이 ESLint 설정보다 우선되도록 하려면?', 3, '하', 'prettier-last', 'eslint-prettier-last', 'prettier를 extends 마지막에 설정', 'eslint-plugin-prettier 우선 적용', 21),
    (1034, 'Prettier와 ESLint를 동시에 적용하기 위한 설정 파일은?', 2, '중', '.eslintprettier.json', '.eslintrc', '.prettierrc', '.eslintconfig', 21),
    (1035, 'eslint-config-prettier를 사용하면 무엇이 비활성화되는가?', 2, '중', '모든 Lint 규칙', 'Prettier와 충돌하는 Lint 규칙', '모든 스타일 규칙', '커밋 훅', 21),
    (1036, 'VSCode에서 ESLint와 Prettier를 동시에 적용하려면 필요한 확장은?', 3, '중', 'Prettier only', 'ESLint only', '둘 다 설치', 'AutoLint', 21),
    (1037, 'ESLint와 Prettier를 통합한 후, 코드 포맷팅 자동화를 위해 설정할 수 있는 VSCode 기능은?', 2, '상', 'onSaveFormat', 'formatOnSave', 'saveFormatter', 'autoSaveLint', 21),
    (1038, 'Prettier 설정을 eslint-plugin-prettier에 연결하려면 필요한 설정 속성은?', 1, '상', 'rules.prettier/prettier', 'extends prettier', 'settings.prettier', 'plugin:prettier/setting', 21),
    (1039, 'Prettier 규칙 위반을 ESLint 에러로 처리하는 것은?', 2, '상', 'eslint-config-prettier', 'eslint-plugin-prettier', 'prettier-eslint', 'prettier-only', 21),
    (1040, 'Prettier를 적용한 파일만 선택적으로 포맷팅하려면 사용할 수 있는 커맨드는?', 1, '상', 'prettier --write ''src/**/*.{js,ts}''', 'eslint --fix', 'prettier --lint', 'prettier --check-only', 21),
    (1041, 'ESLint에서 사용자 정의 규칙을 만들려면 필요한 요소는?', 3, '하', 'parser', 'plugin', 'rule', 'formatter', 21),
    (1042, 'Prettier 설정 파일을 프로젝트 루트에 두는 이유는?', 2, '하', 'CI/CD 설정을 위해', '포맷팅 기준을 통일하기 위해', '코드 압축을 위해', '로그 저장을 위해', 21),
    (1043, 'ESLint 플러그인을 직접 개발할 때 필요한 핵심 구성 요소는?', 1, '하', 'rules', 'presets', 'config.js', 'validators', 21),
    (1044, '커스텀 규칙을 ESLint 설정 파일에 추가할 때 필요한 속성은?', 2, '중', 'customRules', 'rules', 'plugins', 'overrides', 21),
    (1045, 'Prettier에서 프로젝트마다 다른 스타일을 적용하려면 사용하는 파일은?', 2, '중', '.prettierignore', 'prettier.config.js', '.prettierrules', '.prettiersettings', 21),
    (1046, 'ESLint 커스텀 플러그인 개발 시 필수적으로 포함되어야 하는 파일은?', 1, '중', 'rules/index.js', 'lib/rules.js', 'src/config.js', 'plugin.config.js', 21),
    (1047, 'VSCode에서 저장 시 자동으로 Prettier 포맷팅을 적용하려면 설정해야 하는 옵션은?', 2, '상', 'editor.autoFormatOnSave', 'editor.formatOnSave', 'editor.saveFormat', 'editor.prettify', 21),
    (1048, 'Prettier 설정을 무시하고 특정 파일만 포맷팅 제외하려면 사용하는 파일은?', 1, '상', '.prettierignore', '.eslintignore', '.formatignore', '.ignoreprettier', 21),
    (1049, 'ESLint에서 특정 디렉토리만 별도 규칙으로 적용하려면 사용하는 설정 항목은?', 1, '상', 'overrides', 'env', 'globals', 'parserOptions', 21),
    (1050, 'Prettier 커스텀 설정을 여러 프로젝트에서 재사용하려면 사용하는 방법은?', 1, '상', '공유 설정 패키지로 배포', '로컬에 복사', 'VSCode 설정만 변경', 'package.json에 직접 작성', 21),
    (1051, 'Next.js는 어떤 프레임워크를 기반으로 만들어졌는가?', 2, '하', 'Vue.js', 'React.js', 'Angular', 'Svelte', 22),
    (1052, 'Next.js 프로젝트를 생성하는 명령어는?', 2, '하', 'npx create-react-app', 'npx create-next-app', 'npm init next', 'yarn next-create', 22),
    (1053, 'Next.js에서 기본적으로 제공하는 파일 기반 라우팅 디렉토리는?', 3, '하', 'src/', 'routes/', 'pages/', 'views/', 22),
    (1054, 'Next.js의 기본 개발 서버 실행 명령어는?', 1, '하', 'npm run dev', 'npm start', 'yarn build', 'next run', 22),
    (1055, 'Next.js에서 build 후 production 서버를 실행하는 명령어는?', 1, '중', 'npm run start', 'npm run serve', 'next serve', 'yarn start', 22),
    (1056, 'Next.js가 지원하는 기본 렌더링 방식은?', 4, '중', 'CSR', 'SSR', 'SSG', 'SSR과 SSG 모두 지원', 22),
    (1057, 'Next.js 설정 파일 이름은?', 2, '중', 'nextconfig.js', 'next.config.js', 'config.next.js', 'next.js.config', 22),
    (1058, 'Next.js 프로젝트 루트에 있어야 하는 디렉토리가 아닌 것은?', 4, '상', 'pages', 'public', 'styles', 'controllers', 22),
    (1059, 'Next.js의 public 디렉토리는 어떤 용도로 사용되는가?', 2, '상', 'API 정의', '정적 파일 제공', '라우팅 설정', '컴포넌트 저장', 22),
    (1060, 'Next.js를 사용하면 얻을 수 있는 주요 이점은?', 2, '상', '완전한 CSR', 'SSR 및 SEO 최적화', 'SPA 전용', '서버 부하 증가', 22),
    (1061, 'Next.js에서 새로운 페이지를 생성하려면 어디에 파일을 추가해야 하는가?', 2, '하', 'components/', 'pages/', 'public/', 'api/', 22),
    (1062, 'Next.js에서 페이지 이동을 위해 사용하는 컴포넌트는?', 3, '하', 'Navigate', 'RouterLink', 'Link', 'Move', 22),
    (1063, 'Next.js에서 프로그래밍 방식으로 페이지 이동을 할 때 사용하는 훅은?', 3, '하', 'useHistory', 'useNavigate', 'useRouter', 'useLocation', 22),
    (1064, 'Link 컴포넌트 안에 필수적으로 포함해야 하는 것은?', 1, '중', '<a> 태그', '<button> 태그', '<div> 태그', '<p> 태그', 22),
    (1065, 'Next.js의 동적 라우팅(dynamic routing)은 어떤 파일명 패턴을 사용하는가?', 2, '중', 'page.js', '[param].js', '{param}.js', 'param.js', 22),
    (1066, 'Next.js에서 catch-all 라우트를 만들기 위한 파일명 패턴은?', 1, '중', '[...param].js', '[[param]].js', '{param}.js', '(param).js', 22),
    (1067, 'useRouter 훅을 사용하여 현재 경로(path)를 가져오는 속성은?', 2, '상', 'route', 'pathname', 'path', 'currentPath', 22),
    (1068, 'Next.js에서 URL 쿼리 파라미터를 가져오기 위해 사용하는 것은?', 2, '상', 'useQuery', 'useRouter().query', 'getQuery()', 'router.param', 22),
    (1069, 'Next.js에서 404 페이지를 커스텀하려면 어떤 파일을 만들어야 하는가?', 1, '상', '404.js', 'error.js', 'notfound.js', 'fail.js', 22),
    (1070, 'Next.js에서 중첩된 라우팅(nested routing)을 구성하는 방법은?', 2, '상', 'routes 디렉토리 추가', 'pages 안에 디렉토리 생성', 'src 안에 폴더 생성', 'components에 파일 추가', 22),
    (1071, 'Next.js에서 서버사이드 렌더링(SSR)을 구현할 때 사용하는 함수는?', 2, '하', 'getStaticProps', 'getServerSideProps', 'useEffect', 'getInitialProps', 22),
    (1072, 'Next.js에서 정적 사이트 생성(SSG)을 할 때 사용하는 함수는?', 1, '하', 'getStaticProps', 'getServerSideProps', 'getInitialProps', 'fetchData', 22),
    (1073, 'Next.js의 Incremental Static Regeneration(ISR)은 무엇을 의미하는가?', 2, '하', '모든 페이지를 미리 생성', '정적 페이지를 주기적으로 재생성', '페이지를 항상 서버에서 생성', '클라이언트 사이드 데이터 요청', 22),
    (1074, 'getServerSideProps는 언제 호출되는가?', 3, '중', '빌드 타임', '클라이언트 렌더링 시', '요청 시마다', '페이지 로드 후', 22),
    (1075, 'Next.js에서 클라이언트 사이드에서 데이터를 가져올 때 사용하는 방법은?', 3, '중', 'getStaticProps', 'getServerSideProps', 'useEffect와 fetch', 'getInitialProps', 22),
    (1076, 'getStaticPaths는 어떤 상황에서 필요한가?', 1, '중', '정적 경로를 미리 정의할 때', '서버사이드 렌더링 할 때', 'API 호출 시', '라우터 초기화 시', 22),
    (1077, 'Next.js에서 Fallback: true 설정은 어떤 의미인가?', 3, '상', '모든 페이지를 미리 생성', '없으면 404 반환', '없는 페이지는 생성 후 제공', '서버에서 강제 새로고침', 22),
    (1078, 'Next.js에서 데이터 Fetching 최적화를 위한 기본 전략은?', 2, '상', '모든 요청 서버 처리', '정적 생성 + 필요 시 서버 요청', 'CSR만 사용', 'SSR만 사용', 22),
    (1079, 'getServerSideProps, getStaticProps 함수에서 반환해야 하는 객체 속성은?', 3, '상', 'response', 'data', 'props', 'serverData', 22),
    (1080, 'Next.js에서 클라이언트 요청에 따라 서버에서 매번 렌더링하는 방식은?', 2, '상', 'SSG', 'SSR', 'ISR', 'CSR', 22),
    (1081, 'Next.js에서 API Route를 만들려면 파일을 어디에 생성해야 하는가?', 2, '하', 'api/', 'pages/api/', 'server/', 'routes/', 22),
    (1082, 'Next.js API Route는 기본적으로 어떤 메서드를 지원하는가?', 3, '하', 'GET만', 'POST만', 'GET과 POST 모두', 'PUT만', 22),
    (1083, 'Next.js API Route 핸들러 함수의 첫 번째 파라미터는 무엇인가?', 2, '하', 'props', 'req', 'context', 'event', 22),
    (1084, 'Next.js API Route 핸들러 함수의 두 번째 파라미터는 무엇인가?', 1, '하', 'res', 'data', 'ctx', 'params', 22),
    (1085, 'Next.js API Route에서 클라이언트에 JSON 응답을 보내는 방법은?', 3, '중', 'res.end()', 'res.send()', 'res.json()', 'res.write()', 22),
    (1086, 'Next.js API Route에서 요청 메서드에 따라 분기할 때 사용하는 속성은?', 1, '중', 'req.method', 'req.type', 'req.query', 'req.header', 22),
    (1087, 'Next.js API Route의 파일 이름이 [id].js일 때 의미하는 것은?', 2, '중', '정적 파일', '동적 라우트', 'SSR 페이지', 'API Fetch용 파일', 22),
    (1088, 'API Route를 통해 서버 측에서 환경 변수를 사용하는 파일은?', 2, '상', '.gitignore', '.env.local', 'package.json', 'server.js', 22),
    (1089, 'Next.js API Route에서 404 에러를 반환할 때 사용하는 응답 코드는?', 3, '상', '200', '500', '404', '401', 22),
    (1090, 'API Route를 클라이언트 컴포넌트에서 호출할 때 가장 일반적으로 사용하는 함수는?', 1, '상', 'fetch()', 'axios()', 'getServerSideProps()', 'useRouter()', 22),
    (1091, 'Next.js에서 이미지 최적화를 위해 사용하는 컴포넌트는?', 2, '하', '<img>', '<Image>', '<NextImage>', '<OptimizedImage>', 22),
    (1092, 'Next.js에서 동적 import를 위해 사용하는 함수는?', 2, '하', 'import()', 'dynamic()', 'load()', 'asyncImport()', 22),
    (1093, 'Next.js에서 코드 스플리팅을 기본으로 지원하는 이유는?', 1, '하', '페이지 별로 코드를 나누어 로딩 속도 개선', '코드를 한 파일로 모으기 위해', '네트워크 트래픽 증가를 위해', 'SEO를 위해', 22),
    (1094, 'Next.js에서 PWA 지원을 위해 추가로 설치할 수 있는 패키지는?', 1, '중', 'next-pwa', 'next-seo', 'next-analytics', 'next-cloud', 22),
    (1095, 'Next.js의 Head 컴포넌트를 제공하는 패키지는?', 1, '중', 'next/head', 'react-helmet', 'next-helmet', 'head-next', 22),
    (1096, 'Next.js에서 글로벌 CSS 파일은 어디에 import해야 하는가?', 2, '중', '모든 컴포넌트 파일', 'pages/_app.js', 'pages/index.js', 'next.config.js', 22),
    (1097, 'Next.js에서 Static 파일을 최적화하려면 사용하는 디렉토리는?', 2, '상', 'src/static', 'public/', 'static/', 'staticFiles/', 22),
    (1098, 'Next.js에서 외부 API 요청을 서버 측에서 미리 처리하고 싶을 때 사용하는 기능은?', 2, '상', 'getStaticProps', 'getServerSideProps', 'getInitialProps', 'serverFetch', 22),
    (1099, 'Next.js 프로젝트를 Vercel에 배포할 때 특별한 설정이 필요한가?', 1, '상', '필요 없다', 'next.config.js 수정 필요', '환경 변수를 수동 설정', '전용 서버 설정 필요', 22),
    (1100, 'Next.js에서 기본적으로 지원하는 SEO 관련 최적화는 무엇인가?', 4, '상', '정적 페이지 생성', 'Server-side Rendering', '코드 스플리팅', '위 모든 것', 22),
    (1101, 'Vue 템플릿에서 데이터 바인딩을 위한 기본 구문은?', 1, '하', '{{  }}', '[[  ]]', '{{{  }}}', '(())', 23),
    (1102, 'Vue 인스턴스를 생성할 때 가장 먼저 호출되는 라이프사이클 훅은?', 1, '하', 'beforeCreate', 'created', 'mounted', 'beforeMount', 23),
    (1103, '템플릿에서 HTML 특수문자를 이스케이프하지 않고 그대로 출력하려면 사용하는 구문은?', 1, '하', 'v-html="rawHtml"', '{{ rawHtml }}', 'v-bind:html="rawHtml"', 'v-text="rawHtml"', 23),
    (1104, '다음 중 Vue 템플릿에 JavaScript 표현식을 사용할 수 없는 위치는?', 3, '중', 'v-bind 디렉티브 값', 'v-on 디렉티브 핸들러', '속성 이름(attribute key)', '텍스트 보간(interpolation) 안', 23),
    (1105, 'v-bind:class에 객체를 전달할 때, 클래스가 적용되는 조건은?', 1, '중', '키에 대응하는 값이 true일 때', '키가 문자열이 아닐 때', '값이 null일 때', '객체 길이가 0일 때', 23),
    (1106, 'data 옵션에서 함수가 아닌 객체를 반환하면 발생하는 문제는?', 1, '중', '모든 인스턴스가 동일 객체를 공유해 반응성 오류', '템플릿 파싱이 실패하여 빌드 중단', 'watcher가 자동으로 해제됨', 'props 전달이 차단됨', 23),
    (1107, '‘this.message’가 DOM에 반영되는 시점은? (mounted 훅 내부에서 변경)', 1, '상', 'mounted 훅 직후에 반영된다', 'nextTick 이후 첫 렌더링 때 반영된다', 'updated 훅 이후에만 반영된다', 'DOM에는 절대 반영되지 않는다', 23),
    (1108, '템플릿에서 v-bind 축약형으로 올바른 것은?', 1, '상', ':title="msg"', '.bind(title)="msg"', '@bind:title="msg"', '#title="msg"', 23),
    (1109, 'v-on:click="count++" 구문이 예상대로 동작하려면 count는 어디에 있어야 하는가?', 1, '상', 'data()가 반환하는 객체', 'methods 안', 'computed 안', 'watch 안', 23),
    (1110, '다음 중 인스턴스 옵션 중 필수가 아닌 것은?', 1, '상', 'methods', 'data', 'el / mount 대상', 'template 또는 render', 23),
    (1111, 'Vue 반응형 시스템의 핵심 개념은?', 1, '하', '데이터 변경 ↔ DOM 자동 동기화', '가상 DOM을 직접 조작', '양방향 바인딩 없는 단방향 흐름', 'DOM 변화를 수동으로 감지', 23),
    (1112, '계산된 속성(computed)의 특징은?', 1, '하', '의존 데이터가 변할 때만 재평가', '무조건 매 렌더링마다 실행', 'DOM 이벤트 발생 시에만 실행', '블로킹 I/O를 자동 회피', 23),
    (1113, 'Vue 3에서 ref(0)으로 반환되는 값의 내부 형식은?', 1, '하', '객체 { value: 0 } (Proxied)', 'Proxy 함수', '숫자 0 그 자체', 'WeakMap', 23),
    (1114, 'watch와 computed의 주요 차이점으로 올바른 것은?', 1, '중', 'watch는 부수 효과(side-effect) 실행용', 'watch는 캐싱된 결과를 반환', 'computed는 비동기 호출만 지원', 'computed는 의존성 추적을 하지 않음', 23),
    (1115, 'reactive()에 전달해도 반응형이 되지 않는 값은?', 1, '중', 'Map 또는 Set', '평범한 Object', '배열(Array)', '중첩 객체가 없는 null-free 리터럴', 23),
    (1116, 'DOM 갱신 후 실행하려면 다음 코드 뒤에 무엇을 해야 하는가? count.value++;', 1, '중', 'await nextTick() 뒤에 console.log 실행', 'flushSync()로 감싼다', 'watchEffect 안에서 실행', 'count.value += 0 으로 강제 트리거', 23),
    (1117, 'Vue 3 반응형 시스템이 Vue 2의 defineProperty 대신 사용하는 기술은?', 1, '상', 'ES6 Proxy', 'MutationObserver', 'WeakRef', 'Reflect.metadata', 23),
    (1118, 'shallowReactive()를 사용할 때의 이점은?', 1, '상', '루트 레벨만 반응형으로 만들어 메모리·성능 절약', '깊은 중첩 객체까지 자동 추적', 'ref와 동일한 API 제공', 'Computed 속성을 자동 생성', 23),
    (1119, 'watch 구성에서 deep:true, immediate:true가 비효율적인 경우는?', 1, '상', '변경 폭이 큰 대용량 중첩 객체를 감시', '원시형(ref) 값을 감시', 'deep 옵션 false', 'immediate false', 23),
    (1120, 'watchEffect가 watch보다 적합한 상황은?', 1, '상', '의존 대상을 명시하기 힘든 복합 반응형 로직', '특정 하나의 ref 변경에만 반응', '비동기 API 호출 후 에러 처리', 'props 유효성 검증', 23),
    (1121, '요소를 조건부로 렌더링하기 위한 기본 디렉티브는?', 1, '하', 'v-if', 'v-for', 'v-bind', 'v-html', 23),
    (1122, '리스트 렌더링에 사용하는 디렉티브는?', 1, '하', 'v-for', 'v-show', 'v-model', 'v-once', 23),
    (1123, '양방향 폼 바인딩을 제공하는 디렉티브는?', 1, '하', 'v-model', 'v-text', 'v-pre', 'v-slot', 23),
    (1124, 'v-show 디렉티브의 특징으로 올바른 것은?', 1, '중', 'DOM을 한 번만 렌더링하고 display 속성을 토글', '조건이 false면 노드를 아예 생성하지 않는다', '렌더 비용이 v-if보다 높다', '서버 사이드 렌더링에서만 사용된다', 23),
    (1125, 'v-bind .camel 수식어 기능은?', 1, '중', 'kebab-case 속성명을 camelCase로 변환', '문자열 값을 자동으로 number로 변환', 'HTML을 이스케이프하지 않고 출력', 'true 값을 전달하면 속성을 제거', 23),
    (1126, 'mounted 훅은 언제 호출되는가?', 1, '중', 'DOM 삽입 직후 최초 한 번', 'updated 훅 직후', '컴포넌트 생성 직후', 'beforeUnmount 직전', 23),
    (1127, '컴포넌트 제거 직전에 호출되는 훅은?', 1, '상', 'beforeUnmount', 'unmounted', 'beforeUpdate', 'errorCaptured', 23),
    (1128, 'Composition API에서 DOM 삽입 후 실행 훅 등록 함수는?', 1, '상', 'onMounted', 'onBeforeMount', 'useMounted', 'setupMounted', 23),
    (1129, 'v-on .capture 수식어 역할은?', 1, '상', '이벤트를 캡처 단계에서 처리', '이벤트 버블링 중단', '수신 이벤트를 상위로 전파', '리스너를 한 번만 실행', 23),
    (1130, '@keyup.enter 수식어 의미는?', 1, '상', 'Enter 키가 눌렸을 때만 keyup 핸들러 실행', 'keyup 이벤트 캡처 단계', 'Enter 키 아닌 경우 전파 중단', 'keydown 이벤트 변환', 23),
    (1131, '부모 → 자식 데이터 전달 메커니즘은?', 1, '하', 'props', 'slots', 'provide/inject', '$refs', 23),
    (1132, '자식이 부모에게 값을 전달할 때 호출하는 메서드는?', 1, '하', '$emit', '$dispatch', '$broadcast', '$send', 23),
    (1133, '기본(이름 없는) 슬롯 태그는?', 1, '하', '<slot>', '<slot name="default">', '<template #default>', '<slot-default>', 23),
    (1134, 'props 타입 유효성 검사 키는?', 1, '중', 'type', 'validator', 'required', 'default', 23),
    (1135, '전역 컴포넌트 등록 API는?', 1, '중', 'app.component()', 'Vue.use()', 'defineComponent()', 'createRenderer()', 23),
    (1136, '스코프드 슬롯 템플릿 축약은?', 1, '중', '<template #item="slotProps">', '<slot name="item" :slotProps>', '<slot v-bind="item">', '<template v-slot:itemProps>', 23),
    (1137, 'prop 값을 직접 변경 시 결과는?', 1, '상', 'Vue가 경고 출력, 변경은 반응형 아님', '부모 원본 데이터 즉시 변경', '변경 허용되나 반응성 깨짐', '런타임 에러 발생', 23),
    (1138, 'Composition API 자식이 v-model 지원하려면 emit 이벤트는?', 1, '상', 'update:modelValue', 'modelValue', 'input', 'change:model', 23),
    (1139, 'provide/inject 값을 반응형 유지하려면?', 1, '상', 'reactive() 또는 ref()로 래핑한 값 제공', '원시 값 제공', 'JSON 직렬화', 'watchEffect 반환', 23),
    (1140, '슬롯 설명 중 틀린 것은?', 4, '상', '슬롯 콘텐츠는 부모 범위에서 컴파일', '동일 컴포넌트 슬롯 이름은 유일', 'fallback 콘텐츠는 슬롯 비어 있을 때 표시', '스코프드 슬롯에서 자식→부모 데이터', 23),
    (1141, 'Angular CLI에서 프로덕션용 번들을 생성하려면 어떤 명령을 사용해야 하는가?', 1, '하', 'ng build --configuration production', 'ng serve --prod', 'ng deploy --prod', 'ng compile --prod', 23),
    (1142, 'Angular의 Ahead-of-Time 컴파일(AOT) 주된 장점은?', 1, '하', '런타임에 컴파일 오버헤드가 제거되어 초기 로드 속도가 빨라진다', '템플릿 문법 오류를 무시하고 빌드를 계속한다', '의존성 주입을 비활성화해 번들 크기를 줄인다', '개발 서버가 자동 재시작된다', 23),
    (1143, 'Angular 16의 기본 렌더러(컴파일러)로 채택된 엔진은?', 1, '하', 'Ivy', 'View Engine', 'Renderer2', 'Zone.js', 23),
    (1144, 'Jasmine 단위 테스트에서 비동기 호출 완료를 알리기 위해 주입하는 헬퍼는?', 1, '중', 'done() 콜백', 'fixture.detectChanges()', 'fakeAsync()', 'flushMicrotasks()', 23),
    (1145, 'Angular PWA 변환을 자동으로 설정해 주는 CLI 스키매틱 명령은?', 1, '중', 'ng add @angular/pwa', 'ng generate pwa', 'ng init --pwa', 'ng add service-worker', 23),
    (1146, '앱을 국제화(i18n) 빌드할 때 locale 별 번들을 만들도록 지정하는 CLI 플래그는?', 1, '중', '--localize', '--i18n', '--translate', '--locale-build', 23),
    (1147, '앱 전반에 걸쳐 사용되지 않는 코드가 번들에 포함되지 않도록 하는 Webpack/CLI 최적화 기법은?', 1, '상', 'Tree shaking', 'Code splitting', 'Inlining', 'Polyfilling', 23),
    (1148, 'Angular Universal을 사용해 서버 사이드 렌더링(SSR)을 도입하면 얻는 직접적 이점으로 옳은 것은?', 1, '상', '초기 HTML이 완성되어 SEO와 첫 콘텐츠 페인트(FCP)가 개선된다', '브라우저 번들 크기가 자동으로 50% 감소한다', 'Ivy가 비활성화되어 빌드 속도가 빨라진다', 'RxJS 의존성이 제거된다', 23),
    (1149, 'ng test 명령이 기본적으로 사용하는 테스트 러너는?', 1, '상', 'Karma', 'Jest', 'Mocha', 'Vitest', 23),
    (1150, 'Angular CLI 빌드 시 하위 브라우저용 ES5 코드 번들을 자동 생성해 주는 기능은?', 1, '상', 'Differential loading', 'Lazy chunk preloading', 'Webpack module federation', 'Inline critical CSS', 23),
    (1151, '클라이언트 잘못된 요청(예: JSON 스키마 위반)에 대한 권장 HTTP 상태 코드는?', 1, '하', '400 Bad Request', '401 Unauthorized', '500 Internal Server Error', '409 Conflict', 24),
    (1152, '인증 헤더가 누락된 요청에 서버가 반환해야 할 표준 상태 코드는?', 1, '하', '401 Unauthorized', '403 Forbidden', '412 Precondition Failed', '502 Bad Gateway', 24),
    (1153, 'REST API에서 존재하지 않는 리소스에 대한 GET 요청 시 적절한 응답 코드는?', 1, '하', '404 Not Found', '410 Gone', '204 No Content', '422 Unprocessable Entity', 24),
    (1154, 'RFC 7807 ‘Problem Details for HTTP APIs’가 권장하는 기본 Content-Type은?', 1, '중', 'application/problem+json', 'application/json; problem', 'text/problem', 'application/vnd.error+json', 24),
    (1155, 'RFC 7807 JSON 응답 예시에서 반드시 포함해야 하는 필드는?', 1, '중', 'title', 'instance', 'detail', 'errors', 24),
    (1156, '다음 중 4xx와 5xx 상태 코드 차이에 대한 설명으로 옳지 않은 것은?', 4, '중', '4xx는 클라이언트 오류, 5xx는 서버 오류를 나타낸다', '5xx는 재시도 가능성이 4xx보다 높다', '4xx 오류라도 Problem Details 바디를 포함할 수 있다', '4xx는 절대 재시도해서는 안 된다', 24),
    (1157, '동일 자원 중복 생성 시 서버가 반환해도 멱등성 규칙을 깨지지 않는 상태 코드는?', 1, '상', '409 Conflict', '201 Created', '202 Accepted', '302 Found', 24),
    (1158, 'Problem Details 바디에 커스텀 ‘code’ 정수 필드를 두는 주된 이점은?', 1, '상', '클라이언트가 로컬라이징 메시지를 매핑하기 쉽다', 'HTTP 상태 코드 전송을 생략할 수 있다', 'JSON 패싱을 건너뛸 수 있다', 'CORS 프리플라이트를 우회한다', 24),
    (1159, '다음 중 idempotent 메서드가 아닌 것은?', 1, '상', 'POST', 'PUT', 'DELETE', 'HEAD', 24),
    (1160, '클라이언트가 429 Too Many Requests 응답을 받을 때 재시도 시점을 알기 위해 확인해야 하는 헤더는?', 1, '상', 'Retry-After', 'Warning', 'WWW-Authenticate', 'Content-Encoding', 24),
    (1161, '브라우저 네트워크 오류 vs HTTP 오류 구분 방법은?', 1, '하', '응답 없음 & error.request 존재 → 네트워크 오류', 'status 0이면 HTTP 오류', 'message에 Network Error 포함 시 HTTP 오류', 'https로 시작시 네트워크 오류 없음', 24),
    (1162, '422 오류 UX 비추천 패턴은?', 1, '하', '모달 전체 가리고 중앙만 오류', '필드 인라인 표시', '폼 상단 요약', '스낵바 알림', 24),
    (1163, '전역 오류 핸들러 역할은?', 1, '하', '로그인 만료 등 공통 처리', '레이아웃 교체', 'CSS 초기화', 'History 재설정', 24),
    (1164, '오프라인 GET 요청 전략은?', 1, '중', '대기열 저장 후 복구 시 재시도', '캐시 비우고 에러', '503 구성', '무한 로딩', 24),
    (1165, 'Error Boundary 해결 문제는?', 1, '중', '렌더 예외로 인한 흰 화면', 'API 500 재시도', 'CORS 차단', 'WebSocket', 24),
    (1166, '중복 POST 방지 클라이언트 조치?', 1, '중', '이전 요청 취소 AbortController', 'Cache-Control no-store', 'POST→GET', '로그 제거', 24),
    (1167, 'axios 취소 vs 네트워크 오류 구분 프로퍼티?', 1, '상', 'error.code === ''ERR_CANCELED''', 'message 포함 Network', 'status -1', 'timeout 0', 24),
    (1168, '국제화 오류 메시지 비추천 방법은?', 1, '상', '서버가 완제품 문구 제공', '클라이언트 코드 매핑', 'title/detail 키 사용', '템플릿 변수 치환', 24),
    (1169, '모바일 에러/재요청 데이터 최소화 우선 고려는?', 1, '상', '오프라인 감지 후 백오프', '해상도 다운', '캐시 삭제', 'UDP 강제', 24),
    (1170, '사용자 메시지+디버그 정보 구조 권장?', 1, '상', 'UI 요약 & 콘솔 raw trace', 'alert 모두', '서버 HTML 오류 페이지', '쿠키 저장', 24),
    (1171, '멱등 메서드는?', 1, '하', 'PUT', 'POST', 'PATCH', 'CONNECT', 24),
    (1172, '고정 3초 4번 총 지연?', 1, '하', '12초', '9초', '6초', '3초', 24),
    (1173, '지수 1s 배수2 3회 누적?', 1, '중', '7 s', '6 s', '5 s', '4 s', 24),
    (1174, 'Retry-After 120 권장 재시도?', 1, '중', '120초 이상 후', '60초', '즉시', '무시', 24),
    (1175, 'POST 안전 재시도 보완책?', 1, '중', 'Idempotency-Key 헤더', 'HTTP/2 업그레이드', '빈 바디', 'PUT 사용', 24),
    (1176, '재시도 고려 가능한 408/409?', 1, '중', '408 Request Timeout', '409 Conflict', '400', '401', 24),
    (1177, 'Full Jitter 목적은?', 1, '상', '서버 폭주 완화', '총 지연 줄임', 'TCP 우회', 'TLS 감소', 24),
    (1178, '재시도 불가 오류 유형?', 1, '상', '400 필드 검증', '502', '408', '429', 24),
    (1179, '조건부 PUT 재시도 안전 이유?', 1, '상', 'ETag 버전 동일 시만 수행', 'PUT 캐싱', 'HTTP/3 전용', '브라우저 보장', 24),
    (1180, '모바일 TCP 끊김 POST 문제 감소?', 1, '상', '짧은 타임아웃 + 멱등 키', 'HTTP 1.0', '재시도 끔', '인증 제거', 24),
    (1181, 'Circuit Closed→Open 조건?', 1, '하', '연속 실패 임계', '성공 200', '301', '쿠키 만료', 24),
    (1182, 'Half-Open 성공 전이?', 1, '하', 'Closed', 'Open', 'Forced-Open', 'Isolated', 24),
    (1183, 'Open 상태 바로 실패 목적?', 1, '하', '백엔드 부하 차단', '캐시 무효', 'TLS 시간 줄임', 'DNS 재해석', 24),
    (1184, '재시도+CB 충돌 위험?', 1, '중', '과도 재시도→즉시 Open', 'Jitter 제거', 'Retry-After 무시', 'HTTP/2 끊김', 24),
    (1185, 'Coalescing 효과 시나리오?', 1, '중', '같은 리소스 다수 GET', '다른 POST', 'WebSocket', 'SSE', 24),
    (1186, 'Equal Jitter 이점 아닌 것?', 2, '중', '스파이크 완화', '최대/최소 지연 예측', 'Full Jitter보다 대기 줄임', '서버 완화', 24),
    (1187, 'Fallback 전략 사례?', 1, '상', '캐시된 데이터로 표시', '재시도 0', 'CB 강제 Close', 'Retry-After 무시', 24),
    (1188, 'Hedged Request 주의점?', 1, '상', '멱등 보장 필요', 'DNS TTL 0', 'KEEP-ALIVE 끊기', 'TLS 1.3', 24),
    (1189, 'Max-Retry-TTL 목적?', 1, '상', '무제한 지연 방지', 'TCP FIN 감소', '브라우저 버그 회피', 'Keep-Alive 증가', 24),
    (1190, 'CB 실시간 튜닝 기법?', 1, '상', 'Feature Flag 기반 임계 조정', '콘솔 변수', '헤더 하드코드', '빌드 상수', 24),
    (1191, '자주 쓰는 SLO 쌍은?', 1, '하', '가용성·오류율', 'CPU·메모리', '빌드시간·커버리지', 'PR 리뷰', 24),
    (1192, 'P99 증가 의심 원인?', 1, '하', '소수 요청 재시도 지연', '평균 느려짐', '404 급증', '로깅 오류', 24),
    (1193, '분산 추적 유용 이유?', 1, '중', 'Trace로 재시도 체인 시각화', '헤더 암호화', '로그 제거', '패킷 캡처', 24),
    (1194, 'Chaos 테스트 간단 도구?', 1, '중', 'MSW random error', 'CSS Lint', 'Bundle Analyzer', 'Lighthouse', 24),
    (1195, '포스트모템 포함 아님?', 1, '중', '담당자 인적 정보', '타임라인', 'RCA', '재발 방지', 24),
    (1196, '알림 임계 낮음 문제?', 1, '상', 'Alert Fatigue', 'MTTR 증가', 'Slack→Email', 'Grafana 꺼짐', 24),
    (1197, '롤아웃 안전 배포 전략?', 1, '상', 'Feature Flag Gradual', 'Big-bang', 'Force-push', 'CI 캐시 무효', 24),
    (1198, '로그 레벨 매핑?', 1, '상', '시작 debug, 재시도 info, 실패 error', '모두 warn', '재시도 fatal', '성공 error', 24),
    (1199, '슬라이딩 윈도우 오류율 이유?', 1, '상', '즉시값 대신 경향 파악', '메트릭 안 삭제', '테스트 속도', '다크 테마', 24),
    (1200, '오류율 상승 자동 롤백 기능은?', 1, '상', 'Canary 분석 → rollback', 'Merge Queue', 'multi-stage build', 'npm postinstall', 24),
    (1201, 'Vue Test Utils는 어떤 프레임워크의 테스트를 지원하는가?', 3, '하', 'React', 'Angular', 'Vue.js', 'Svelte', 25),
    (1202, 'Vue Test Utils에서 컴포넌트를 마운트하는 기본 함수는?', 2, '하', 'render()', 'mount()', 'create()', 'testMount()', 25),
    (1203, 'Vue Test Utils에서 ''wrapper''란 무엇을 의미하는가?', 1, '하', '컴포넌트를 감싼 객체', '라우터 인스턴스', 'Vuex 스토어', '서버 인스턴스', 25),
    (1204, 'Vue Test Utils를 사용하기 위해 반드시 필요한 테스트 러너는?', 2, '중', 'Jasmine', 'Mocha나 Jest', 'QUnit', 'AVA', 25),
    (1205, 'Vue Test Utils로 마운트된 컴포넌트를 검사할 수 있는 메서드는?', 2, '중', 'check()', 'find()', 'inspect()', 'query()', 25),
    (1206, 'Vue Test Utils를 통해 컴포넌트의 텍스트를 얻을 때 사용하는 메서드는?', 2, '중', 'html()', 'text()', 'get()', 'query()', 25),
    (1207, 'Vue Test Utils에서 wrapper.vm은 무엇을 참조하는가?', 3, '상', '뷰 루트 인스턴스', '테스트 파일', '컴포넌트의 Vue 인스턴스', '스토어 인스턴스', 25),
    (1208, 'Vue Test Utils에서 ''setData()''의 역할은?', 2, '상', 'props 설정', 'data 수동 수정', '컴포넌트 렌더링', '라우팅 변경', 25),
    (1209, 'Vue Test Utils의 ''trigger()'' 메서드는 어떤 역할을 하는가?', 2, '상', '컴포넌트 생성', '이벤트 발생', '스토어 연결', '서버 요청', 25),
    (1210, 'Vue Test Utils를 통해 존재 여부를 확인하는 메서드는?', 1, '상', 'exists()', 'visible()', 'checkExist()', 'queryExist()', 25),
    (1211, 'Vue Test Utils에서 전체 트리를 렌더링하는 함수는?', 2, '하', 'shallowMount()', 'mount()', 'create()', 'renderAll()', 25),
    (1212, 'Vue Test Utils에서 자식 컴포넌트를 스텁 처리하는 함수는?', 2, '하', 'mount()', 'shallowMount()', 'render()', 'stubMount()', 25),
    (1213, 'shallowMount()를 사용하면 얻을 수 있는 이점은?', 2, '하', '전체 트리 검증', '렌더링 성능 최적화', '라우터 연결', '스토어 초기화', 25),
    (1214, 'shallowMount와 mount의 가장 큰 차이점은?', 2, '중', 'props 처리 방식', '자식 컴포넌트 렌더링 여부', 'data 초기화 방식', 'router 연결 여부', 25),
    (1215, 'mount()를 사용할 때 예상되는 부작용은?', 1, '중', '테스트 속도 감소', '컴포넌트 삭제', '라우팅 에러', 'Vue 인스턴스 중복', 25),
    (1216, 'shallowMount()가 주로 사용되는 테스트 목적은?', 2, '중', '통합 테스트', '단위 테스트', 'E2E 테스트', 'API 테스트', 25),
    (1217, 'mount()를 사용할 때 자식 컴포넌트까지 렌더링되면 어떤 문제가 생길 수 있는가?', 2, '상', '의존성 없는 테스트 가능', '예상치 못한 실패 발생', '렌더링 속도 향상', '자동 이벤트 바인딩', 25),
    (1218, 'shallowMount() 시 자동으로 대체되는 것은?', 2, '상', 'Vuex 모듈', '자식 컴포넌트', '라우터 인스턴스', 'Axios 요청', 25),
    (1219, 'mount()의 주요 사용 시나리오는?', 3, '상', '비즈니스 로직 검증', '단일 컴포넌트 유닛 테스트', '전체 통합 시나리오 테스트', '스토어 비활성화', 25),
    (1220, 'shallowMount() 사용 시 주의할 점은?', 2, '상', '스토어 연결 여부', '자식 컴포넌트의 테스트 누락', '라우터 경로 변경', 'API 연결 지연', 25),
    (1221, 'Vue Test Utils에서 버튼 클릭 이벤트를 발생시키는 메서드는?', 2, '하', 'click()', 'trigger(''click'')', 'emit(''click'')', 'fire(''click'')', 25),
    (1222, 'input 요소에 값을 설정하고 변경 이벤트를 발생시키는 방법은?', 1, '하', 'setValue()', 'updateInput()', 'changeInput()', 'modifyInput()', 25),
    (1223, '컴포넌트의 props를 테스트 중 변경하려면 사용하는 메서드는?', 1, '하', 'setProps()', 'updateProps()', 'changeProps()', 'mutateProps()', 25),
    (1224, 'Vue Test Utils의 find() 메서드는 무엇을 반환하는가?', 2, '중', 'Node 객체', 'Wrapper 객체', 'Text 객체', 'HTML 요소', 25),
    (1225, 'emit() 메서드는 어떤 용도로 사용되는가?', 2, '중', '이벤트 수신', '이벤트 트리거', 'HTTP 요청', 'Vuex 디스패치', 25),
    (1226, '컴포넌트가 특정 이벤트를 발생했는지 테스트할 때 사용하는 메서드는?', 1, '중', 'emitted()', 'triggered()', 'sent()', 'received()', 25),
    (1227, 'Vue 컴포넌트가 emit한 이벤트의 payload를 확인하려면?', 1, '상', 'emitted()', 'payload()', 'findEmits()', 'trigger()', 25),
    (1228, 'emit된 이벤트 수를 체크하려면?', 1, '상', 'emitted().length', 'trigger().count', 'findEmits().total', 'events().size', 25),
    (1229, 'setValue() 메서드를 사용한 후 필요한 추가 작업은?', 1, '상', 'trigger(''input'')', 'trigger(''change'')', 'forceUpdate()', 'reRender()', 25),
    (1230, 'Vue 컴포넌트 상호작용 테스트 시 DOM 변경을 강제로 반영하려면?', 2, '상', 'forceUpdate()', 'nextTick()', 'reRender()', 'syncDOM()', 25),
    (1231, 'Vue Test Utils에서 비동기 DOM 업데이트를 기다릴 때 사용하는 것은?', 3, '하', 'waitFor()', 'flushPromises()', 'nextTick()', 'resolveDOM()', 25),
    (1232, 'Vue 3에서는 비동기 테스트 시 어떤 helper를 권장하는가?', 1, '하', 'flushPromises()', 'wait()', 'waitForEvent()', 'asyncTick()', 25),
    (1233, 'setProps() 이후 변경 사항이 반영되기 전에 필요한 것은?', 1, '하', 'nextTick()', 'setTimeout()', 'forceUpdate()', 'trigger(''update'')', 25),
    (1234, 'Vue Test Utils에서 이벤트를 수동으로 발생시키려면?', 3, '중', 'click()', 'emit()', 'trigger()', 'activate()', 25),
    (1235, 'Vue Test Utils에서 input 이벤트를 발생시키는 올바른 방법은?', 2, '중', 'trigger(''change'')', 'trigger(''input'')', 'emit(''input'')', 'updateValue()', 25),
    (1236, '비동기 호출이 완료되기 전 테스트가 끝나는 것을 방지하려면?', 1, '중', 'await nextTick()', 'trigger(''complete'')', 'setImmediate()', 'flushDOM()', 25),
    (1237, 'Vue Test Utils에서 컴포넌트 이벤트 emit 테스트를 할 때 필요한 메서드는?', 2, '상', 'triggerEmit()', 'emitted()', 'captureEvent()', 'emitCheck()', 25),
    (1238, 'Promise 기반 로직 테스트 후 DOM 업데이트를 보장하려면?', 2, '상', 'nextTick()', 'flushPromises()', 'resolveAsync()', 'trigger(''domUpdate'')', 25),
    (1239, 'Vue Test Utils에서 DOM 변경을 감지한 후 테스트를 진행하려면?', 2, '상', 'await wrapper.update()', 'await wrapper.vm.$nextTick()', 'await wrapper.flush()', 'await wrapper.domFlush()', 25),
    (1240, '컴포넌트 내부의 타이머 관련 테스트를 진행할 때 필요한 것은?', 1, '상', 'jest.useTimers()', 'flushTimers()', 'nextTick()', 'triggerTimer()', 25),
    (1241, 'Vue Test Utils에서 외부 의존성을 대체하는 방법은?', 2, '하', 'mock()', 'stub()', 'replace()', 'substitute()', 25),
    (1242, 'Vue Test Utils의 stubs 옵션은 어떤 역할을 하는가?', 1, '하', '자식 컴포넌트 무시', 'props 자동 설정', '라우터 연결', '스토어 주입', 25),
    (1243, 'Vue Test Utils에서 플러그인을 마운트할 때 사용하는 옵션은?', 3, '하', 'use()', 'plugins', 'global.plugins', 'setupPlugins()', 25),
    (1244, 'Vue Test Utils에서 provide/inject를 테스트하려면 사용하는 옵션은?', 1, '중', 'provide', 'inject', 'plugin', 'mock', 25),
    (1245, 'mock 옵션을 사용하면 주로 무엇을 대체하는가?', 3, '중', '라우터', '스토어', '글로벌 프로퍼티', '컴포넌트', 25),
    (1246, 'Vue Test Utils에서 $router를 Mock으로 대체하려면 사용하는 옵션은?', 1, '중', 'mocks: { $router: ... }', 'stubs: { RouterLink: ... }', 'plugins: [...]', 'global.routes', 25),
    (1247, 'Stub된 컴포넌트는 렌더링 결과에 어떤 영향을 미치는가?', 2, '상', '원본 HTML을 그대로 출력', '간단한 Placeholder만 출력', '전체 트리 삭제', '랜덤 렌더링', 25),
    (1248, 'Vue Test Utils에서 특정 메서드 호출을 mock하려면 무엇을 사용해야 하는가?', 1, '상', 'jest.fn()', 'sinon.spy()', 'vueMock()', 'mockCall()', 25),
    (1249, 'Vuex store를 테스트할 때 actions를 Mock할 수 있는 방법은?', 2, '상', 'store.replaceActions()', 'mocks 옵션에 주입', 'store.mockActions()', 'store.stubActions()', 25),
    (1250, 'Vue Test Utils에서 플러그인 주입 없이 테스트하려면 필요한 것은?', 3, '상', 'mock plugins', 'setupTestPlugin()', 'global.plugins 제거', '플러그인 무시 설정', 25),
    (1251, 'Nuxt.js 프로젝트에서 기본적으로 라우트를 생성하는 폴더는?', 3, '하', 'layouts', 'store', 'pages', 'components', 26),
    (1252, 'Nuxt.js는 어떤 프레임워크를 기반으로 만들어졌는가?', 2, '하', 'React', 'Vue', 'Angular', 'Svelte', 26),
    (1253, 'Nuxt.js에서 자동으로 생성된 라우터 경로는 어떤 파일 구조를 기반으로 하는가?', 3, '하', 'store', 'components', 'pages', 'plugins', 26),
    (1254, '동적 라우팅을 위한 파일명 형식은?', 2, '중', '[id].vue', '_id.vue', 'id.vue', ':id.vue', 26),
    (1255, 'Nuxt.js의 기본 실행 포트는?', 1, '중', '3000', '8080', '5000', '4000', 26),
    (1256, 'Nuxt.js에서 글로벌 설정을 위한 파일은?', 1, '중', 'nuxt.config.js', 'settings.js', 'app.config.js', 'vue.config.js', 26),
    (1257, 'Nuxt.js에서 미들웨어를 사용하는 주요 목적은?', 2, '상', '서버 리셋', '라우트 접근 제어', '라우터 초기화', 'API 생성', 26),
    (1258, 'nuxt generate 명령은 어떤 목적을 위해 사용하는가?', 2, '상', '개발 서버 실행', '정적 사이트 생성', '스토어 초기화', '프로젝트 테스트', 26),
    (1259, 'Nuxt.js 프로젝트에서 플러그인을 등록하는 폴더는?', 2, '상', 'middleware', 'plugins', 'layouts', 'static', 26),
    (1260, 'Nuxt.js에서 SSR이란?', 2, '상', 'Single Static Route', 'Server-Side Rendering', 'State Store Route', 'Server Session Request', 26),
    (1261, 'Nuxt.js에서 전체 페이지에 공통으로 적용되는 레이아웃은?', 1, '하', 'default.vue', 'global.vue', 'main.vue', 'shared.vue', 26),
    (1262, '페이지 파일은 어떤 폴더 안에 위치해야 Nuxt.js에서 인식하는가?', 2, '하', 'components', 'pages', 'layouts', 'store', 26),
    (1263, 'Nuxt.js 페이지에서 layout을 지정하려면 사용하는 속성은?', 2, '하', 'template', 'layout', 'useLayout', 'wrapper', 26),
    (1264, '레이아웃 파일은 어떤 폴더에 위치하는가?', 1, '중', 'layouts', 'pages', 'views', 'static', 26),
    (1265, '<nuxt/> 컴포넌트의 역할은?', 3, '중', '라우팅 처리', '페이지 전환 트리거', '페이지 내용 렌더링', '스토어 접근', 26),
    (1266, '페이지 내에서 transition을 적용할 때 사용하는 키워드는?', 1, '중', 'pageTransition', 'animation', 'layoutAnimation', 'routerTransition', 26),
    (1267, '레이아웃 변경이 필요한 경우 사용하는 hook은?', 2, '상', 'beforeCreate', 'layout()', 'setup()', 'useLayout()', 26),
    (1268, 'Nuxt.js에서 layout 속성은 어디에 정의되는가?', 2, '상', 'components', 'script', 'data', 'template', 26),
    (1269, 'Nuxt.js에서 동적 레이아웃 전환은 어떻게 처리되는가?', 2, '상', 'computed 속성', 'layout() 함수', 'transition 속성', 'nuxt.config.js', 26),
    (1270, '레이아웃을 조건부로 바꾸려면 무엇을 사용해야 하는가?', 2, '상', 'computed layout', 'layout() 함수 반환', 'watchLayout()', 'layoutTransition', 26),
    (1271, 'Nuxt.js에서 상태 관리를 위해 사용하는 기본 라이브러리는?', 3, '하', 'Pinia', 'Redux', 'Vuex', 'Zustand', 26),
    (1272, 'Vuex 스토어 파일은 어떤 폴더에 위치해야 Nuxt가 인식하는가?', 1, '하', 'store', 'pages', 'layouts', 'components', 26),
    (1273, 'Vuex에서 상태 변경을 위한 함수는?', 2, '하', 'getter', 'mutation', 'action', 'state', 26),
    (1274, 'Vuex의 상태를 가져오기 위한 헬퍼 함수는?', 3, '중', 'mapActions', 'mapMutations', 'mapState', 'useState', 26),
    (1275, 'Vuex에서 비동기 처리를 담당하는 메서드는?', 2, '중', 'mutations', 'actions', 'state', 'store', 26),
    (1276, 'Vuex의 getters의 주요 목적은?', 3, '중', '상태 변경', '비동기 로직', '상태 기반 계산', '모듈 등록', 26),
    (1277, 'Nuxt.js에서 store를 모듈 단위로 나누려면 어떤 설정이 필요한가?', 2, '상', 'state: true', 'namespaced: true', 'modular: true', 'separate: true', 26),
    (1278, 'store/index.js에서 반드시 export 되어야 하는 것은?', 2, '상', 'getters', 'default function', 'mutations', 'modules', 26),
    (1279, 'Vuex의 state를 사용하는 방식은?', 2, '상', 'this.$store.dispatch()', 'this.$store.state.key', 'this.$store.commit()', 'this.$store.inject()', 26),
    (1280, 'Nuxt에서 store를 동적으로 생성하려면 어떤 속성을 설정해야 하는가?', 3, '상', 'dynamic: true', 'storeMode: ''dynamic''', 'export default () => new Vuex.Store()', 'useDynamic()', 26),
    (1281, 'Nuxt.js에서 asyncData는 어떤 시점에 실행되는가?', 3, '하', '클라이언트 렌더링 후', '컴포넌트 생성 후', '서버 또는 클라이언트 렌더링 전에', '라우터 변경 시', 26),
    (1282, 'asyncData는 어떤 타입의 값을 반환해야 하는가?', 4, '하', 'Promise', 'Array', 'Function', 'Object', 26),
    (1283, 'asyncData와 fetch의 차이점 중 옳은 것은?', 3, '하', '둘 다 컴포넌트 메서드로 정의된다', 'asyncData는 setup에서만 작동한다', 'fetch는 this 접근이 가능하다', 'fetch는 SSR에서 작동하지 않는다', 26),
    (1284, 'Nuxt.js에서 $axios는 어떤 역할을 하는가?', 2, '중', '뷰 전환', 'API 호출', '라우터 설정', '스토어 초기화', 26),
    (1285, 'fetch() 함수는 어떤 시점에 호출되는가?', 3, '중', '라우터 변경 시', '컴포넌트 mounted 후', '페이지 진입 시', 'DOM 렌더링 후', 26),
    (1286, '서버에서만 asyncData를 호출하게 하려면 어떻게 설정하는가?', 4, '중', 'ssrOnly: true', 'serverOnly: true', 'context.ssr = true', 'process.server 조건문 사용', 26),
    (1287, 'asyncData에서 this 키워드를 사용할 수 없는 이유는?', 3, '상', '비동기라서', 'setup 훅 외부라서', 'context 기반 함수이기 때문', 'Vue 3 미지원', 26),
    (1288, 'fetch와 asyncData를 함께 사용할 수 있는가?', 3, '상', '불가능하다', '가능하지만 권장되지 않는다', '가능하다', 'Vuex를 사용할 경우만 가능', 26),
    (1289, 'API 요청을 공통으로 처리하기 위해 사용하는 Nuxt 모듈은?', 2, '상', '@nuxt/http', '@nuxt/axios', '@nuxt/request', '@nuxt/fetch', 26),
    (1290, 'Nuxt에서 context를 활용하는 함수가 아닌 것은?', 3, '상', 'asyncData', 'fetch', 'created', 'middleware', 26),
    (1291, 'Nuxt.js에서 환경 변수는 어떤 파일에 설정하는가?', 1, '하', '.env', 'nuxt.config.js', 'package.json', 'store/index.js', 26),
    (1292, 'SSR을 비활성화하려면 nuxt.config.js에서 어떤 속성을 설정해야 하는가?', 1, '하', 'ssr: false', 'mode: ''spa''', 'static: true', 'target: ''spa''', 26),
    (1293, '정적 사이트 생성을 위한 Nuxt 명령은?', 4, '하', 'nuxt run', 'nuxt build', 'nuxt export', 'nuxt generate', 26),
    (1294, 'nuxt.config.js에서 SEO를 위한 설정은 어디에 정의되는가?', 2, '중', 'meta', 'head', 'seo', 'titleTemplate', 26),
    (1295, 'Nuxt에서 외부 모듈을 추가할 때 사용하는 속성은?', 1, '중', 'modules', 'plugins', 'imports', 'include', 26),
    (1296, 'generate로 생성된 파일의 기본 디렉토리는?', 1, '중', 'dist', 'build', 'out', '.nuxt', 26),
    (1297, 'Nuxt에서 미들웨어로 로그인 여부를 검사할 때 위치는?', 2, '상', 'layouts', 'middleware', 'pages', 'static', 26),
    (1298, '라우팅 설정을 커스터마이징할 때 사용하는 옵션은?', 1, '상', 'router.extendRoutes', 'route.config', 'customRoutes', 'routes.options', 26),
    (1299, '정적 파일을 제공하는 Nuxt 디렉토리는?', 3, '상', 'assets', 'components', 'static', 'layouts', 26),
    (1300, 'Nuxt.js를 Vercel에 배포할 때 사용하는 설정 파일은?', 4, '상', '.vercel.json', 'vercel.config.js', 'nuxt.config.js', 'vercel.json', 26),
    (1301, 'Angular Universal은 무엇을 위한 기술인가?', 2, '하', '모바일 앱 개발', '서버 사이드 렌더링(SSR)', '데스크탑 앱 개발', 'PWA 개발', 27),
    (1302, 'Angular Universal을 사용하면 얻을 수 없는 효과는?', 3, '하', '초기 로딩 속도 개선', 'SEO 향상', '브라우저 캐시 제어', '서버 측 렌더링', 27),
    (1303, 'Angular Universal의 핵심 모듈은?', 2, '하', 'HttpClientModule', 'ServerModule', 'RouterModule', 'FormsModule', 27),
    (1304, 'Angular Universal이 필요한 주요 이유는?', 2, '중', '동적 데이터 바인딩', '서버 초기 페이지 제공', '라우팅 단순화', 'API 구축', 27),
    (1305, 'Universal 렌더링의 기본 동작 방식은?', 2, '중', '클라이언트에서만 렌더링', '서버에서 HTML 생성 후 클라이언트로 전송', 'SSR 후에도 HTML 미생성', '서버-클라이언트 양방향 바인딩', 27),
    (1306, 'Angular Universal을 추가할 때 사용하는 CLI 명령어는?', 1, '중', 'ng add @angular/ssr', 'ng generate universal', 'ng add universal', 'ng install angular-server', 27),
    (1307, 'Universal 렌더링을 통해 특히 이점이 큰 앱은?', 2, '상', '채팅 앱', 'SEO가 중요한 앱', '실시간 게임 앱', '데스크탑 앱', 27),
    (1308, 'Angular Universal 프로젝트의 서버 진입점 파일은?', 2, '상', 'main.ts', 'server.ts', 'index.ts', 'app.module.ts', 27),
    (1309, 'Angular Universal이 사용하는 서버 프레임워크는 주로 무엇인가?', 2, '상', 'Spring', 'Express', 'Koa', 'Django', 27),
    (1310, 'Universal 렌더링 후 Angular가 클라이언트에서 takeover 하는 과정을 무엇이라 부르는가?', 2, '상', 'Rehydration', 'Hydration', 'Serialization', 'Deserialization', 27),
    (1311, 'Angular Universal을 프로젝트에 추가하는 CLI 명령어는?', 1, '하', 'ng add @nguniversal/express-engine', 'ng generate universal', 'ng install universal', 'ng build server', 27),
    (1312, 'SSR을 활성화하면 Angular 프로젝트에 추가되는 서버 프레임워크는?', 2, '하', 'NestJS', 'Express', 'Koa', 'Fastify', 27),
    (1313, 'SSR 빌드를 실행할 때 사용하는 명령어는?', 3, '하', 'ng build', 'ng run project-name:server', 'npm run build:ssr', 'ng start server', 27),
    (1314, 'SSR 빌드 후 서버를 실행하는 명령어는?', 1, '중', 'npm run dev:ssr', 'npm start', 'ng serve server', 'ng deploy', 27),
    (1315, 'Angular Universal이 생성하는 server.ts 파일의 역할은?', 3, '중', '라우팅 관리', 'API 서버 구축', '서버 사이드 렌더링 핸들링', '컴포넌트 등록', 27),
    (1316, 'SSR 빌드시 dist 폴더 내 서버 파일이 위치하는 기본 경로는?', 1, '중', 'dist/server', 'dist/browser', 'dist/angular', 'dist/universal', 27),
    (1317, 'Angular Universal 프로젝트에서 서버 코드를 수정한 경우 필요한 작업은?', 3, '상', '브라우저 새로고침', 'ng serve 재시작', 'server build 재빌드', 'ng lint', 27),
    (1318, 'Angular Universal 서버는 기본적으로 어떤 포트에서 동작하는가?', 1, '상', '3000', '4000', '4200', '8080', 27),
    (1319, 'Angular Universal 서버 코드에서 요청 객체를 받는 함수는?', 3, '상', 'handleRequest()', 'ngServer()', 'ngExpressEngine()', 'expressHandler()', 27),
    (1320, 'SSR 설정시 Angular AppServerModule은 어떤 역할을 하는가?', 3, '상', 'API 서버 구성', '라우터 미들웨어 설정', '서버 사이드 렌더링 모듈 정의', '로그 기록', 27),
    (1321, '서버 측 렌더링(SSR) 흐름에서 가장 먼저 수행되는 것은?', 2, '하', '브라우저 렌더링', '서버 HTML 생성', 'API 호출', '라우터 이동', 27),
    (1322, 'Angular Universal 서버는 요청을 받으면 어떤 엔진을 호출하는가?', 2, '하', 'renderEngine', 'ngExpressEngine', 'serverEngine', 'htmlGenerator', 27),
    (1323, 'SSR 처리 시 Angular가 렌더링을 완료하면 서버는 무엇을 클라이언트에 반환하는가?', 3, '하', 'JSON 데이터', 'Static Files', 'HTML 페이지', 'API 응답', 27),
    (1324, '서버 사이드 렌더링에서 상태 동기화는 어느 과정에서 일어나는가?', 1, '중', 'Hydration', 'Serialization', 'Navigation', 'Injection', 27),
    (1325, '서버 렌더링 중 API 요청을 막지 않고 처리하는 방법은?', 2, '중', '지연 렌더링', 'transferState 사용', 'streaming', 'browserPreload', 27),
    (1326, '서버와 클라이언트 간 상태 전송을 위한 Angular 서비스는?', 1, '중', 'TransferHttpCacheModule', 'HttpClientModule', 'ServerStateModule', 'HydrationService', 27),
    (1327, '서버 응답이 끝나기 전에 클라이언트가 초기화되는 것을 무엇이라 부르는가?', 2, '상', 'Rehydration', 'Preboot', 'Prefetching', 'ServerWait', 27),
    (1328, '서버 사이드 렌더링 후 클라이언트가 takeover 하지 않으면 생기는 문제는?', 3, '상', '라우팅 실패', 'SEO 실패', '앱이 비활성화 상태로 남음', '속도 저하', 27),
    (1329, '서버 사이드 렌더링에서 preboot의 역할은?', 2, '상', '애니메이션 동기화', '초기 이벤트 기록', '라우터 히스토리 관리', '데이터베이스 연결', 27),
    (1330, '서버 측 렌더링 흐름에서 TransferState를 사용하는 주된 이유는?', 2, '상', '보안 강화', 'API 요청 최소화', '렌더링 속도 향상', '라우터 최적화', 27),
    (1331, 'Angular Universal에서 라우팅은 주로 어디에서 처리되는가?', 2, '하', '클라이언트', '서버', '브라우저', 'CDN', 27),
    (1332, '서버 측 라우팅을 위해 사용하는 Angular 모듈은?', 3, '하', 'HttpClientModule', 'ServerModule', 'RouterModule', 'UniversalModule', 27),
    (1333, 'Angular SSR에서 라우트별 HTML 생성을 가능하게 하는 기능은?', 2, '하', 'Static Rendering', 'Prerendering', 'Dynamic Routing', 'Lazy Loading', 27),
    (1334, 'Angular Universal 프로젝트에서 prefetch 데이터를 저장하는 방법은?', 3, '중', 'sessionStorage', 'localStorage', 'TransferState', 'Cookie', 27),
    (1335, '라우팅 이벤트를 감지하여 SSR 데이터 프리페칭을 수행하려면 무엇을 사용해야 하는가?', 2, '중', 'ActivatedRoute', 'Router Events', 'NavigationEnd', 'RouteGuard', 27),
    (1336, '라우트 기반 프리페칭 전략 중 잘못된 것은?', 4, '중', 'Immediate Prefetching', 'On-Demand Prefetching', 'Preloading Strategy', 'Delayed Loading', 27),
    (1337, 'SSR을 통해 첫 페이지에 대해 얻을 수 있는 주요 이점은?', 1, '상', '클라이언트 부하 감소', '코드 난독화', '라우터 초기화 최소화', 'CSS 최적화', 27),
    (1338, '데이터를 라우트마다 미리 가져오려면 Angular에서 무엇을 사용해야 하는가?', 1, '상', 'Resolvers', 'Guards', 'Interceptors', 'Pipes', 27),
    (1339, '서버에서 라우팅 시 발생할 수 있는 문제를 방지하기 위한 권장 방법은?', 2, '상', '라우터 Lazy Load 제거', 'TransferState 활용', 'HTTP 요청 차단', 'RouterModule 제거', 27),
    (1340, '라우팅 시 데이터 프리페칭 최적화를 위해 사용하는 전략은?', 1, '상', 'PreloadAllModules', 'LazyLoadModules', 'SyncLoadModules', 'AllRoutesPrefetch', 27),
    (1341, 'SSR에서 초기 렌더링 후 클라이언트가 takeover하는 과정은 무엇이라 불리는가?', 1, '하', 'Hydration', 'Serialization', 'Prefetching', 'Rendering', 27),
    (1342, 'Angular Universal 앱의 성능 최적화를 위해 가장 권장되는 방법은?', 1, '하', '이미지 Lazy Loading', '모든 코드를 클라이언트에 동시 전송', '서버 캐시 비활성화', '브라우저 히스토리 비활성화', 27),
    (1343, 'Angular Universal 앱 배포 시 Node 서버와 함께 사용하는 서버는?', 3, '하', 'Nginx', 'Apache', 'Express', 'Spring Boot', 27),
    (1344, 'SSR 페이지 캐싱을 통해 얻을 수 있는 주요 이점은?', 2, '중', '코드 경량화', '초기 응답 시간 단축', 'CSS 최적화', '라우터 트래픽 감소', 27),
    (1345, 'Static SSR 페이지를 생성하는 Angular 명령어는?', 2, '중', 'ng deploy', 'ng prerender', 'ng static', 'ng build static', 27),
    (1346, '서버 캐시를 구현할 때 가장 많이 사용하는 미들웨어는?', 2, '중', 'compression', 'express-cache-controller', 'helmet', 'body-parser', 27),
    (1347, 'Angular Universal 앱에서 SEO를 향상시키기 위한 방법은?', 1, '상', 'Canonical URL 설정', 'CSS 최적화', 'Lazy Loading 제거', 'State 저장', 27),
    (1348, 'SSR 시 TransferState의 주요 목적은?', 2, '상', '라우터 히스토리 저장', '서버와 클라이언트 간 데이터 공유', '서버 성능 향상', '미들웨어 로깅', 27),
    (1349, 'Static Generation과 SSR의 주요 차이점은?', 1, '상', 'Static은 빌드 시 HTML 생성, SSR은 요청 시 생성', 'SSR은 정적 파일만 생성', 'Static은 항상 서버 필요', 'SSR은 파일 시스템만 사용', 27),
    (1350, 'Angular Universal 배포시 서버 부하를 줄이기 위한 전략은?', 2, '상', 'SSR 모든 요청 처리', 'Static 페이지 최대한 활용', 'SPA 모드 사용', '라우터 동기화', 27),
    (1351, 'Jasmine은 어떤 종류의 테스트 프레임워크인가?', 2, '하', 'E2E 테스트', '유닛 테스트', '통합 테스트', 'UI 테스트', 28),
    (1352, 'Jasmine 테스트를 그룹화하는 함수는?', 2, '하', 'test()', 'describe()', 'group()', 'it()', 28),
    (1353, 'Jasmine에서 개별 테스트 케이스를 정의하는 함수는?', 2, '하', 'describe()', 'it()', 'testCase()', 'example()', 28),
    (1354, 'Jasmine에서 테스트 시작 전 실행되는 함수는?', 3, '중', 'beforeAll()', 'afterEach()', 'beforeEach()', 'init()', 28),
    (1355, 'Jasmine에서 모든 테스트가 끝난 후 실행되는 함수는?', 2, '중', 'afterEach()', 'afterAll()', 'beforeAll()', 'done()', 28),
    (1356, 'Jasmine의 BDD 스타일 문법에서 ''expect''는 무엇을 정의하는가?', 2, '중', '테스트 스위트', '예상 결과', '비동기 콜백', '모듈 임포트', 28),
    (1357, 'Jasmine에서 여러 조건 중 하나라도 실패하면?', 2, '상', '다음 조건 무시', '전체 테스트 실패', '계속 진행', '조건 무효화', 28),
    (1358, 'Jasmine 테스트를 임시로 비활성화할 때 사용하는 함수는?', 3, '상', 'it.skip()', 'xdescribe()', 'xit()', 'disabled()', 28),
    (1359, 'Jasmine에서 테스트 스위트를 비활성화하는 함수는?', 3, '상', 'skipSuite()', 'disabledDescribe()', 'xdescribe()', 'xgroup()', 28),
    (1360, 'Jasmine 테스트 스위트 실행 순서는?', 3, '상', '랜덤', '정렬된 순서', '정의된 순서', '우선순위 지정', 28),
    (1361, 'Jasmine에서 ''toBe()'' 매처는 무엇을 비교하는가?', 2, '하', '값만 비교', '참조 비교', '깊은 복사 비교', '타입 비교', 28),
    (1362, 'Jasmine에서 ''toEqual()'' 매처는 어떤 비교를 수행하는가?', 2, '하', '참조 비교', '값 비교', '주소 비교', '타입 체크', 28),
    (1363, 'Jasmine에서 ''toBeTruthy()'' 매처는 어떤 결과를 기대하는가?', 3, '하', 'false', 'null', 'truthy 값', 'undefined', 28),
    (1364, 'Jasmine에서 배열이나 객체의 포함 여부를 검사하는 매처는?', 2, '중', 'toBeDefined()', 'toContain()', 'toMatch()', 'toBeGreaterThan()', 28),
    (1365, 'Jasmine 테스트 구조에서 ''beforeEach''는 어떤 역할을 하는가?', 2, '중', '모든 테스트 후 초기화', '각 테스트 전에 준비 작업 수행', '모든 테스트 후 실행', '모든 테스트를 스킵', 28),
    (1366, 'Jasmine 매처 중 정규 표현식 검증에 사용하는 것은?', 1, '중', 'toMatch()', 'toContain()', 'toBeDefined()', 'toBeTruthy()', 28),
    (1367, 'Jasmine에서 값이 undefined가 아닌지 확인하는 매처는?', 3, '상', 'toBeNull()', 'toBeFalsy()', 'toBeDefined()', 'toEqual()', 28),
    (1368, 'Jasmine에서 ''not''을 사용하면 매처의 의미가 어떻게 변하는가?', 2, '상', '조건이 강제된다', '반대 조건을 테스트', '항상 true 반환', '비교를 생략', 28),
    (1369, 'Jasmine에서 두 값이 ''같거나 크다''를 검사하는 매처는?', 1, '상', 'toBeGreaterThanOrEqual()', 'toBeLessThan()', 'toBe()', 'toEqual()', 28),
    (1370, 'Jasmine 매처 중 배열의 길이를 검증하는 매처는?', 1, '상', 'toHaveLength()', 'toContainLength()', 'toMatchLength()', 'toEqualLength()', 28),
    (1371, 'Jasmine에서 비동기 테스트를 완료하기 위해 사용하는 인자는?', 2, '하', 'resolve', 'done', 'finish', 'end', 28),
    (1372, '비동기 테스트에서 done() 호출을 잊으면 테스트 결과는?', 2, '하', '성공', '실패', '무시', '강제 패스', 28),
    (1373, 'setTimeout을 사용하는 테스트에서 반드시 해야 하는 것은?', 3, '하', 'spy 생성', 'afterEach 호출', 'done() 호출', 'flush() 호출', 28),
    (1374, 'Jasmine의 비동기 테스트는 기본적으로 몇 초 후 타임아웃이 발생하는가?', 3, '중', '1초', '3초', '5초', '10초', 28),
    (1375, '비동기 작업 완료 후 done.fail()을 호출하면 테스트 결과는?', 2, '중', '성공', '실패', '경고', '건너뜀', 28),
    (1376, 'async/await를 사용할 때 Jasmine에서 done()을 사용해야 하는가?', 2, '중', '항상 필요', '필요 없다', '테스트마다 다름', 'await 내부만 필요', 28),
    (1377, 'fakeAsync() 함수의 주된 역할은?', 2, '상', '실제 비동기 호출', '비동기 코드 동기화', 'spy 생성', 'mock 데이터 제공', 28),
    (1378, 'tick() 함수는 어떤 상황에서 사용하는가?', 1, '상', '비동기 지연을 시뮬레이션', 'HTTP 요청 차단', '스파이 추적', '테스트 그룹 생성', 28),
    (1379, 'flush() 함수는 어떤 역할을 하는가?', 1, '상', '모든 pending 타이머 실행', '모든 spy 제거', '테스트 그룹 제거', '모든 에러 무시', 28),
    (1380, '비동기 테스트 중 특정 지연 시간을 시뮬레이션하려면 어떤 조합을 사용하는가?', 1, '상', 'fakeAsync() + tick()', 'async() + flush()', 'it() + spyOn()', 'beforeEach() + done()', 28),
    (1381, 'Jasmine에서 함수를 가로채고 감시하는 도구는?', 2, '하', 'Mock', 'Spy', 'Stub', 'Fake', 28),
    (1382, 'SpyOn 함수의 주요 기능은?', 2, '하', '테스트 실행', '함수 호출 감시', '컴포넌트 생성', '라우팅 추적', 28),
    (1383, 'Jasmine에서 ''and.returnValue()''를 사용하면?', 2, '하', '원래 함수를 호출한다', '지정된 값을 반환한다', '오류를 발생시킨다', '비동기 동작을 차단한다', 28),
    (1384, 'SpyOn을 사용할 때 필요한 첫 번째 인자는 무엇인가?', 2, '중', '테스트 케이스', '타겟 객체', '메서드 이름', '리턴 값', 28),
    (1385, 'SpyOn을 사용할 때 두 번째 인자는 무엇인가?', 3, '중', '리턴 값', '타겟 객체', '메서드 이름', '테스트 설명', 28),
    (1386, 'spy.calls.any()는 무엇을 확인하는가?', 3, '중', '호출 횟수', '최초 호출 여부', '한 번이라도 호출되었는지 여부', '모든 호출 데이터', 28),
    (1387, '스파이가 호출된 횟수를 확인하는 방법은?', 2, '상', 'spy.callCount()', 'spy.calls.count()', 'spy.getCall()', 'spy.count()', 28),
    (1388, '스파이가 호출된 인자를 확인하려면?', 1, '상', 'spy.calls.argsFor()', 'spy.args()', 'spy.calls.getArguments()', 'spy.arguments()', 28),
    (1389, 'SpyOnProperty()는 무엇을 스파이하는가?', 2, '상', '객체 메서드', '객체 프로퍼티', '라우트 파라미터', 'DOM 이벤트', 28),
    (1390, 'Jasmine에서 스파이를 리셋하려면 사용하는 함수는?', 3, '상', 'reset()', 'spy.resetCalls()', 'spy.calls.reset()', 'spy.clear()', 28),
    (1391, 'Angular에서 컴포넌트 테스트를 준비할 때 사용하는 함수는?', 1, '하', 'configureTestingModule()', 'setupTesting()', 'initTesting()', 'initializeTest()', 28),
    (1392, 'TestBed는 무엇을 위한 Angular 유틸리티인가?', 2, '하', '라우팅 제어', '컴포넌트 테스트 환경 구성', 'HTTP 요청 처리', '서버 사이드 렌더링', 28),
    (1393, 'TestBed.configureTestingModule()에서 등록하는 것이 아닌 것은?', 4, '하', 'declarations', 'imports', 'providers', 'controllers', 28),
    (1394, 'Angular 테스트에서 컴포넌트 인스턴스를 얻기 위해 사용하는 객체는?', 1, '중', 'ComponentFixture', 'TestRunner', 'TestComponent', 'TestingModule', 28),
    (1395, 'fixture.detectChanges()의 역할은?', 2, '중', '라우터 초기화', '컴포넌트 변경 사항 반영', '테스트 종료', '서버 통신 시작', 28),
    (1396, 'TestBed.createComponent()가 반환하는 것은?', 1, '중', '컴포넌트 인스턴스', '서비스 인스턴스', 'HTTP 요청 객체', 'Router 객체', 28),
    (1397, 'Angular에서 서비스 테스트를 위해 사용되는 함수는?', 2, '상', 'TestService()', 'inject()', 'getService()', 'setupService()', 28),
    (1398, 'TestBed.inject()로 얻은 인스턴스는 어디에서 사용 가능한가?', 2, '상', '모든 테스트 케이스', '해당 스펙 내에서만', '어플리케이션 전체', '루트 모듈', 28),
    (1399, 'Angular 테스트에서 async() 함수의 주요 역할은?', 2, '상', '동기화 보장', '비동기 작업 대기', '라우터 초기화', '모듈 등록', 28),
    (1400, 'Angular 테스트 환경을 재설정하려면 호출해야 하는 함수는?', 2, '상', 'TestBed.clearTestingModule()', 'TestBed.resetTestingModule()', 'TestBed.rebuild()', 'TestBed.cleanup()', 28),
    (1401, '클라이언트 잘못된 요청(예: JSON 스키마 위반)에 대한 권장 HTTP 상태 코드는?', 1, '하', '400 Bad Request', '401 Unauthorized', '500 Internal Server Error', '409 Conflict', 29),
    (1402, '인증 헤더가 누락된 요청에 서버가 반환해야 할 표준 상태 코드는?', 1, '하', '401 Unauthorized', '403 Forbidden', '412 Precondition Failed', '502 Bad Gateway', 29),
    (1403, 'REST API에서 존재하지 않는 리소스에 대한 GET 요청 시 적절한 응답 코드는?', 1, '하', '404 Not Found', '410 Gone', '204 No Content', '422 Unprocessable Entity', 29),
    (1404, 'RFC 7807 ‘Problem Details for HTTP APIs’가 권장하는 기본 Content-Type은?', 1, '중', 'application/problem+json', 'application/json; problem', 'text/problem', 'application/vnd.error+json', 29),
    (1405, 'RFC 7807 JSON 응답 예시에서 반드시 포함해야 하는 필드는?', 1, '중', 'title', 'instance', 'detail', 'errors', 29),
    (1406, '다음 중 4xx와 5xx 상태 코드 차이에 대한 설명으로 옳지 않은 것은?', 4, '중', '4xx는 클라이언트 오류, 5xx는 서버 오류를 나타낸다', '5xx는 재시도 가능성이 4xx보다 높다', '4xx 오류라도 Problem Details 바디를 포함할 수 있다', '4xx는 절대 재시도해서는 안 된다', 29),
    (1407, '동일 자원 중복 생성 시 서버가 반환해도 멱등성 규칙을 깨지지 않는 상태 코드는?', 1, '상', '409 Conflict', '201 Created', '202 Accepted', '302 Found', 29),
    (1408, 'Problem Details 바디에 커스텀 ‘code’ 정수 필드를 두는 주된 이점은?', 1, '상', '클라이언트가 로컬라이징 메시지를 매핑하기 쉽다', 'HTTP 상태 코드 전송을 생략할 수 있다', 'JSON 패싱을 건너뛸 수 있다', 'CORS 프리플라이트를 우회한다', 29),
    (1409, '다음 중 idempotent 메서드가 아닌 것은?', 1, '상', 'POST', 'PUT', 'DELETE', 'HEAD', 29),
    (1410, '클라이언트가 429 Too Many Requests 응답을 받을 때 재시도 시점을 알기 위해 확인해야 하는 헤더는?', 1, '상', 'Retry-After', 'Warning', 'WWW-Authenticate', 'Content-Encoding', 29),
    (1411, '브라우저 네트워크 오류 vs HTTP 오류 구분 방법은?', 1, '하', '응답 없음 & error.request 존재 → 네트워크 오류', 'status 0이면 HTTP 오류', 'message에 Network Error 포함 시 HTTP 오류', 'https로 시작시 네트워크 오류 없음', 29),
    (1412, '422 오류 UX 비추천 패턴은?', 1, '하', '모달 전체 가리고 중앙만 오류', '필드 인라인 표시', '폼 상단 요약', '스낵바 알림', 29),
    (1413, '전역 오류 핸들러 역할은?', 1, '하', '로그인 만료 등 공통 처리', '레이아웃 교체', 'CSS 초기화', 'History 재설정', 29),
    (1414, '오프라인 GET 요청 전략은?', 1, '중', '대기열 저장 후 복구 시 재시도', '캐시 비우고 에러', '503 구성', '무한 로딩', 29),
    (1415, 'Error Boundary 해결 문제는?', 1, '중', '렌더 예외로 인한 흰 화면', 'API 500 재시도', 'CORS 차단', 'WebSocket', 29),
    (1416, '중복 POST 방지 클라이언트 조치?', 1, '중', '이전 요청 취소 AbortController', 'Cache-Control no-store', 'POST→GET', '로그 제거', 29),
    (1417, 'axios 취소 vs 네트워크 오류 구분 프로퍼티?', 1, '상', 'error.code === ''ERR_CANCELED''', 'message 포함 Network', 'status -1', 'timeout 0', 29),
    (1418, '국제화 오류 메시지 비추천 방법은?', 1, '상', '서버가 완제품 문구 제공', '클라이언트 코드 매핑', 'title/detail 키 사용', '템플릿 변수 치환', 29),
    (1419, '모바일 에러/재요청 데이터 최소화 우선 고려는?', 1, '상', '오프라인 감지 후 백오프', '해상도 다운', '캐시 삭제', 'UDP 강제', 29),
    (1420, '사용자 메시지+디버그 정보 구조 권장?', 1, '상', 'UI 요약 & 콘솔 raw trace', 'alert 모두', '서버 HTML 오류 페이지', '쿠키 저장', 29),
    (1421, '멱등 메서드는?', 1, '하', 'PUT', 'POST', 'PATCH', 'CONNECT', 29),
    (1422, '고정 3초 4번 총 지연?', 1, '하', '12초', '9초', '6초', '3초', 29),
    (1423, '지수 1s 배수2 3회 누적?', 1, '중', '7 s', '6 s', '5 s', '4 s', 29),
    (1424, 'Retry-After 120 권장 재시도?', 1, '중', '120초 이상 후', '60초', '즉시', '무시', 29),
    (1425, 'POST 안전 재시도 보완책?', 1, '중', 'Idempotency-Key 헤더', 'HTTP/2 업그레이드', '빈 바디', 'PUT 사용', 29),
    (1426, '재시도 고려 가능한 408/409?', 1, '중', '408 Request Timeout', '409 Conflict', '400', '401', 29),
    (1427, 'Full Jitter 목적은?', 1, '상', '서버 폭주 완화', '총 지연 줄임', 'TCP 우회', 'TLS 감소', 29),
    (1428, '재시도 불가 오류 유형?', 1, '상', '400 필드 검증', '502', '408', '429', 29),
    (1429, '조건부 PUT 재시도 안전 이유?', 1, '상', 'ETag 버전 동일 시만 수행', 'PUT 캐싱', 'HTTP/3 전용', '브라우저 보장', 29),
    (1430, '모바일 TCP 끊김 POST 문제 감소?', 1, '상', '짧은 타임아웃 + 멱등 키', 'HTTP 1.0', '재시도 끔', '인증 제거', 29),
    (1431, 'Circuit Closed→Open 조건?', 1, '하', '연속 실패 임계', '성공 200', '301', '쿠키 만료', 29),
    (1432, 'Half-Open 성공 전이?', 1, '하', 'Closed', 'Open', 'Forced-Open', 'Isolated', 29),
    (1433, 'Open 상태 바로 실패 목적?', 1, '하', '백엔드 부하 차단', '캐시 무효', 'TLS 시간 줄임', 'DNS 재해석', 29),
    (1434, '재시도+CB 충돌 위험?', 1, '중', '과도 재시도→즉시 Open', 'Jitter 제거', 'Retry-After 무시', 'HTTP/2 끊김', 29),
    (1435, 'Coalescing 효과 시나리오?', 1, '중', '같은 리소스 다수 GET', '다른 POST', 'WebSocket', 'SSE', 29),
    (1436, 'Equal Jitter 이점 아닌 것?', 2, '중', '스파이크 완화', '최대/최소 지연 예측', 'Full Jitter보다 대기 줄임', '서버 완화', 29),
    (1437, 'Fallback 전략 사례?', 1, '상', '캐시된 데이터로 표시', '재시도 0', 'CB 강제 Close', 'Retry-After 무시', 29),
    (1438, 'Hedged Request 주의점?', 1, '상', '멱등 보장 필요', 'DNS TTL 0', 'KEEP-ALIVE 끊기', 'TLS 1.3', 29),
    (1439, 'Max-Retry-TTL 목적?', 1, '상', '무제한 지연 방지', 'TCP FIN 감소', '브라우저 버그 회피', 'Keep-Alive 증가', 29),
    (1440, 'CB 실시간 튜닝 기법?', 1, '상', 'Feature Flag 기반 임계 조정', '콘솔 변수', '헤더 하드코드', '빌드 상수', 29),
    (1441, '자주 쓰는 SLO 쌍은?', 1, '하', '가용성·오류율', 'CPU·메모리', '빌드시간·커버리지', 'PR 리뷰', 29),
    (1442, 'P99 증가 의심 원인?', 1, '하', '소수 요청 재시도 지연', '평균 느려짐', '404 급증', '로깅 오류', 29),
    (1443, '분산 추적 유용 이유?', 1, '중', 'Trace로 재시도 체인 시각화', '헤더 암호화', '로그 제거', '패킷 캡처', 29),
    (1444, 'Chaos 테스트 간단 도구?', 1, '중', 'MSW random error', 'CSS Lint', 'Bundle Analyzer', 'Lighthouse', 29),
    (1445, '포스트모템 포함 아님?', 1, '중', '담당자 인적 정보', '타임라인', 'RCA', '재발 방지', 29),
    (1446, '알림 임계 낮음 문제?', 1, '상', 'Alert Fatigue', 'MTTR 증가', 'Slack→Email', 'Grafana 꺼짐', 29),
    (1447, '롤아웃 안전 배포 전략?', 1, '상', 'Feature Flag Gradual', 'Big-bang', 'Force-push', 'CI 캐시 무효', 29),
    (1448, '로그 레벨 매핑?', 1, '상', '시작 debug, 재시도 info, 실패 error', '모두 warn', '재시도 fatal', '성공 error', 29),
    (1449, '슬라이딩 윈도우 오류율 이유?', 1, '상', '즉시값 대신 경향 파악', '메트릭 안 삭제', '테스트 속도', '다크 테마', 29),
    (1450, '오류율 상승 자동 롤백 기능은?', 1, '상', 'Canary 분석 → rollback', 'Merge Queue', 'multi-stage build', 'npm postinstall', 29),
    (1451, '클라이언트 잘못된 요청(예: JSON 스키마 위반)에 대한 권장 HTTP 상태 코드는?', 1, '하', '400 Bad Request', '401 Unauthorized', '500 Internal Server Error', '409 Conflict', 30),
    (1452, '인증 헤더가 누락된 요청에 서버가 반환해야 할 표준 상태 코드는?', 1, '하', '401 Unauthorized', '403 Forbidden', '412 Precondition Failed', '502 Bad Gateway', 30),
    (1453, 'REST API에서 존재하지 않는 리소스에 대한 GET 요청 시 적절한 응답 코드는?', 1, '하', '404 Not Found', '410 Gone', '204 No Content', '422 Unprocessable Entity', 30),
    (1454, 'RFC 7807 ‘Problem Details for HTTP APIs’가 권장하는 기본 Content-Type은?', 1, '중', 'application/problem+json', 'application/json; problem', 'text/problem', 'application/vnd.error+json', 30),
    (1455, 'RFC 7807 JSON 응답 예시에서 반드시 포함해야 하는 필드는?', 1, '중', 'title', 'instance', 'detail', 'errors', 30),
    (1456, '다음 중 4xx와 5xx 상태 코드 차이에 대한 설명으로 옳지 않은 것은?', 4, '중', '4xx는 클라이언트 오류, 5xx는 서버 오류를 나타낸다', '5xx는 재시도 가능성이 4xx보다 높다', '4xx 오류라도 Problem Details 바디를 포함할 수 있다', '4xx는 절대 재시도해서는 안 된다', 30),
    (1457, '동일 자원 중복 생성 시 서버가 반환해도 멱등성 규칙을 깨지지 않는 상태 코드는?', 1, '상', '409 Conflict', '201 Created', '202 Accepted', '302 Found', 30),
    (1458, 'Problem Details 바디에 커스텀 ‘code’ 정수 필드를 두는 주된 이점은?', 1, '상', '클라이언트가 로컬라이징 메시지를 매핑하기 쉽다', 'HTTP 상태 코드 전송을 생략할 수 있다', 'JSON 패싱을 건너뛸 수 있다', 'CORS 프리플라이트를 우회한다', 30),
    (1459, '다음 중 idempotent 메서드가 아닌 것은?', 1, '상', 'POST', 'PUT', 'DELETE', 'HEAD', 30),
    (1460, '클라이언트가 429 Too Many Requests 응답을 받을 때 재시도 시점을 알기 위해 확인해야 하는 헤더는?', 1, '상', 'Retry-After', 'Warning', 'WWW-Authenticate', 'Content-Encoding', 30),
    (1461, '브라우저 네트워크 오류 vs HTTP 오류 구분 방법은?', 1, '하', '응답 없음 & error.request 존재 → 네트워크 오류', 'status 0이면 HTTP 오류', 'message에 Network Error 포함 시 HTTP 오류', 'https로 시작시 네트워크 오류 없음', 30),
    (1462, '422 오류 UX 비추천 패턴은?', 1, '하', '모달 전체 가리고 중앙만 오류', '필드 인라인 표시', '폼 상단 요약', '스낵바 알림', 30),
    (1463, '전역 오류 핸들러 역할은?', 1, '하', '로그인 만료 등 공통 처리', '레이아웃 교체', 'CSS 초기화', 'History 재설정', 30),
    (1464, '오프라인 GET 요청 전략은?', 1, '중', '대기열 저장 후 복구 시 재시도', '캐시 비우고 에러', '503 구성', '무한 로딩', 30),
    (1465, 'Error Boundary 해결 문제는?', 1, '중', '렌더 예외로 인한 흰 화면', 'API 500 재시도', 'CORS 차단', 'WebSocket', 30),
    (1466, '중복 POST 방지 클라이언트 조치?', 1, '중', '이전 요청 취소 AbortController', 'Cache-Control no-store', 'POST→GET', '로그 제거', 30),
    (1467, 'axios 취소 vs 네트워크 오류 구분 프로퍼티?', 1, '상', 'error.code === ''ERR_CANCELED''', 'message 포함 Network', 'status -1', 'timeout 0', 30),
    (1468, '국제화 오류 메시지 비추천 방법은?', 1, '상', '서버가 완제품 문구 제공', '클라이언트 코드 매핑', 'title/detail 키 사용', '템플릿 변수 치환', 30),
    (1469, '모바일 에러/재요청 데이터 최소화 우선 고려는?', 1, '상', '오프라인 감지 후 백오프', '해상도 다운', '캐시 삭제', 'UDP 강제', 30),
    (1470, '사용자 메시지+디버그 정보 구조 권장?', 1, '상', 'UI 요약 & 콘솔 raw trace', 'alert 모두', '서버 HTML 오류 페이지', '쿠키 저장', 30),
    (1471, '멱등 메서드는?', 1, '하', 'PUT', 'POST', 'PATCH', 'CONNECT', 30),
    (1472, '고정 3초 4번 총 지연?', 1, '하', '12초', '9초', '6초', '3초', 30),
    (1473, '지수 1s 배수2 3회 누적?', 1, '중', '7 s', '6 s', '5 s', '4 s', 30),
    (1474, 'Retry-After 120 권장 재시도?', 1, '중', '120초 이상 후', '60초', '즉시', '무시', 30),
    (1475, 'POST 안전 재시도 보완책?', 1, '중', 'Idempotency-Key 헤더', 'HTTP/2 업그레이드', '빈 바디', 'PUT 사용', 30),
    (1476, '재시도 고려 가능한 408/409?', 1, '중', '408 Request Timeout', '409 Conflict', '400', '401', 30),
    (1477, 'Full Jitter 목적은?', 1, '상', '서버 폭주 완화', '총 지연 줄임', 'TCP 우회', 'TLS 감소', 30),
    (1478, '재시도 불가 오류 유형?', 1, '상', '400 필드 검증', '502', '408', '429', 30),
    (1479, '조건부 PUT 재시도 안전 이유?', 1, '상', 'ETag 버전 동일 시만 수행', 'PUT 캐싱', 'HTTP/3 전용', '브라우저 보장', 30),
    (1480, '모바일 TCP 끊김 POST 문제 감소?', 1, '상', '짧은 타임아웃 + 멱등 키', 'HTTP 1.0', '재시도 끔', '인증 제거', 30),
    (1481, 'Circuit Closed→Open 조건?', 1, '하', '연속 실패 임계', '성공 200', '301', '쿠키 만료', 30),
    (1482, 'Half-Open 성공 전이?', 1, '하', 'Closed', 'Open', 'Forced-Open', 'Isolated', 30),
    (1483, 'Open 상태 바로 실패 목적?', 1, '하', '백엔드 부하 차단', '캐시 무효', 'TLS 시간 줄임', 'DNS 재해석', 30),
    (1484, '재시도+CB 충돌 위험?', 1, '중', '과도 재시도→즉시 Open', 'Jitter 제거', 'Retry-After 무시', 'HTTP/2 끊김', 30),
    (1485, 'Coalescing 효과 시나리오?', 1, '중', '같은 리소스 다수 GET', '다른 POST', 'WebSocket', 'SSE', 30),
    (1486, 'Equal Jitter 이점 아닌 것?', 2, '중', '스파이크 완화', '최대/최소 지연 예측', 'Full Jitter보다 대기 줄임', '서버 완화', 30),
    (1487, 'Fallback 전략 사례?', 1, '상', '캐시된 데이터로 표시', '재시도 0', 'CB 강제 Close', 'Retry-After 무시', 30),
    (1488, 'Hedged Request 주의점?', 1, '상', '멱등 보장 필요', 'DNS TTL 0', 'KEEP-ALIVE 끊기', 'TLS 1.3', 30),
    (1489, 'Max-Retry-TTL 목적?', 1, '상', '무제한 지연 방지', 'TCP FIN 감소', '브라우저 버그 회피', 'Keep-Alive 증가', 30),
    (1490, 'CB 실시간 튜닝 기법?', 1, '상', 'Feature Flag 기반 임계 조정', '콘솔 변수', '헤더 하드코드', '빌드 상수', 30),
    (1491, '자주 쓰는 SLO 쌍은?', 1, '하', '가용성·오류율', 'CPU·메모리', '빌드시간·커버리지', 'PR 리뷰', 30),
    (1492, 'P99 증가 의심 원인?', 1, '하', '소수 요청 재시도 지연', '평균 느려짐', '404 급증', '로깅 오류', 30),
    (1493, '분산 추적 유용 이유?', 1, '중', 'Trace로 재시도 체인 시각화', '헤더 암호화', '로그 제거', '패킷 캡처', 30),
    (1494, 'Chaos 테스트 간단 도구?', 1, '중', 'MSW random error', 'CSS Lint', 'Bundle Analyzer', 'Lighthouse', 30),
    (1495, '포스트모템 포함 아님?', 1, '중', '담당자 인적 정보', '타임라인', 'RCA', '재발 방지', 30),
    (1496, '알림 임계 낮음 문제?', 1, '상', 'Alert Fatigue', 'MTTR 증가', 'Slack→Email', 'Grafana 꺼짐', 30),
    (1497, '롤아웃 안전 배포 전략?', 1, '상', 'Feature Flag Gradual', 'Big-bang', 'Force-push', 'CI 캐시 무효', 30),
    (1498, '로그 레벨 매핑?', 1, '상', '시작 debug, 재시도 info, 실패 error', '모두 warn', '재시도 fatal', '성공 error', 30),
    (1499, '슬라이딩 윈도우 오류율 이유?', 1, '상', '즉시값 대신 경향 파악', '메트릭 안 삭제', '테스트 속도', '다크 테마', 30),
    (1500, '오류율 상승 자동 롤백 기능은?', 1, '상', 'Canary 분석 → rollback', 'Merge Queue', 'multi-stage build', 'npm postinstall', 30),
    (1501, '클라이언트 잘못된 요청(예: JSON 스키마 위반)에 대한 권장 HTTP 상태 코드는?', 1, '하', '400 Bad Request', '401 Unauthorized', '500 Internal Server Error', '409 Conflict', 31),
    (1502, '인증 헤더가 누락된 요청에 서버가 반환해야 할 표준 상태 코드는?', 1, '하', '401 Unauthorized', '403 Forbidden', '412 Precondition Failed', '502 Bad Gateway', 31),
    (1503, 'REST API에서 존재하지 않는 리소스에 대한 GET 요청 시 적절한 응답 코드는?', 1, '하', '404 Not Found', '410 Gone', '204 No Content', '422 Unprocessable Entity', 31),
    (1504, 'RFC 7807 ‘Problem Details for HTTP APIs’가 권장하는 기본 Content-Type은?', 1, '중', 'application/problem+json', 'application/json; problem', 'text/problem', 'application/vnd.error+json', 31),
    (1505, 'RFC 7807 JSON 응답 예시에서 반드시 포함해야 하는 필드는?', 1, '중', 'title', 'instance', 'detail', 'errors', 31),
    (1506, '다음 중 4xx와 5xx 상태 코드 차이에 대한 설명으로 옳지 않은 것은?', 4, '중', '4xx는 클라이언트 오류, 5xx는 서버 오류를 나타낸다', '5xx는 재시도 가능성이 4xx보다 높다', '4xx 오류라도 Problem Details 바디를 포함할 수 있다', '4xx는 절대 재시도해서는 안 된다', 31),
    (1507, '동일 자원 중복 생성 시 서버가 반환해도 멱등성 규칙을 깨지지 않는 상태 코드는?', 1, '상', '409 Conflict', '201 Created', '202 Accepted', '302 Found', 31),
    (1508, 'Problem Details 바디에 커스텀 ‘code’ 정수 필드를 두는 주된 이점은?', 1, '상', '클라이언트가 로컬라이징 메시지를 매핑하기 쉽다', 'HTTP 상태 코드 전송을 생략할 수 있다', 'JSON 패싱을 건너뛸 수 있다', 'CORS 프리플라이트를 우회한다', 31),
    (1509, '다음 중 idempotent 메서드가 아닌 것은?', 1, '상', 'POST', 'PUT', 'DELETE', 'HEAD', 31),
    (1510, '클라이언트가 429 Too Many Requests 응답을 받을 때 재시도 시점을 알기 위해 확인해야 하는 헤더는?', 1, '상', 'Retry-After', 'Warning', 'WWW-Authenticate', 'Content-Encoding', 31),
    (1511, '브라우저 네트워크 오류 vs HTTP 오류 구분 방법은?', 1, '하', '응답 없음 & error.request 존재 → 네트워크 오류', 'status 0이면 HTTP 오류', 'message에 Network Error 포함 시 HTTP 오류', 'https로 시작시 네트워크 오류 없음', 31),
    (1512, '422 오류 UX 비추천 패턴은?', 1, '하', '모달 전체 가리고 중앙만 오류', '필드 인라인 표시', '폼 상단 요약', '스낵바 알림', 31),
    (1513, '전역 오류 핸들러 역할은?', 1, '하', '로그인 만료 등 공통 처리', '레이아웃 교체', 'CSS 초기화', 'History 재설정', 31),
    (1514, '오프라인 GET 요청 전략은?', 1, '중', '대기열 저장 후 복구 시 재시도', '캐시 비우고 에러', '503 구성', '무한 로딩', 31),
    (1515, 'Error Boundary 해결 문제는?', 1, '중', '렌더 예외로 인한 흰 화면', 'API 500 재시도', 'CORS 차단', 'WebSocket', 31),
    (1516, '중복 POST 방지 클라이언트 조치?', 1, '중', '이전 요청 취소 AbortController', 'Cache-Control no-store', 'POST→GET', '로그 제거', 31),
    (1517, 'axios 취소 vs 네트워크 오류 구분 프로퍼티?', 1, '상', 'error.code === ''ERR_CANCELED''', 'message 포함 Network', 'status -1', 'timeout 0', 31),
    (1518, '국제화 오류 메시지 비추천 방법은?', 1, '상', '서버가 완제품 문구 제공', '클라이언트 코드 매핑', 'title/detail 키 사용', '템플릿 변수 치환', 31),
    (1519, '모바일 에러/재요청 데이터 최소화 우선 고려는?', 1, '상', '오프라인 감지 후 백오프', '해상도 다운', '캐시 삭제', 'UDP 강제', 31),
    (1520, '사용자 메시지+디버그 정보 구조 권장?', 1, '상', 'UI 요약 & 콘솔 raw trace', 'alert 모두', '서버 HTML 오류 페이지', '쿠키 저장', 31),
    (1521, '멱등 메서드는?', 1, '하', 'PUT', 'POST', 'PATCH', 'CONNECT', 31),
    (1522, '고정 3초 4번 총 지연?', 1, '하', '12초', '9초', '6초', '3초', 31),
    (1523, '지수 1s 배수2 3회 누적?', 1, '중', '7 s', '6 s', '5 s', '4 s', 31),
    (1524, 'Retry-After 120 권장 재시도?', 1, '중', '120초 이상 후', '60초', '즉시', '무시', 31),
    (1525, 'POST 안전 재시도 보완책?', 1, '중', 'Idempotency-Key 헤더', 'HTTP/2 업그레이드', '빈 바디', 'PUT 사용', 31),
    (1526, '재시도 고려 가능한 408/409?', 1, '중', '408 Request Timeout', '409 Conflict', '400', '401', 31),
    (1527, 'Full Jitter 목적은?', 1, '상', '서버 폭주 완화', '총 지연 줄임', 'TCP 우회', 'TLS 감소', 31),
    (1528, '재시도 불가 오류 유형?', 1, '상', '400 필드 검증', '502', '408', '429', 31),
    (1529, '조건부 PUT 재시도 안전 이유?', 1, '상', 'ETag 버전 동일 시만 수행', 'PUT 캐싱', 'HTTP/3 전용', '브라우저 보장', 31),
    (1530, '모바일 TCP 끊김 POST 문제 감소?', 1, '상', '짧은 타임아웃 + 멱등 키', 'HTTP 1.0', '재시도 끔', '인증 제거', 31),
    (1531, 'Circuit Closed→Open 조건?', 1, '하', '연속 실패 임계', '성공 200', '301', '쿠키 만료', 31),
    (1532, 'Half-Open 성공 전이?', 1, '하', 'Closed', 'Open', 'Forced-Open', 'Isolated', 31),
    (1533, 'Open 상태 바로 실패 목적?', 1, '하', '백엔드 부하 차단', '캐시 무효', 'TLS 시간 줄임', 'DNS 재해석', 31),
    (1534, '재시도+CB 충돌 위험?', 1, '중', '과도 재시도→즉시 Open', 'Jitter 제거', 'Retry-After 무시', 'HTTP/2 끊김', 31),
    (1535, 'Coalescing 효과 시나리오?', 1, '중', '같은 리소스 다수 GET', '다른 POST', 'WebSocket', 'SSE', 31),
    (1536, 'Equal Jitter 이점 아닌 것?', 2, '중', '스파이크 완화', '최대/최소 지연 예측', 'Full Jitter보다 대기 줄임', '서버 완화', 31),
    (1537, 'Fallback 전략 사례?', 1, '상', '캐시된 데이터로 표시', '재시도 0', 'CB 강제 Close', 'Retry-After 무시', 31),
    (1538, 'Hedged Request 주의점?', 1, '상', '멱등 보장 필요', 'DNS TTL 0', 'KEEP-ALIVE 끊기', 'TLS 1.3', 31),
    (1539, 'Max-Retry-TTL 목적?', 1, '상', '무제한 지연 방지', 'TCP FIN 감소', '브라우저 버그 회피', 'Keep-Alive 증가', 31),
    (1540, 'CB 실시간 튜닝 기법?', 1, '상', 'Feature Flag 기반 임계 조정', '콘솔 변수', '헤더 하드코드', '빌드 상수', 31),
    (1541, '자주 쓰는 SLO 쌍은?', 1, '하', '가용성·오류율', 'CPU·메모리', '빌드시간·커버리지', 'PR 리뷰', 31),
    (1542, 'P99 증가 의심 원인?', 1, '하', '소수 요청 재시도 지연', '평균 느려짐', '404 급증', '로깅 오류', 31),
    (1543, '분산 추적 유용 이유?', 1, '중', 'Trace로 재시도 체인 시각화', '헤더 암호화', '로그 제거', '패킷 캡처', 31),
    (1544, 'Chaos 테스트 간단 도구?', 1, '중', 'MSW random error', 'CSS Lint', 'Bundle Analyzer', 'Lighthouse', 31),
    (1545, '포스트모템 포함 아님?', 1, '중', '담당자 인적 정보', '타임라인', 'RCA', '재발 방지', 31),
    (1546, '알림 임계 낮음 문제?', 1, '상', 'Alert Fatigue', 'MTTR 증가', 'Slack→Email', 'Grafana 꺼짐', 31),
    (1547, '롤아웃 안전 배포 전략?', 1, '상', 'Feature Flag Gradual', 'Big-bang', 'Force-push', 'CI 캐시 무효', 31),
    (1548, '로그 레벨 매핑?', 1, '상', '시작 debug, 재시도 info, 실패 error', '모두 warn', '재시도 fatal', '성공 error', 31),
    (1549, '슬라이딩 윈도우 오류율 이유?', 1, '상', '즉시값 대신 경향 파악', '메트릭 안 삭제', '테스트 속도', '다크 테마', 31),
    (1550, '오류율 상승 자동 롤백 기능은?', 1, '상', 'Canary 분석 → rollback', 'Merge Queue', 'multi-stage build', 'npm postinstall', 31),
    (1551, '클라이언트 잘못된 요청(예: JSON 스키마 위반)에 대한 권장 HTTP 상태 코드는?', 1, '하', '400 Bad Request', '401 Unauthorized', '500 Internal Server Error', '409 Conflict', 32),
    (1552, '인증 헤더가 누락된 요청에 서버가 반환해야 할 표준 상태 코드는?', 1, '하', '401 Unauthorized', '403 Forbidden', '412 Precondition Failed', '502 Bad Gateway', 32),
    (1553, 'REST API에서 존재하지 않는 리소스에 대한 GET 요청 시 적절한 응답 코드는?', 1, '하', '404 Not Found', '410 Gone', '204 No Content', '422 Unprocessable Entity', 32),
    (1554, 'RFC 7807 ‘Problem Details for HTTP APIs’가 권장하는 기본 Content-Type은?', 1, '중', 'application/problem+json', 'application/json; problem', 'text/problem', 'application/vnd.error+json', 32),
    (1555, 'RFC 7807 JSON 응답 예시에서 반드시 포함해야 하는 필드는?', 1, '중', 'title', 'instance', 'detail', 'errors', 32),
    (1556, '다음 중 4xx와 5xx 상태 코드 차이에 대한 설명으로 옳지 않은 것은?', 4, '중', '4xx는 클라이언트 오류, 5xx는 서버 오류를 나타낸다', '5xx는 재시도 가능성이 4xx보다 높다', '4xx 오류라도 Problem Details 바디를 포함할 수 있다', '4xx는 절대 재시도해서는 안 된다', 32),
    (1557, '동일 자원 중복 생성 시 서버가 반환해도 멱등성 규칙을 깨지지 않는 상태 코드는?', 1, '상', '409 Conflict', '201 Created', '202 Accepted', '302 Found', 32),
    (1558, 'Problem Details 바디에 커스텀 ‘code’ 정수 필드를 두는 주된 이점은?', 1, '상', '클라이언트가 로컬라이징 메시지를 매핑하기 쉽다', 'HTTP 상태 코드 전송을 생략할 수 있다', 'JSON 패싱을 건너뛸 수 있다', 'CORS 프리플라이트를 우회한다', 32),
    (1559, '다음 중 idempotent 메서드가 아닌 것은?', 1, '상', 'POST', 'PUT', 'DELETE', 'HEAD', 32),
    (1560, '클라이언트가 429 Too Many Requests 응답을 받을 때 재시도 시점을 알기 위해 확인해야 하는 헤더는?', 1, '상', 'Retry-After', 'Warning', 'WWW-Authenticate', 'Content-Encoding', 32),
    (1561, '브라우저 네트워크 오류 vs HTTP 오류 구분 방법은?', 1, '하', '응답 없음 & error.request 존재 → 네트워크 오류', 'status 0이면 HTTP 오류', 'message에 Network Error 포함 시 HTTP 오류', 'https로 시작시 네트워크 오류 없음', 32),
    (1562, '422 오류 UX 비추천 패턴은?', 1, '하', '모달 전체 가리고 중앙만 오류', '필드 인라인 표시', '폼 상단 요약', '스낵바 알림', 32),
    (1563, '전역 오류 핸들러 역할은?', 1, '하', '로그인 만료 등 공통 처리', '레이아웃 교체', 'CSS 초기화', 'History 재설정', 32),
    (1564, '오프라인 GET 요청 전략은?', 1, '중', '대기열 저장 후 복구 시 재시도', '캐시 비우고 에러', '503 구성', '무한 로딩', 32),
    (1565, 'Error Boundary 해결 문제는?', 1, '중', '렌더 예외로 인한 흰 화면', 'API 500 재시도', 'CORS 차단', 'WebSocket', 32),
    (1566, '중복 POST 방지 클라이언트 조치?', 1, '중', '이전 요청 취소 AbortController', 'Cache-Control no-store', 'POST→GET', '로그 제거', 32),
    (1567, 'axios 취소 vs 네트워크 오류 구분 프로퍼티?', 1, '상', 'error.code === ''ERR_CANCELED''', 'message 포함 Network', 'status -1', 'timeout 0', 32),
    (1568, '국제화 오류 메시지 비추천 방법은?', 1, '상', '서버가 완제품 문구 제공', '클라이언트 코드 매핑', 'title/detail 키 사용', '템플릿 변수 치환', 32),
    (1569, '모바일 에러/재요청 데이터 최소화 우선 고려는?', 1, '상', '오프라인 감지 후 백오프', '해상도 다운', '캐시 삭제', 'UDP 강제', 32),
    (1570, '사용자 메시지+디버그 정보 구조 권장?', 1, '상', 'UI 요약 & 콘솔 raw trace', 'alert 모두', '서버 HTML 오류 페이지', '쿠키 저장', 32),
    (1571, '멱등 메서드는?', 1, '하', 'PUT', 'POST', 'PATCH', 'CONNECT', 32),
    (1572, '고정 3초 4번 총 지연?', 1, '하', '12초', '9초', '6초', '3초', 32),
    (1573, '지수 1s 배수2 3회 누적?', 1, '중', '7 s', '6 s', '5 s', '4 s', 32),
    (1574, 'Retry-After 120 권장 재시도?', 1, '중', '120초 이상 후', '60초', '즉시', '무시', 32),
    (1575, 'POST 안전 재시도 보완책?', 1, '중', 'Idempotency-Key 헤더', 'HTTP/2 업그레이드', '빈 바디', 'PUT 사용', 32),
    (1576, '재시도 고려 가능한 408/409?', 1, '중', '408 Request Timeout', '409 Conflict', '400', '401', 32),
    (1577, 'Full Jitter 목적은?', 1, '상', '서버 폭주 완화', '총 지연 줄임', 'TCP 우회', 'TLS 감소', 32),
    (1578, '재시도 불가 오류 유형?', 1, '상', '400 필드 검증', '502', '408', '429', 32),
    (1579, '조건부 PUT 재시도 안전 이유?', 1, '상', 'ETag 버전 동일 시만 수행', 'PUT 캐싱', 'HTTP/3 전용', '브라우저 보장', 32),
    (1580, '모바일 TCP 끊김 POST 문제 감소?', 1, '상', '짧은 타임아웃 + 멱등 키', 'HTTP 1.0', '재시도 끔', '인증 제거', 32),
    (1581, 'Circuit Closed→Open 조건?', 1, '하', '연속 실패 임계', '성공 200', '301', '쿠키 만료', 32),
    (1582, 'Half-Open 성공 전이?', 1, '하', 'Closed', 'Open', 'Forced-Open', 'Isolated', 32),
    (1583, 'Open 상태 바로 실패 목적?', 1, '하', '백엔드 부하 차단', '캐시 무효', 'TLS 시간 줄임', 'DNS 재해석', 32),
    (1584, '재시도+CB 충돌 위험?', 1, '중', '과도 재시도→즉시 Open', 'Jitter 제거', 'Retry-After 무시', 'HTTP/2 끊김', 32),
    (1585, 'Coalescing 효과 시나리오?', 1, '중', '같은 리소스 다수 GET', '다른 POST', 'WebSocket', 'SSE', 32),
    (1586, 'Equal Jitter 이점 아닌 것?', 2, '중', '스파이크 완화', '최대/최소 지연 예측', 'Full Jitter보다 대기 줄임', '서버 완화', 32),
    (1587, 'Fallback 전략 사례?', 1, '상', '캐시된 데이터로 표시', '재시도 0', 'CB 강제 Close', 'Retry-After 무시', 32),
    (1588, 'Hedged Request 주의점?', 1, '상', '멱등 보장 필요', 'DNS TTL 0', 'KEEP-ALIVE 끊기', 'TLS 1.3', 32),
    (1589, 'Max-Retry-TTL 목적?', 1, '상', '무제한 지연 방지', 'TCP FIN 감소', '브라우저 버그 회피', 'Keep-Alive 증가', 32),
    (1590, 'CB 실시간 튜닝 기법?', 1, '상', 'Feature Flag 기반 임계 조정', '콘솔 변수', '헤더 하드코드', '빌드 상수', 32),
    (1591, '자주 쓰는 SLO 쌍은?', 1, '하', '가용성·오류율', 'CPU·메모리', '빌드시간·커버리지', 'PR 리뷰', 32),
    (1592, 'P99 증가 의심 원인?', 1, '하', '소수 요청 재시도 지연', '평균 느려짐', '404 급증', '로깅 오류', 32),
    (1593, '분산 추적 유용 이유?', 1, '중', 'Trace로 재시도 체인 시각화', '헤더 암호화', '로그 제거', '패킷 캡처', 32),
    (1594, 'Chaos 테스트 간단 도구?', 1, '중', 'MSW random error', 'CSS Lint', 'Bundle Analyzer', 'Lighthouse', 32),
    (1595, '포스트모템 포함 아님?', 1, '중', '담당자 인적 정보', '타임라인', 'RCA', '재발 방지', 32),
    (1596, '알림 임계 낮음 문제?', 1, '상', 'Alert Fatigue', 'MTTR 증가', 'Slack→Email', 'Grafana 꺼짐', 32),
    (1597, '롤아웃 안전 배포 전략?', 1, '상', 'Feature Flag Gradual', 'Big-bang', 'Force-push', 'CI 캐시 무효', 32),
    (1598, '로그 레벨 매핑?', 1, '상', '시작 debug, 재시도 info, 실패 error', '모두 warn', '재시도 fatal', '성공 error', 32),
    (1599, '슬라이딩 윈도우 오류율 이유?', 1, '상', '즉시값 대신 경향 파악', '메트릭 안 삭제', '테스트 속도', '다크 테마', 32),
    (1600, '오류율 상승 자동 롤백 기능은?', 1, '상', 'Canary 분석 → rollback', 'Merge Queue', 'multi-stage build', 'npm postinstall', 32),
    (1601, '소프트웨어 테스트의 주요 목적 중 하나가 아닌 것은?', 3, '하', '버그를 사전에 방지하기 위해', '코드의 품질을 보장하기 위해', '프로젝트의 디자인을 결정하기 위해', '기능이 의도대로 동작하는지 확인하기 위해', 33),
    (1602, '단위 테스트(Unit Test)는 보통 어떤 범위를 테스트하는가?', 3, '하', '전체 페이지 흐름', '데이터베이스 연결', '개별 함수나 메서드', '네트워크 요청 전체', 33),
    (1603, '테스트 피라미드에서 가장 많은 수를 차지해야 하는 테스트는?', 1, '하', '단위 테스트', '스냅샷 테스트', '통합 테스트', 'E2E 테스트', 33),
    (1604, 'TDD(Test Driven Development)의 순서로 올바른 것은?', 2, '하', '코딩 → 테스트 → 리팩터링', '테스트 → 코딩 → 리팩터링', '디자인 → 코딩 → 테스트', '리팩터링 → 테스트 → 코딩', 33),
    (1605, 'E2E(End-to-End) 테스트의 주요 목적은?', 3, '중', '모듈 간의 상호작용만 테스트', '단일 함수의 반환 값 테스트', '실제 사용자 흐름을 시뮬레이션하여 전반적인 기능 확인', '컴포넌트 내부 상태만 검증', 33),
    (1606, '통합 테스트(Integration Test)의 핵심 목적은?', 3, '중', '하나의 API 응답만 확인', '모든 데이터베이스 데이터를 삭제', '여러 모듈이 함께 작동하는지를 확인', '브라우저 렌더링 최적화', 33),
    (1607, 'Mock 객체는 어떤 목적으로 사용되는가?', 2, '중', '실제 UI 렌더링 속도를 측정하기 위해', '실제 의존성을 제거하고 테스트 대상에 집중하기 위해', '컴파일 시간을 단축하기 위해', '스타일을 테스트하기 위해', 33),
    (1608, 'Stub과 Spy의 차이점으로 올바른 설명은?', 2, '중', 'Stub은 호출 여부를 기록하고 Spy는 반환 값을 고정한다', 'Spy는 호출 여부를 기록하고 Stub은 미리 정의된 값을 반환한다', '둘은 완전히 동일하다', 'Stub은 네트워크 요청에만 사용된다', 33),
    (1609, '다음 중 테스트 유지보수를 어렵게 만드는 주요 원인은?', 3, '상', '테스트가 너무 작아서 디버깅이 쉬움', '테스트가 명확하게 의도를 드러냄', '테스트가 구현 세부사항에 너무 의존함', '테스트가 모든 흐름을 자동화함', 33),
    (1610, '테스트 작성 시점 중 ''코드를 작성한 후 테스트하는 방식''을 부르는 말은?', 3, '상', 'TDD', 'BDD', 'Test Last', 'Test First', 33),
    (1611, '입력값을 받아 2배로 반환하는 순수 함수의 테스트에서 가장 중요한 검증 요소는?', 3, '하', '콘솔 출력 여부', '실행 시간', '입력에 따라 항상 예측 가능한 값을 반환하는지', '함수명이 의미론적으로 맞는지', 33),
    (1612, 'Jest에서 테스트 함수를 작성할 때 사용하는 기본 함수는?', 2, '하', 'run()', 'test()', 'verify()', 'assert()', 33),
    (1613, '다음 중 단위 테스트가 아닌 것은?', 3, '하', '계산 함수가 올바르게 작동하는지 확인', '이벤트 핸들러가 특정 상태를 변경하는지 확인', 'API 서버가 DB와 연결되는지 확인', '입력값 없이 반환값이 정해진 함수 검증', 33),
    (1614, 'Jest에서 `expect(value).toBe(4)`에서 사용된 `toBe`는 어떤 역할을 하는가?', 3, '하', '값이 포함되어 있는지 확인', '객체의 구조를 비교', '값이 정확히 일치하는지 비교', '함수 호출 여부 확인', 33),
    (1615, '경계값 테스트(Boundary Test)가 중요한 이유는?', 3, '중', 'UI에 더 가까운 테스트라서', '실행 시간이 길어서', '에러가 가장 자주 발생하는 구간이기 때문에', '개발자가 자주 빼먹는 요소이기 때문에', 33),
    (1616, '함수에 예외 상황을 강제로 발생시키고 그 처리를 검증하는 테스트는 어떤 유형인가?', 3, '중', '성능 테스트', '엣지 케이스 테스트', '예외 테스트', '경고 테스트', 33),
    (1617, 'Jest에서 beforeEach() 함수의 주된 용도는?', 2, '중', '모든 테스트 후 리포트를 출력', '각 테스트가 실행되기 전에 초기화 작업 수행', '테스트 실행 여부 확인', '테스트 종료 후 정리', 33),
    (1618, '다음 중 순수 함수(Pure Function)의 특징이 아닌 것은?', 3, '중', '동일한 입력 → 동일한 출력', '외부 상태에 의존하지 않음', '부작용(side-effect)을 가짐', '예측 가능하고 테스트하기 쉬움', 33),
    (1619, '테스트 대상 함수가 내부적으로 다른 모듈을 호출할 경우 가장 적절한 단위 테스트 전략은?', 3, '상', '그대로 테스트', '그 모듈도 같이 실행', 'Mocking을 통해 외부 모듈 의존 제거', '함수를 삭제함', 33),
    (1620, '단위 테스트 작성 시 테스트 커버리지를 지나치게 100%로 맞추는 것이 비효율적인 이유는?', 2, '상', '코드를 짧게 유지할 수 없다', '의미 없는 테스트가 늘어날 수 있다', '코드가 느려진다', '테스트 파일이 너무 많아진다', 33),
    (1621, 'React Testing Library에서 가장 기본이 되는 렌더링 함수는?', 3, '하', 'renderComponent()', 'mount()', 'render()', 'testRender()', 33),
    (1622, '컴포넌트 내부의 버튼 클릭 이벤트 테스트에서 주로 사용하는 메서드는?', 3, '하', 'fire()', 'simulate()', 'fireEvent.click()', 'trigger()', 33),
    (1623, '컴포넌트 테스트 시 `getByText()`는 어떤 요소를 찾는가?', 2, '하', 'id 값이 같은 요소', '텍스트 노드에 해당하는 요소', 'input name 속성의 값', '클래스명이 같은 요소', 33),
    (1624, 'React 컴포넌트 테스트에서 `screen` 객체의 목적은?', 3, '하', 'UI의 크기를 조정하기 위함', '테스트 화면을 캡처하기 위함', 'DOM 탐색을 전역에서 수행할 수 있게 함', '스타일을 테스트하기 위함', 33),
    (1625, '컴포넌트에 `props`를 전달하여 렌더링 테스트를 할 때 사용하는 방법은?', 3, '중', 'render(<Component>)', 'render(Component, props)', 'render(<Component {...props} />)', 'mount(Component, props)', 33),
    (1626, '상태 변경(setState)이 발생하는 컴포넌트를 테스트할 때 필요한 함수는?', 3, '중', 'waitFor()', 'render()', 'act()', 'flush()', 33),
    (1627, '비동기 UI 요소가 나타나는 테스트에서 사용해야 할 방법은?', 4, '중', 'getByText()', 'queryByTestId()', 'waitForElementToBeRemoved()', 'waitFor()', 33),
    (1628, '컴포넌트 테스트에서 사용자 입력을 시뮬레이션하려면 어떤 함수가 적절한가?', 2, '중', 'simulateInput()', 'fireEvent.change()', 'act.input()', 'input()', 33),
    (1629, '테스트 대상 컴포넌트가 Context API를 사용하는 경우, 테스트 시 가장 적절한 방법은?', 2, '상', 'useContext로 직접 호출', 'Provider로 감싸서 렌더링', 'mockProvider 사용 금지', 'Context 내부를 무시', 33),
    (1630, '다음 중 ''접근성 기준''에 따라 요소를 찾는 React Testing Library 함수는?', 2, '상', 'getByText()', 'getByRole()', 'querySelector()', 'getById()', 33),
    (1631, 'Snapshot 테스트의 주요 목적은?', 1, '하', '컴포넌트의 UI가 변경되지 않았는지 검증하기 위해', '네트워크 지연을 테스트하기 위해', '브라우저 호환성을 확인하기 위해', 'DB 연결을 확인하기 위해', 33),
    (1632, 'Jest에서 스냅샷 테스트를 생성하는 메서드는?', 3, '하', 'toMatchText()', 'toEqual()', 'toMatchSnapshot()', 'toRenderSame()', 33),
    (1633, 'Snapshot 테스트가 실패했을 때 주로 해야 할 작업은?', 3, '하', '테스트를 무시한다', '브라우저를 재시작한다', '스냅샷을 업데이트하거나, 변경 원인을 확인한다', '파일명을 바꾼다', 33),
    (1634, '다음 중 Mocking이 필요한 상황으로 적절한 것은?', 2, '중', '순수 함수 테스트 시', 'DB와 연결된 의존 모듈을 테스트할 때', 'DOM 구조가 없는 테스트', 'static 파일 테스트', 33),
    (1635, 'Jest의 `jest.fn()`은 어떤 역할을 하는가?', 3, '중', '새 DOM 요소를 생성한다', '비동기 API 요청을 실행한다', 'Mock 함수(더미 함수)를 생성한다', '스냅샷을 자동 생성한다', 33),
    (1636, 'Jest에서 특정 모듈을 Mock 처리하려면 사용하는 함수는?', 2, '중', 'jest.module()', 'jest.mock()', 'mock.module()', 'spyOn()', 33),
    (1637, 'Mock 함수가 실제로 호출되었는지를 확인하려면 어떤 Matcher를 사용해야 하는가?', 2, '중', 'toBeCalled()', 'toHaveBeenCalled()', 'toMatchSnapshot()', 'toEqual()', 33),
    (1638, '스냅샷 테스트의 단점으로 적절한 것은?', 2, '상', '자동화가 되지 않는다', 'UI가 너무 자주 바뀌면 테스트 유지가 어렵다', '로직을 테스트할 수 없다', '컴포넌트를 렌더링하지 않는다', 33),
    (1639, '비동기 API를 테스트할 때 실제 서버를 호출하지 않기 위해 사용하는 방식은?', 3, '상', '실제 API를 호출하고 검증', '코드를 주석 처리함', 'Mock 서버나 Mock 데이터를 사용함', '그냥 무시하고 테스트함', 33),
    (1640, '다음 중 MSW(Mock Service Worker)의 주요 용도는?', 3, '상', 'React 컴포넌트를 렌더링하기 위해', 'HTML을 정리하기 위해', '실제 API를 대체하는 가짜 응답을 테스트에서 제공하기 위해', '데이터베이스 테스트를 위해', 33),
    (1641, '통합 테스트(Integration Test)의 주요 목적은?', 2, '하', '단일 함수의 내부 동작 확인', '여러 모듈이 함께 작동하는 흐름을 검증', '브라우저 렌더링 속도 테스트', '사용자 입력 시뮬레이션 테스트', 33),
    (1642, '통합 테스트에서 주로 테스트하는 것은?', 2, '하', '데이터베이스 쿼리만 단독 테스트', 'API 호출부터 화면 반영까지의 흐름', '서버 CPU 사용량', 'HTML 정적 구조', 33),
    (1643, 'React 기반의 통합 테스트에서 가장 흔히 테스트하는 시나리오는?', 2, '하', '컴포넌트 렌더링 여부만 확인', '버튼 클릭 시 API 요청 및 UI 변경 흐름', 'DOM 트리 구조 출력', '단일 스타일 변경 테스트', 33),
    (1644, '통합 테스트에서 상태 관리 라이브러리(Redux, Zustand 등)를 다룰 때 가장 중요한 것은?', 2, '중', '비동기 호출 순서만 보기', 'store가 UI에 올바르게 반영되는지 확인', 'reducer 내부 구현 확인', '액션 생성 함수 테스트', 33),
    (1645, '다음 중 React 앱에서 실제 사용자 흐름을 통합 테스트할 때 적절한 도구는?', 1, '중', 'Cypress', 'Prettier', 'Webpack', 'Babel', 33),
    (1646, '비동기 통합 테스트에서 API 응답을 기다릴 때 사용하는 방식은?', 2, '중', 'setTimeout', 'async/await + waitFor() 조합', 'done() 함수 제거', 'forceFlush()', 33),
    (1647, 'API 요청 중 에러가 발생했을 때 UI가 제대로 에러 상태를 표시하는지 검증하는 테스트는?', 3, '중', '성능 테스트', '렌더링 테스트', '에러 처리 통합 테스트', '단위 테스트', 33),
    (1648, '통합 테스트를 작성할 때 가장 중요한 고려사항은?', 2, '상', '컴포넌트 개수', '테스트가 실제 사용자 행동과 유사한지 여부', '코드 라인 수', '서버 상태', 33),
    (1649, '다음 중 API 요청/응답을 Mock 처리해 통합 테스트하는 기술은?', 3, '상', 'RTL Snapshot', 'RESTClient', 'Mock Service Worker (MSW)', 'SASS Loader', 33),
    (1650, '통합 테스트에서 ‘비정상 흐름’을 일부러 유도해 테스트하는 목적은?', 4, '상', '테스트 커버리지 확보를 위해', '코드를 더 빨리 실행하기 위해', '사용자에게 실제로 에러를 보여주기 위해', '의도된 예외 처리 경로가 안전하게 작동하는지 확인하기 위해', 33),
    (1651, 'E2E(End-to-End) 테스트의 주요 목적은?', 3, '하', '단일 함수의 성능을 테스트하기 위해', '컴포넌트 단위 렌더링을 검증하기 위해', '전체 사용자 흐름이 정상적으로 작동하는지 확인하기 위해', '테스트 커버리지를 높이기 위해', 34),
    (1652, '다음 중 E2E 테스트에 해당하는 시나리오는?', 2, '하', '계산 함수의 반환값 검증', '로그인 → 장바구니 담기 → 결제 완료까지 시뮬레이션', '컴포넌트 내부 상태 확인', 'CSS class 적용 여부 확인', 34),
    (1653, 'E2E 테스트는 일반적으로 어떤 방식으로 실행되는가?', 3, '하', '서버 로그를 통해 결과를 분석', '테스트 전용 API를 통해 직접 테스트', '브라우저를 실제로 열어 사용자처럼 동작을 시뮬레이션', '백엔드만 대상으로 테스트', 34),
    (1654, 'E2E 테스트 도구로 널리 사용되는 것이 아닌 것은?', 3, '하', 'Cypress', 'Playwright', 'Postman', 'Selenium', 34),
    (1655, 'E2E 테스트 시 시나리오 설계에서 가장 먼저 고려할 점은?', 2, '중', '컴포넌트의 크기', '사용자의 실제 행동 흐름', '데이터베이스 용량', '브라우저 렌더링 성능', 34),
    (1656, '다음 중 E2E 테스트의 특징으로 올바른 설명은?', 3, '중', '코드 레벨의 정확한 단위 테스트가 된다', '빠르지만 신뢰도가 낮다', '느리지만 실제 사용자 경험을 반영할 수 있다', '브라우저 없이 실행된다', 34),
    (1657, 'E2E 테스트가 단위 테스트에 비해 가지는 단점은?', 3, '중', '로컬에서 실행이 불가능하다', '실제 동작을 확인할 수 없다', '속도가 느리고, 설정이 복잡할 수 있다', '코드 커버리지를 높일 수 없다', 34),
    (1658, 'E2E 테스트에서 테스트 환경을 격리해야 하는 주된 이유는?', 3, '중', '테스트 속도를 높이기 위해', 'UI를 더 멋지게 보이게 하기 위해', '테스트 결과가 외부 상태에 따라 달라지지 않도록 하기 위해', '브라우저 화면을 크게 보기 위해', 34),
    (1659, 'E2E 테스트와 통합 테스트의 주된 차이점은?', 3, '상', '통합 테스트는 화면을 테스트하지 않는다', 'E2E는 단일 함수 테스트이고, 통합은 전체 흐름 테스트다', 'E2E는 실제 사용자 인터페이스를 테스트하고, 통합 테스트는 코드 간 상호작용을 테스트한다', '둘은 동일하다', 34),
    (1660, 'E2E 테스트에서 테스트가 실패했을 때 가장 먼저 해야 할 행동은?', 2, '상', '모든 테스트를 다시 작성한다', '실제 UI를 직접 열어 실패한 시나리오를 재현해본다', '코드를 전부 삭제한다', '다른 브라우저를 설치한다', 34),
    (1661, 'Cypress에서 웹 페이지를 열기 위해 사용하는 명령어는?', 2, '하', 'cy.open()', 'cy.visit()', 'cy.launch()', 'cy.page()', 34),
    (1662, 'Cypress에서 특정 요소를 선택하기 위한 명령어는?', 3, '하', 'cy.select()', 'cy.find()', 'cy.get()', 'cy.query()', 34),
    (1663, 'Cypress에서 텍스트 입력을 시뮬레이션하려면 어떤 명령어를 사용해야 하는가?', 1, '하', 'cy.type()', 'cy.input()', 'cy.write()', 'cy.fill()', 34),
    (1664, '버튼 클릭을 Cypress로 테스트하려면 어떤 명령어를 사용해야 하는가?', 2, '하', 'cy.push()', 'cy.click()', 'cy.tap()', 'cy.fire()', 34),
    (1665, 'Cypress에서 체이닝 방식으로 연속 동작을 정의할 수 있는 이유는?', 1, '중', '모든 명령어가 비동기적으로 처리되기 때문', 'JavaScript의 특성 때문', 'Cypress는 HTML을 직접 수정하기 때문', '실제 브라우저를 사용하지 않기 때문', 34),
    (1666, '다음 중 Cypress에서 사용 가능한 Assertion 함수는?', 1, '중', 'should()', 'must()', 'verify()', 'assert()', 34),
    (1667, 'Cypress 테스트에서 ‘id가 login인 요소’를 선택하는 올바른 구문은?', 2, '중', 'cy.get(''login'')', 'cy.get(''#login'')', 'cy.get(''.login'')', 'cy.get(''id=login'')', 34),
    (1668, 'Cypress에서 네트워크 요청을 가로채거나 대체할 때 사용하는 명령어는?', 3, '중', 'cy.replace()', 'cy.api()', 'cy.intercept()', 'cy.mock()', 34),
    (1669, 'Cypress에서 테스트를 시작할 때 가장 먼저 정의하는 함수는?', 1, '상', 'describe()', 'start()', 'suite()', 'run()', 34),
    (1670, '다음 중 Cypress의 ‘it()’ 함수의 목적은?', 2, '상', '테스트 스위트 전체 정의', '단일 테스트 시나리오를 정의', '환경 설정 수행', '스냅샷을 저장', 34),
    (1671, 'E2E 테스트에서 로그인 후 페이지 접근 여부를 테스트하려면 어떤 흐름이 필요한가?', 3, '하', '컴포넌트 렌더링만 확인', '로그인 없이 바로 이동', '로그인 수행 후 토큰 기반 접근 확인', '스크린샷 저장 후 비교', 34),
    (1672, 'Cypress에서 로그인 상태를 재사용하려면 가장 적절한 방법은?', 3, '하', '테스트마다 로그인 절차 반복', '브라우저 자동 리프레시 사용', 'localStorage나 쿠키를 직접 설정', '테스트 후 세션을 삭제', 34),
    (1673, 'Cypress에서 특정 URL로 이동했는지 검증할 때 사용하는 메서드는?', 1, '하', 'cy.url()', 'cy.path()', 'cy.redirect()', 'cy.location()', 34),
    (1674, 'E2E 테스트에서 로그인과 같은 공통 작업을 테스트 전에 실행하려면 어떤 Hook을 사용하는가?', 1, '중', 'before()', 'setup()', 'onLogin()', 'preRun()', 34),
    (1675, '다음 중 상태가 여러 테스트 간 공유되지 않도록 하기 위한 전략은?', 3, '중', '브라우저 새로고침', 'DOM 요소 초기화', '각 테스트마다 상태를 명시적으로 초기화', 'URL을 변경하지 않음', 34),
    (1676, '라우팅 테스트에서 로그인하지 않은 사용자가 접근할 수 없도록 하는 테스트는?', 3, '중', '인증 우회 테스트', '보안 무시 테스트', '비인가 접근 차단 테스트', '라우팅 백도어 테스트', 34),
    (1677, '상태 검증에서 가장 중요하게 테스트해야 할 것은?', 3, '중', '상태 저장 위치', 'Redux나 Zustand의 reducer 함수 호출 여부', '사용자의 인터랙션 결과로 UI가 올바르게 반영되었는지', '브라우저 쿠키 변경 여부', 34),
    (1678, 'Cypress에서 로그인 API를 미리 호출하여 세션을 설정하는 방법은?', 2, '상', 'cy.routeLogin()', 'cy.session()', 'cy.init()', 'cy.apiAuth()', 34),
    (1679, '다음 중 상태 기반 UI 테스트에 포함될 수 없는 것은?', 3, '상', '버튼 클릭 후 텍스트가 변경되었는지 확인', '비동기 요청 후 목록이 갱신되었는지 확인', '컴포넌트 이름이 올바른지 확인', '상태에 따라 요소가 보이거나 숨겨졌는지 확인', 34),
    (1680, 'E2E 테스트에서 사용자 상태에 따라 라우팅을 분기시키는 케이스를 테스트할 때 가장 중요한 점은?', 2, '상', '사용자 정보를 console.log로 출력하는 것', '로그인된 상태/비로그인 상태 모두를 분리해 시나리오를 테스트하는 것', 'URL을 정적으로 지정하는 것', '브라우저를 수동 조작하는 것', 34),
    (1681, 'Visual Regression Test의 주요 목적은?', 3, '하', '코드 내부 로직을 검증하기 위해', '컴포넌트의 상태 관리를 테스트하기 위해', 'UI의 시각적 변화 여부를 감지하기 위해', '페이지 로딩 속도를 측정하기 위해', 34),
    (1682, '다음 중 Visual Regression Test 도구가 아닌 것은?', 4, '하', 'Percy', 'jest-image-snapshot', 'Chromatic', 'Vitest', 34),
    (1683, '화면의 스냅샷을 저장하고 픽셀 단위로 비교하는 방식을 사용하는 테스트는?', 4, '하', '단위 테스트', '통합 테스트', 'E2E 테스트', 'Visual Regression Test', 34),
    (1684, 'Visual Regression Test가 실패하는 주요 이유는?', 2, '중', '코드가 너무 길어서', 'UI가 이전과 다르게 렌더링되었기 때문', '브라우저 종류가 달라서', '서버가 응답하지 않아서', 34),
    (1685, 'Percy와 같은 도구에서 시각적 차이를 허용하는 기준 값은?', 2, '중', 'margin', 'threshold', 'resolution', 'offset', 34),
    (1686, 'Visual Regression Test를 구성할 때 테스트가 불안정해지는 주요 원인은?', 2, '중', 'API 속도 변화', '브라우저 창 크기 불일치', '컴포넌트 이름 중복', '로딩 스피너 미적용', 34),
    (1687, '다음 중 VRT를 적용하기 가장 적절한 대상은?', 3, '중', '네트워크 요청', 'Redux 상태 변경', '버튼 위치, 폰트 크기 등의 UI 요소', '서버 응답 시간', 34),
    (1688, 'Chromatic은 어떤 프레임워크 기반에서 동작하는 VRT 도구인가?', 1, '상', 'Storybook', 'React Testing Library', 'Cypress', 'Next.js', 34),
    (1689, 'jest-image-snapshot의 역할은?', 2, '상', '이미지를 애니메이션으로 변환', '이미지를 저장하고 이전 이미지와 비교', '브라우저 렌더링을 가속', '컴포넌트 이름을 리팩터링', 34),
    (1690, 'Visual Regression Test에서 false positive를 줄이기 위한 전략은?', 3, '상', '이미지 비교를 제거한다', 'threshold를 0으로 설정한다', '애니메이션 요소를 제외하거나 지연시간(wait)을 설정한다', '매번 스냅샷을 덮어쓴다', 34),
    (1691, 'E2E 테스트와 Visual Regression Test를 함께 사용하는 가장 큰 이유는?', 3, '하', '테스트 실행 속도를 높이기 위해', '코드 커버리지를 자동 계산하기 위해', '기능 흐름과 UI 변경을 동시에 검증하기 위해', '서버 상태를 유지하기 위해', 34),
    (1692, '다음 중 E2E + VRT 통합 전략에 해당하지 않는 것은?', 3, '하', '로그인 후 페이지 이동과 화면 비교를 함께 수행', '버튼 클릭 후 발생하는 UI 변경을 시각적으로 캡처', '데이터베이스 백업만 테스트', '사용자 흐름 기반 테스트에 스냅샷 비교 추가', 34),
    (1693, 'E2E + VRT를 통합할 때 가장 먼저 고려해야 할 것은?', 3, '중', '데이터베이스 마이그레이션', '브라우저 호환성 문제', '테스트 대상의 사용자 흐름과 시각적 변화 포인트 정의', '컴포넌트 폴더 구조', 34),
    (1694, '다음 중 실제 사용자 시나리오 + UI 비교를 자동화하는 데 가장 적합한 조합은?', 2, '중', 'Jest + Webpack', 'Cypress + Percy', 'React Testing Library + ESLint', 'Vitest + Tailwind', 34),
    (1695, 'E2E + VRT 테스트에서 동일한 테스트가 자주 실패한다면 먼저 확인해야 할 것은?', 1, '중', '화면 캡처 타이밍과 애니메이션 여부', '테스트 파일명', 'CSS 변수 정의 방식', '사용자 ID 값', 34),
    (1696, '다음 중 E2E → VRT 흐름을 구성한 예시로 올바른 것은?', 2, '중', '1. 스냅샷 찍기 → 2. 로그인 → 3. 클릭', '1. 클릭 → 2. 페이지 이동 → 3. 화면 캡처 → 4. 이미지 비교', '1. assert 호출 → 2. 테스트 종료 → 3. UI 스냅샷 저장', '1. 서버 로그 수집 → 2. 컴포넌트 리렌더링', 34),
    (1697, 'E2E + VRT 통합 테스트 시, 테스트가 불안정하게 자주 깨질 경우 해결 전략은?', 3, '상', '스냅샷 비교를 제거한다', '테스트 실행 시간을 줄인다', '애니메이션 제거 및 특정 요소가 로드된 후 비교', '코드를 전체 리팩터링한다', 34),
    (1698, '다음 중 통합된 테스트 시나리오 예로 가장 적절한 것은?', 2, '상', '페이지 로딩 속도 측정만 수행', '사용자가 결제 버튼을 누르고 완료 화면의 디자인도 함께 검증', 'Redux 상태만 비교', '컴포넌트 수동 클릭', 34),
    (1699, 'E2E + VRT 통합 테스트에서 테스트 유지보수성을 높이기 위한 방법은?', 2, '상', '모든 스냅샷을 자동 업데이트', '기능별 테스트 시나리오 분리 및 UI 변화 최소화 기준 설정', '컴포넌트를 재설계한다', '테스트를 하나로 몰아넣는다', 34),
    (1700, 'CI 환경에서 E2E + VRT 통합 테스트를 자동화하려면 필요한 구성 요소는?', 2, '상', 'npm run build 명령어만 있으면 됨', 'GitHub Actions, 테스트 도구, 시각 비교 도구가 포함된 워크플로우', '브라우저 콘솔 로그', '크롬 확장 프로그램', 34),
    (1701, '현재 작업 중인 디렉토리를 출력하는 명령어는?', 2, '하', 'cd', 'pwd', 'ls', 'dir', 35),
    (1702, '파일 내용을 화면에 출력하는 명령어는?', 2, '하', 'echo', 'cat', 'print', 'more', 35),
    (1703, '디렉토리를 생성하는 명령어는?', 1, '하', 'mkdir', 'makedir', 'diradd', 'newdir', 35),
    (1704, '파일을 삭제하는 명령어는?', 3, '중', 'erase', 'del', 'rm', 'rmdir', 35),
    (1705, '숨김 파일을 포함해 모든 파일을 나열하는 명령어는?', 1, '중', 'ls -a', 'ls -l', 'ls -h', 'ls -f', 35),
    (1706, '파일의 복사에 사용하는 명령어는?', 2, '중', 'mv', 'cp', 'copy', 'clone', 35),
    (1707, '심볼릭 링크를 생성하는 명령어는?', 3, '상', 'link', 'symlink', 'ln -s', 'mklink', 35),
    (1708, '디스크 공간을 확인하는 명령어는?', 1, '상', 'df', 'du', 'lsblk', 'space', 35),
    (1709, '파일 시스템의 사용량을 확인하는 명령어는?', 2, '상', 'df -h', 'du -sh', 'ls -lh', 'top', 35),
    (1710, '파일 경로에서 . 은 무엇을 의미하는가?', 2, '상', '홈 디렉토리', '현재 디렉토리', '루트 디렉토리', '상위 디렉토리', 35),
    (1711, '현재 로그인한 사용자를 확인하는 명령어는?', 1, '하', 'whoami', 'me', 'id', 'logname', 35),
    (1712, '파일의 소유자와 그룹을 변경하는 명령어는?', 2, '하', 'chmod', 'chown', 'usermod', 'groupadd', 35),
    (1713, '새 사용자를 추가하는 명령어는?', 1, '하', 'useradd', 'adduser', 'newuser', 'mkuser', 35),
    (1714, '파일 권한을 변경하는 명령어는?', 1, '중', 'chmod', 'chgrp', 'setperm', 'setchmod', 35),
    (1715, '그룹을 추가하는 명령어는?', 2, '중', 'addgroup', 'groupadd', 'newgroup', 'mkgroup', 35),
    (1716, '사용자의 현재 그룹 목록을 확인하는 명령어는?', 1, '중', 'groups', 'usergroups', 'id -g', 'usermod -g', 35),
    (1717, '파일 권한 755의 의미는?', 2, '상', 'rwx rwx rwx', 'rwx r-x r-x', 'rw- rw- rw-', 'r-- r-- r--', 35),
    (1718, '비밀번호를 설정하는 명령어는?', 1, '상', 'passwd', 'setpass', 'userpass', 'changepass', 35),
    (1719, '파일에 대한 접근 권한을 부여할 때 사용하는 심볼은?', 4, '상', 'x', 'w', 'r', '모두 해당', 35),
    (1720, '파일의 소유자 변경 시 사용하는 명령어는?', 3, '상', 'chmod', 'chgrp', 'chown', 'chperm', 35),
    (1721, '현재 실행 중인 프로세스를 확인하는 명령어는?', 1, '하', 'ps', 'run', 'jobs', 'top', 35),
    (1722, '실시간으로 시스템 상태를 보여주는 명령어는?', 3, '하', 'ps', 'jobs', 'top', 'uptime', 35),
    (1723, '백그라운드 작업을 포그라운드로 전환하는 명령어는?', 1, '하', 'fg', 'bg', 'resume', 'bring', 35),
    (1724, '작업을 백그라운드로 전환하는 명령어는?', 1, '중', 'bg', 'fg', 'bgjob', 'ctrl+z', 35),
    (1725, '특정 프로세스를 강제 종료하는 명령어는?', 3, '중', 'exit', 'halt', 'kill', 'stop', 35),
    (1726, '현재 실행 중인 작업 목록을 보는 명령어는?', 1, '중', 'jobs', 'tasks', 'runlist', 'active', 35),
    (1727, '시그널 번호 9는 무엇을 의미하는가?', 3, '상', '프로세스 일시중지', '프로세스 종료', '프로세스 강제 종료', '메모리 반환', 35),
    (1728, '특정 이름의 프로세스를 종료할 수 있는 명령어는?', 1, '상', 'killall', 'pskill', 'endproc', 'shutdown', 35),
    (1729, '작업의 우선순위를 조정하는 명령어는?', 3, '상', 'nice', 'priority', 'renice', 'taskmod', 35),
    (1730, '특정 명령을 백그라운드에서 실행하려면 어떻게 하는가?', 1, '상', '명령어 &', 'run 명령어', 'exec 명령어', 'start 명령어', 35),
    (1731, 'Debian 계열에서 패키지를 설치하는 명령어는?', 3, '하', 'yum install', 'dnf install', 'apt install', 'rpm -i', 35),
    (1732, 'RedHat 계열에서 패키지를 설치하는 명령어는?', 2, '하', 'apt install', 'yum install', 'brew install', 'pkg install', 35),
    (1733, '설치된 모든 패키지를 나열하는 명령어는?', 4, '하', 'yum list', 'dpkg -l', 'apt list --installed', '모두 해당', 35),
    (1734, 'apt 패키지 목록을 업데이트하는 명령어는?', 2, '중', 'apt upgrade', 'apt update', 'apt refresh', 'apt reload', 35),
    (1735, 'dnf를 사용하는 Linux 배포판은?', 3, '중', 'Ubuntu', 'Debian', 'Fedora', 'Arch', 35),
    (1736, 'RPM 패키지를 수동 설치하는 명령어는?', 1, '중', 'rpm -i', 'yum install rpm', 'rpm --install', 'rpm +i', 35),
    (1737, '설치된 패키지를 삭제하는 apt 명령어는?', 3, '상', 'apt delete', 'apt erase', 'apt remove', 'apt uninstall', 35),
    (1738, '소스코드로 소프트웨어를 설치할 때 사용되는 기본 명령은?', 4, '상', './configure', 'make install', 'tar -xzvf', '모두 해당', 35),
    (1739, '리눅스에서 실행 파일 권한을 설정하는 명령어는?', 1, '상', 'chmod +x', 'chmod -r', 'make install', 'setrun', 35),
    (1740, 'Flatpak과 Snap은 어떤 유형의 패키지 시스템인가?', 3, '상', '전통적 패키지', '모듈형 패키지', '컨테이너 기반 패키지', '비공식 저장소', 35),
    (1741, '시스템의 현재 날짜와 시간을 확인하는 명령어는?', 3, '하', 'clock', 'time', 'date', 'now', 35),
    (1742, '로그 파일은 일반적으로 어느 디렉토리에 저장되는가?', 2, '하', '/log', '/var/log', '/etc/log', '/usr/log', 35),
    (1743, '시스템의 부팅 로그를 확인하는 명령어는?', 1, '하', 'dmesg', 'bootlog', 'sysboot', 'initlog', 35),
    (1744, '시스템 서비스 상태를 확인하는 명령어는?', 3, '중', 'service', 'status', 'systemctl status', 'checksvc', 35),
    (1745, '서비스를 시작하는 systemctl 명령어는?', 2, '중', 'systemctl enable', 'systemctl start', 'systemctl begin', 'systemctl run', 35),
    (1746, 'journalctl 명령어는 무엇을 위한 것인가?', 3, '중', '파일 시스템 관리', '프로세스 추적', '시스템 로그 조회', '네트워크 설정', 35),
    (1747, 'cron 작업 설정 파일은 어디에 위치하는가?', 4, '상', '/etc/cron.d', '/etc/crontab', '/var/cron', '모두 해당', 35),
    (1748, 'crontab에서 ''*''는 어떤 의미인가?', 2, '상', '무시', '모든 값', '시간 초과', '반복 없음', 35),
    (1749, '로그 파일에서 최근 항목만 확인하려면 사용하는 명령어는?', 3, '상', 'cat', 'head', 'tail', 'less', 35),
    (1750, '리눅스 시스템 로그를 모니터링하기 위해 사용하는 명령어는?', 1, '상', 'journalctl -f', 'syslogctl', 'watch log', 'logwatch', 35),
    (1751, 'OSI 7계층에서 데이터 링크 계층은 몇 번째인가?', 2, '하', '1계층', '2계층', '3계층', '4계층', 36),
    (1752, '패킷을 목적지까지 전달하는 역할을 하는 계층은?', 3, '하', '물리 계층', '데이터 링크 계층', '네트워크 계층', '전송 계층', 36),
    (1753, '클라이언트-서버 모델에서 서버의 역할은?', 2, '하', '요청 전송', '요청 수신 및 응답', '브라우저 실행', '라우팅 수행', 36),
    (1754, 'TCP와 UDP의 주요 차이점은?', 3, '중', 'TCP는 비연결형', 'UDP는 신뢰성 있음', 'TCP는 연결 지향적', 'UDP는 흐름 제어 지원', 36),
    (1755, '이더넷 프레임에서 목적지 MAC 주소의 길이는?', 4, '중', '32비트', '64비트', '128비트', '48비트', 36),
    (1756, '라우터의 주요 기능은?', 3, '중', '암호화', '파일 전송', '네트워크 간 데이터 전달', '응용 프로그램 실행', 36),
    (1757, 'OSI 7계층 중 실제 전송 매체와 관련된 계층은?', 2, '상', '응용 계층', '물리 계층', '세션 계층', '전송 계층', 36),
    (1758, 'P2P 방식의 특징은?', 3, '상', '중앙 집중형', '브라우저 기반', '서버 불필요', '클라이언트만 존재', 36),
    (1759, '데이터 전송 중 오류 제어와 흐름 제어를 담당하는 계층은?', 2, '상', '데이터 링크 계층', '전송 계층', '세션 계층', '응용 계층', 36),
    (1760, '방화벽의 주된 역할은?', 3, '상', '데이터 압축', '보안 감시', '패킷 필터링', '포트 포워딩', 36),
    (1761, 'IPv4 주소는 몇 비트로 구성되어 있는가?', 2, '하', '16비트', '32비트', '64비트', '128비트', 36),
    (1762, '다음 중 사설 IP 주소 대역은?', 1, '하', '172.16.0.0/12', '8.8.8.8', '192.0.2.0', '100.64.0.0', 36),
    (1763, '255.255.255.0에 해당하는 서브넷 마스크는?', 1, '하', '/24', '/16', '/8', '/32', 36),
    (1764, '서브넷팅의 주요 목적은?', 3, '중', '보안 향상', '속도 개선', 'IP 낭비 방지', '데이터 암호화', 36),
    (1765, 'IP 주소와 서브넷 마스크를 설정하는 명령어는?', 2, '중', 'ipconfig', 'ifconfig', 'netstat', 'ping', 36),
    (1766, 'IPv6 주소의 비트 수는?', 3, '중', '32비트', '64비트', '128비트', '256비트', 36),
    (1767, '클래스 C 주소의 기본 서브넷 마스크는?', 3, '상', '255.0.0.0', '255.255.0.0', '255.255.255.0', '255.255.255.255', 36),
    (1768, 'IPv4 주소 192.168.1.1에서 네트워크 부분은 어디까지인가? (기본 /24 기준)', 2, '상', '192.168.0.0', '192.168.1.0', '192.168.1.1', '192.168.1.255', 36),
    (1769, '브로드캐스트 주소란?', 3, '상', '모든 네트워크', '특정 호스트', '모든 호스트', '라우터 전용', 36),
    (1770, '프라이빗 IP는 어떤 용도로 사용되는가?', 3, '상', '공공 웹사이트', '라우터 간 통신', '로컬 네트워크', '방화벽 설정', 36),
    (1771, 'HTTP는 어떤 계층의 프로토콜인가?', 2, '하', '전송 계층', '응용 계층', '네트워크 계층', '데이터 링크 계층', 36),
    (1772, 'HTTP 요청 메서드 중 데이터를 서버에 전송할 때 사용하는 것은?', 2, '하', 'GET', 'POST', 'PUT', 'HEAD', 36),
    (1773, '웹 브라우저가 웹 서버에 처음 요청을 보낼 때 사용하는 메서드는?', 3, '하', 'POST', 'DELETE', 'GET', 'CONNECT', 36),
    (1774, 'HTTPS는 HTTP에 어떤 보안 프로토콜을 추가한 것인가?', 1, '중', 'TLS', 'IPSec', 'SSH', 'SSL', 36),
    (1775, '다음 중 안전하지 않은 요청 메서드는?', 2, '중', 'GET', 'POST', 'HEAD', 'OPTIONS', 36),
    (1776, 'HTTP 상태 코드 404는 무엇을 의미하는가?', 3, '중', '성공', '리디렉션', '요청 오류', '서버 오류', 36),
    (1777, 'HTTPS는 어떤 포트 번호를 기본으로 사용하는가?', 3, '상', '80', '21', '443', '8080', 36),
    (1778, 'HTTP 상태 코드 중 200은 어떤 의미인가?', 1, '상', '성공', '리디렉션', '클라이언트 오류', '서버 오류', 36),
    (1779, 'PUT과 POST의 주요 차이점은?', 2, '상', 'POST는 덮어쓰기', 'PUT은 멱등성 있음', 'PUT은 삭제용', 'POST는 읽기 전용', 36),
    (1780, 'HEAD 요청의 주요 목적은?', 3, '상', '본문 확인', '파일 다운로드', '메타정보 확인', '쿠키 설정', 36),
    (1781, 'DNS의 주요 역할은?', 3, '하', 'IP를 MAC으로 변환', 'IP를 포트로 변환', '도메인을 IP로 변환', '포트를 도메인으로 변환', 36),
    (1782, '도메인 이름의 최상위 도메인은?', 2, '하', 'com', '.', 'www', 'root', 36),
    (1783, '도메인 이름에서 ''google.com''의 ''google''은 어떤 부분인가?', 4, '하', 'TLD', '루트 도메인', '서브도메인', '2차 도메인', 36),
    (1784, 'DNS 쿼리 중 반복 쿼리 방식은?', 2, '중', 'recursive', 'iterative', 'direct', 'referral', 36),
    (1785, '도메인 이름에서 ''www''는 어떤 역할인가?', 3, '중', 'TLD', '루트 도메인', '호스트명', '레코드명', 36),
    (1786, 'DNS의 A 레코드는 어떤 정보를 포함하는가?', 2, '중', '도메인 → 도메인', '도메인 → IP', 'IP → 도메인', '도메인 → 포트', 36),
    (1787, 'DNS 서버가 요청을 다른 서버로 넘기는 방식은?', 3, '상', '리다이렉션', '프록시', '포워딩', 'DNS 레코드', 36),
    (1788, '역방향 DNS 조회에 사용되는 레코드는?', 1, '상', 'PTR', 'CNAME', 'MX', 'A', 36),
    (1789, 'CNAME 레코드의 역할은?', 1, '상', '별칭 제공', '포트 지정', '이메일 서버 지정', '서브넷 마스크 지정', 36),
    (1790, '다음 중 DNS 캐싱을 담당하는 요소는?', 4, '상', '네임 서버', '브라우저', 'ISP', '모두 해당', 36),
    (1791, 'HTTPS의 보안은 어떤 기술에 기반하는가?', 2, '하', 'AES', 'TLS', 'IPSec', 'SSH', 36),
    (1792, '웹사이트가 본인의 것임을 증명하는 기술은?', 2, '하', '방화벽', 'SSL 인증서', '쿠키', '도메인 등록', 36),
    (1793, '세션 하이재킹 방지를 위한 기본 대책은?', 1, '하', '세션 ID 암호화', 'IP 변경', '포트 변경', '페이지 리디렉션', 36),
    (1794, '쿠키는 어떤 데이터 저장 방식인가?', 2, '중', '서버 측 저장', '클라이언트 측 저장', '네트워크 저장', '브라우저 캐시', 36),
    (1795, 'JWT에서 서명된 토큰이 위조되지 않았음을 보장하는 부분은?', 3, '중', 'header', 'payload', 'signature', 'issuer', 36),
    (1796, 'XSS 공격 방지 방법 중 하나는?', 1, '중', '입력 값 이스케이프', '방화벽 설치', 'IP 차단', '포트 스캐닝', 36),
    (1797, 'CSRF 공격을 방지하기 위한 기술은?', 2, '상', 'OAuth', '토큰 검증', 'SSL 인증서', '암호화 키 공유', 36),
    (1798, '보안이 적용된 HTTP 통신의 기본 포트는?', 3, '상', '80', '8080', '443', '21', 36),
    (1799, 'OAuth 2.0에서 토큰 발급을 담당하는 주체는?', 3, '상', '리소스 소유자', '클라이언트', '인증 서버', '브라우저', 36),
    (1800, 'HTTPS는 기본적으로 어떤 계층에서 동작하는가?', 3, '상', '응용 계층', '세션 계층', '전송 계층', '링크 계층', 36),
    (1801, 'Git은 어떤 형식의 시스템인가?', 2, '하', '클라우드 스토리지', '버전 관리 시스템', '파일 서버', 'DBMS', 37),
    (1802, 'Git을 설치한 후 버전을 확인하는 명령어는?', 2, '하', 'git check', 'git version', 'git install', 'git info', 37),
    (1803, 'Git 저장소를 초기화하는 명령어는?', 3, '하', 'git start', 'git new', 'git init', 'git create', 37),
    (1804, 'Git은 어떤 모델을 기반으로 동작하는가?', 2, '중', '파일 차이 추적 모델', '파일 전체 스냅샷 모델', 'SQL 데이터 모델', 'REST API 모델', 37),
    (1805, 'Git의 핵심 구조가 아닌 것은?', 3, '중', 'Commit', 'Branch', 'Pull Request', 'Repository', 37),
    (1806, 'Git이 다른 버전 관리 시스템과 구별되는 가장 큰 특징은?', 2, '중', '클라우드 기반', '분산 버전 관리', '서버 의존성', 'GUI 필수', 37),
    (1807, 'Git 저장소 내 숨겨진 디렉토리는?', 2, '상', '.gitconfig', '.git', '.repository', '.version', 37),
    (1808, 'Git 기본 사용자 이름 설정 명령어는?', 2, '상', 'git user set', 'git config user.name', 'git set username', 'git setup name', 37),
    (1809, 'Git 저장소에서 ''working directory''란 무엇인가?', 2, '상', '원격 저장소 경로', '현재 작업 중인 로컬 폴더', '서버 경로', '커밋된 파일 저장소', 37),
    (1810, 'Git 저장소에서 ''staging area''란?', 3, '상', '커밋된 파일 공간', '수정 대기 중 공간', '커밋 준비 중인 공간', '삭제 대기 공간', 37),
    (1811, 'Git에서 변경 사항을 스테이징 영역에 추가하는 명령어는?', 2, '하', 'git commit', 'git add', 'git push', 'git status', 37),
    (1812, '스테이징 영역에 추가된 파일을 저장소에 기록하는 명령어는?', 3, '하', 'git save', 'git push', 'git commit', 'git merge', 37),
    (1813, '현재 작업 디렉토리의 변경 상태를 확인하는 명령어는?', 1, '하', 'git status', 'git show', 'git commit', 'git log', 37),
    (1814, '마지막 커밋 메시지를 수정하는 명령어는?', 2, '중', 'git amend', 'git commit --amend', 'git edit', 'git rebase', 37),
    (1815, '수정한 파일을 이전 상태로 되돌리는 명령어는?', 3, '중', 'git undo', 'git reset file', 'git restore file', 'git rollback', 37),
    (1816, 'git log 명령어는 무엇을 보여주는가?', 2, '중', '브랜치 목록', '커밋 기록', '변경된 파일 목록', '서버 상태', 37),
    (1817, '스테이징 영역에서 파일을 제거하는 명령어는?', 3, '상', 'git remove', 'git unstage', 'git reset HEAD <file>', 'git restore', 37),
    (1818, '로컬 저장소에 새 파일을 생성하고 Git이 추적하도록 하려면 필요한 명령어는?', 2, '상', 'git create', 'git add', 'git push', 'git commit', 37),
    (1819, '파일이 staging 되었는지 아닌지 구분하는 명령어는?', 1, '상', 'git diff', 'git compare', 'git check', 'git log', 37),
    (1820, '작업 트리와 스테이징 영역의 차이를 보는 명령어는?', 2, '상', 'git status', 'git diff', 'git branch', 'git show', 37),
    (1821, 'Git에서 브랜치를 생성하는 명령어는?', 1, '하', 'git branch <branch-name>', 'git create branch', 'git new branch', 'git make branch', 37),
    (1822, '현재 브랜치를 확인하는 명령어는?', 2, '하', 'git show-branch', 'git branch', 'git current', 'git check', 37),
    (1823, '다른 브랜치로 이동하는 명령어는?', 1, '하', 'git switch', 'git change branch', 'git move branch', 'git jump', 37),
    (1824, '브랜치를 삭제하는 명령어는?', 3, '중', 'git remove branch', 'git delete branch', 'git branch -d <branch-name>', 'git clear branch', 37),
    (1825, '브랜치를 병합할 때 사용하는 명령어는?', 1, '중', 'git merge', 'git attach', 'git connect', 'git combine', 37),
    (1826, '병합 충돌이 발생했을 때 가장 먼저 해야 할 일은?', 2, '중', 'push 하기', '충돌 해결', 'commit 하기', 'reset 하기', 37),
    (1827, 'Fast-forward 병합이 가능한 상황은?', 1, '상', '브랜치가 동일 선상일 때', '병렬 작업이 많을 때', '리베이스 후일 때', '충돌 발생 시', 37),
    (1828, 'Git에서 리베이스(rebase)의 주요 목적은?', 2, '상', '브랜치 삭제', '커밋 기록을 정리', '브랜치 연결 끊기', '브랜치 복제', 37),
    (1829, 'rebase 중 충돌이 발생했을 때 해결 방법은?', 3, '상', 'git abort', 'git reset', '충돌 해결 후 git rebase --continue', 'git merge', 37),
    (1830, 'Git 병합 전략 중, 커밋 히스토리를 깔끔하게 유지하는 방법은?', 3, '상', 'merge', 'fast-forward', 'rebase', 'squash', 37),
    (1831, 'GitHub에서 원격 저장소를 복제하는 명령어는?', 2, '하', 'git pull', 'git clone', 'git fetch', 'git copy', 37),
    (1832, '로컬 저장소를 원격 저장소에 연결하는 명령어는?', 3, '하', 'git connect', 'git link', 'git remote add', 'git sync', 37),
    (1833, '원격 저장소의 정보를 확인하는 명령어는?', 2, '하', 'git info remote', 'git remote -v', 'git remote info', 'git check remote', 37),
    (1834, 'GitHub에 변경 사항을 업로드하는 명령어는?', 1, '중', 'git push', 'git upload', 'git send', 'git deploy', 37),
    (1835, '원격 저장소의 최신 변경 사항을 가져오는 명령어는?', 3, '중', 'git update', 'git fetch', 'git pull', 'git clone', 37),
    (1836, 'git fetch 후 로컬 브랜치에 적용하려면 어떤 명령어를 사용해야 하는가?', 3, '중', 'git rebase', 'git checkout', 'git merge', 'git switch', 37),
    (1837, '원격 저장소를 삭제하는 명령어는?', 3, '상', 'git remove remote', 'git remote delete', 'git remote rm', 'git delete origin', 37),
    (1838, 'git push origin main 명령어의 의미는?', 2, '상', 'main 브랜치를 로컬에 복제', 'main 브랜치를 원격 저장소에 업로드', 'main 브랜치를 삭제', 'main 브랜치 이름 변경', 37),
    (1839, 'GitHub에서 포크(fork) 기능은 어떤 역할을 하는가?', 2, '상', '프로젝트를 클론하는 것', '자신의 계정으로 프로젝트를 복사', '서버를 복제', '브랜치를 새로 만드는 것', 37),
    (1840, 'GitHub에서 저장소를 복제(clone)한 후 바로 개발할 수 있는 브랜치는?', 1, '상', 'master/main', 'feature', 'develop', 'hotfix', 37),
    (1841, 'GitHub에서 협업 시 일반적으로 사용하는 요청 방식은?', 2, '하', 'Push Request', 'Pull Request', 'Merge Request', 'Commit Request', 37),
    (1842, 'Pull Request를 생성할 때 필수적으로 지정해야 하는 것은?', 2, '하', '리포지토리 이름', '베이스 브랜치와 비교 브랜치', '커밋 ID', '패치 URL', 37),
    (1843, 'GitHub 이슈(Issue)의 주요 목적은?', 2, '하', '코드 수정', '버그 관리 및 기능 요청', '커밋 관리', '프로젝트 복제', 37),
    (1844, 'Pull Request에 리뷰어를 지정하는 목적은?', 2, '중', '자동 병합', '코드 검토 요청', '버그 수정', '브랜치 삭제', 37),
    (1845, 'GitHub Actions는 무엇을 자동화하는 기능인가?', 2, '중', '이슈 생성', 'CI/CD 파이프라인', '브랜치 복제', '저장소 삭제', 37),
    (1846, 'Fork 후 Pull Request를 보내려면 먼저 해야 할 일은?', 2, '중', 'origin으로 직접 push', '포크한 저장소에 push', 'GitHub에서 Fork 취소', '새 브랜치 만들기', 37),
    (1847, 'GitHub에서 커밋을 다른 사람과 연동할 때 필요한 것은?', 3, '상', 'Email 등록', 'SSH 키 설정', 'GPG 서명 설정', 'Fork 설정', 37),
    (1848, 'GitHub 저장소를 비공개로 변경하려면 필요한 권한은?', 2, '상', 'Contributor', 'Owner', 'Collaborator', 'Reviewer', 37),
    (1849, 'GitHub 이슈 템플릿을 설정하는 파일 위치는?', 1, '상', '.github/ISSUE_TEMPLATE/', 'docs/ISSUE/', 'src/issue_template/', 'config/issues/', 37),
    (1850, 'GitHub에서 squash merge를 선택하는 주요 이유는?', 1, '상', '히스토리를 깔끔하게 유지하기 위해', '모든 브랜치를 삭제하기 위해', '병합 충돌을 강제 발생시키기 위해', '코드를 롤백하기 위해', 37),
    (1851, 'Git Hook은 언제 실행되는 스크립트인가?', 1, '하', '커밋, 푸시 등의 이벤트 시점', 'Git 설치 시점', '브랜치 삭제 시점', '저장소 복제 시점', 38),
    (1852, 'Git Hook 스크립트는 기본적으로 어떤 언어로 작성되는가?', 2, '하', 'Python', 'Shell Script', 'JavaScript', 'Ruby', 38),
    (1853, 'Git 기본 Hook 파일들이 위치하는 디렉토리는?', 1, '하', '.git/hooks', '.hooks', 'hooks/', 'src/hooks', 38),
    (1854, '커밋 전에 코드 검사를 자동으로 실행하기 위해 사용하는 Hook은?', 2, '중', 'post-commit', 'pre-commit', 'pre-push', 'commit-msg', 38),
    (1855, '커밋 메시지를 검증하는 데 사용되는 Git Hook은?', 3, '중', 'pre-push', 'pre-commit', 'commit-msg', 'post-merge', 38),
    (1856, 'Git Hook은 기본적으로 어떤 파일 형태로 제공되는가?', 2, '중', '활성화된 스크립트 파일', '비활성화된 샘플 파일', 'JSON 설정 파일', 'Markdown 문서', 38),
    (1857, 'Git Hook을 전역(global)으로 설정할 수 있는 방법은?', 2, '상', 'global-hooks 디렉토리 지정', 'git config --global core.hooksPath', 'git global hook', 'hooksPath 설정파일 추가', 38),
    (1858, 'Git Hook 중 push가 되기 전에 마지막으로 실행되는 Hook은?', 2, '상', 'post-commit', 'pre-push', 'commit-msg', 'post-merge', 38),
    (1859, 'Git Hook을 이용해 push를 차단할 수 있는 방법은?', 3, '상', 'pre-commit 실패', 'commit-msg 실패', 'pre-push 실패', 'merge-fail', 38),
    (1860, 'Git Hook을 통해 코드 품질 관리를 하는 이유는?', 2, '상', '개발 속도 향상', '코드 일관성 유지', '브랜치 보호', '리포지토리 용량 감소', 38),
    (1861, 'Husky의 주요 목적은 무엇인가?', 1, '하', 'Git Hook 관리 자동화', 'Git 리포지토리 복제', '브랜치 자동 생성', '코드 리뷰 자동화', 38),
    (1862, 'Husky를 설치하는 기본 명령어는?', 1, '하', 'npm install husky', 'npm add git-hooks', 'npm install hooker', 'npm husky-setup', 38),
    (1863, 'Husky를 활성화하기 위해 필요한 명령어는?', 1, '하', 'npx husky install', 'npx husky start', 'npx git-hook', 'npm init husky', 38),
    (1864, 'Husky 설치 후 설정을 추가하는 파일은?', 2, '하', '.huskyrc', '.husky/', '.git/hooks', '.huskyconfig', 38),
    (1865, 'Husky를 통해 pre-commit Hook을 추가할 때 사용하는 명령어는?', 1, '중', 'npx husky add .husky/pre-commit ''npm test''', 'husky create pre-commit', 'git add pre-commit', 'npm run hook-add', 38),
    (1866, 'Husky 설치 시 .gitignore에 추가되지 않는 디렉토리는?', 1, '중', '.husky', 'node_modules', 'hooks', 'build', 38),
    (1867, 'Husky를 package.json scripts에 등록하는 이유는?', 2, '중', '테스트 실행', '자동 설치 보장', '버전 업데이트', 'gitignore 무시', 38),
    (1868, 'Husky를 설치 후 Git Hook이 정상 동작하지 않는 경우 우선 확인할 사항은?', 1, '상', '.git/hooks 디렉토리 존재 여부', 'npm 버전', 'Prettier 설치 여부', '프로젝트 크기', 38),
    (1869, 'Husky를 제거할 때 사용해야 하는 명령어는?', 1, '상', 'npm uninstall husky', 'npm remove git-hook', 'npm husky-remove', 'npx husky delete', 38),
    (1870, 'Husky 설치 시 Git Hook을 적용하기 위해 반드시 필요한 것은?', 2, '상', 'package-lock.json', 'git 초기화 (.git 존재)', 'node_modules 재설치', '브랜치 생성', 38),
    (1871, 'Husky로 pre-commit Hook을 추가하려면 필요한 명령어는?', 2, '하', 'husky create pre-commit', 'npx husky add .husky/pre-commit', 'git init hook', 'npm install hooker', 38),
    (1872, 'Husky를 사용하여 pre-push Hook을 설정할 때 경로는?', 1, '하', '.husky/pre-push', '.git/pre-push', 'hooks/pre-push', '.husky/hooks/pre-push', 38),
    (1873, 'Husky Hook 파일에서 실행할 명령어를 작성하는 파일은?', 2, '하', 'package.json', 'Hook script 파일', '.huskyrc', 'hooks-config.js', 38),
    (1874, 'Husky로 생성된 Hook 스크립트의 첫 번째 줄은 무엇이어야 하는가?', 2, '중', '#!/usr/bin/env husky', '#!/bin/bash', '#!node', '#!/usr/bin/env node', 38),
    (1875, 'Husky의 pre-commit Hook에서 실패할 경우 결과는?', 2, '중', '커밋이 진행된다', '커밋이 차단된다', '푸시가 진행된다', '브랜치가 변경된다', 38),
    (1876, 'Husky pre-push Hook에서 실패하면 어떤 일이 발생하는가?', 2, '중', 'push가 정상적으로 완료된다', 'push가 차단된다', 'pull이 시작된다', 'merge conflict 발생', 38),
    (1877, 'Husky로 여러 명령어를 pre-commit에 실행할 때 사용하는 방법은?', 2, '상', '쉼표로 구분', '&& 연산자 사용', '파이프(|) 사용', 'AND 명령어 사용', 38),
    (1878, 'Husky 설정 후 git commit 시 pre-commit이 동작하지 않는 경우 우선 확인할 것은?', 2, '상', 'node_modules 삭제 여부', '.husky 디렉토리 여부', 'npm 버전', 'yarn.lock 존재 여부', 38),
    (1879, 'Husky hook 파일에 명령어를 추가하는 기본 방법은?', 2, '상', 'scripts 항목 수정', '직접 shell script 수정', 'npm script 작성', 'git config 수정', 38),
    (1880, 'Husky를 통해 pre-commit에서 lint 검사를 실행할 때 가장 일반적인 방법은?', 2, '상', 'npm test', 'npm run lint', 'npm run build', 'npm install lint', 38),
    (1881, 'lint-staged의 주요 목적은 무엇인가?', 2, '하', '전체 코드 linting', '스테이징된 파일만 linting', '빌드 최적화', '버전 관리', 38),
    (1882, 'lint-staged를 설치하는 명령어는?', 1, '하', 'npm install lint-staged', 'npm install lint-stage', 'npm add staged-lint', 'npm install pre-lint', 38),
    (1883, 'lint-staged 설정을 추가할 수 있는 파일은?', 2, '하', '.lintstagedrc', 'package.json', '.lintstage', '.stagedlint', 38),
    (1884, 'lint-staged를 사용할 때 파일 패턴을 설정하는 이유는?', 2, '중', '전체 파일 적용', '변경된 파일만 지정 작업 적용', 'Git 히스토리 추적', '버전 롤백', 38),
    (1885, 'lint-staged 설정에서 JavaScript 파일에 ESLint를 적용하려면 어떻게 작성하는가?', 1, '중', '"*.js": "eslint"', '"*.js": "prettier"', '"*.js": "node"', '"*.js": "test"', 38),
    (1886, 'lint-staged가 적용되는 파일 범위는?', 2, '중', 'Git에 커밋된 모든 파일', '스테이지된 파일', '로컬 디렉토리 전체', '리포지토리 전체', 38),
    (1887, 'lint-staged에서 여러 명령어를 실행하려면 어떻게 설정하는가?', 2, '상', '쉼표로 구분', '배열로 설정', '공백으로 구분', '세미콜론으로 구분', 38),
    (1888, 'lint-staged를 통해 commit 전에 파일 포맷팅을 적용하려면 사용하는 명령어는?', 1, '상', 'prettier --write', 'eslint --fix', 'lint --stage', 'node --format', 38),
    (1889, 'lint-staged 설정을 .lintstagedrc로 분리하는 이유는?', 1, '상', '설정 관리 편의성', 'CI/CD 통합', '성능 향상', 'Git Hook 자동화', 38),
    (1890, 'lint-staged를 사용할 때 실패한 파일이 있을 경우 커밋은 어떻게 되는가?', 2, '상', '커밋 진행', '커밋 차단', '푸시 차단', '브랜치 변경', 38),
    (1891, 'Husky와 lint-staged를 함께 사용하는 주된 이유는?', 2, '하', '전체 파일에 lint 적용', '스테이징된 파일에만 lint 및 포맷 적용', '브랜치 보호', '리포지토리 삭제', 38),
    (1892, 'lint-staged를 실행하는 위치로 가장 적합한 Git Hook은?', 3, '하', 'post-merge', 'pre-push', 'pre-commit', 'post-commit', 38),
    (1893, 'Husky로 lint-staged를 pre-commit에 연결하는 방법은?', 2, '하', 'npm script 등록', 'npx husky add .husky/pre-commit ''npx lint-staged''', 'git push 설정', 'prettier 설정', 38),
    (1894, 'lint-staged 실행 실패 시 커밋은 어떻게 되는가?', 2, '중', '커밋 진행', '커밋 차단', '브랜치 변경', 'push 진행', 38),
    (1895, 'lint-staged 설정 파일에 여러 명령어를 적용할 때 사용하는 자료형은?', 2, '중', 'Object', 'Array', 'String', 'Number', 38),
    (1896, 'Husky 설정 없이 lint-staged만 설치했을 경우 발생하는 문제는?', 1, '중', 'Hook이 작동하지 않음', '빌드 실패', '버전 충돌', '리포지토리 삭제', 38),
    (1897, 'lint-staged의 실행 명령어를 npx를 통해 바로 실행하려면 필요한 것은?', 2, '상', 'package.json scripts', 'npx lint-staged', 'git lint', 'npm run lint-stage', 38),
    (1898, 'Husky의 pre-commit Hook 스크립트에서 lint-staged를 호출할 때 기본 사용 방법은?', 2, '상', 'npm run lint', 'npx lint-staged', 'eslint staged', 'prettier staged', 38),
    (1899, 'lint-staged가 처리하는 파일은 기본적으로 어떤 상태인가?', 2, '상', 'untracked', 'staged', 'committed', 'ignored', 38),
    (1900, 'Husky + lint-staged 통합 설정이 잘 작동하면 어떤 이점이 있는가?', 2, '상', '커밋 속도 향상', '코드 품질 유지와 일관성 확보', '브랜치 삭제 자동화', '파일 무결성 검사', 38),
    (1901, 'Java에서 정수형 기본 타입으로 올바른 것은?', 1, '하', 'int', 'Integer', 'float', 'char', 39),
    (1902, 'Java에서 문자를 저장하는 자료형은?', 1, '하', 'char', 'String', 'int', 'boolean', 39),
    (1903, 'Java 프로그램의 시작점이 되는 메서드는?', 1, '하', 'main', 'start', 'run', 'launch', 39),
    (1904, '다음 중 Java에서 기본형 타입이 아닌 것은?', 3, '중', 'boolean', 'double', 'String', 'char', 39),
    (1905, '기본형 타입과 매핑되는 래퍼 클래스가 틀린 것은?', 4, '중', 'int - Integer', 'boolean - Boolean', 'double - Double', 'char - Characterized', 39),
    (1906, 'Java에서 long 타입 리터럴을 올바르게 표기한 것은?', 3, '중', '1000', '1000l', '1000L', '1000.0', 39),
    (1907, '다음 중 char 타입 리터럴로 유효하지 않은 것은?', 4, '상', '''A''', '''\u0041''', '''\n''', '"A"', 39),
    (1908, 'byte와 관련된 설명으로 틀린 것은?', 4, '상', '-128 ~ 127 범위', '8비트 크기', '기본값은 0', '음수를 저장할 수 없다', 39),
    (1909, '다음 중 자동 형변환이 발생하는 경우는?', 2, '상', 'int → byte', 'char → int', 'double → float', 'long → int', 39),
    (1910, 'Java에서 변수를 선언할 수 없는 예는?', 2, '상', 'int _val;', 'float %rate;', 'double value1;', 'char letter;', 39),
    (1911, 'Java에서 while문과 do-while문의 차이로 옳은 것은?', 3, '하', '둘 다 조건이 앞에 온다', 'while은 한 번은 반드시 실행된다', 'do-while은 조건이 뒤에 온다', 'do-while은 조건 없이 반복된다', 39),
    (1912, 'for문에서 조건이 false일 경우 어떻게 되는가?', 3, '하', '무한 루프에 빠진다', '한 번은 실행된다', '아예 실행되지 않는다', '예외가 발생한다', 39),
    (1913, '다음 중 break문의 올바른 사용 목적은?', 1, '하', '루프를 중단한다', '조건문을 생략한다', '예외 처리를 한다', '다음 루프로 건너뛴다', 39),
    (1914, 'continue 문을 사용하면 어떻게 되는가?', 2, '중', '루프를 종료한다', '해당 루프의 나머지를 건너뛴다', '조건문을 무시한다', '에러가 발생한다', 39),
    (1915, '다음 중 조건문으로만 사용되는 것은?', 3, '중', 'for', 'while', 'if', 'switch', 39),
    (1916, 'switch문에서 case 다음에 올 수 없는 타입은?', 3, '중', 'int', 'char', 'boolean', 'String', 39),
    (1917, '중첩 for문을 사용할 때 고려해야 할 사항은?', 3, '상', '무조건 속도가 빨라진다', '루프가 독립적으로 실행된다', '전체 반복 횟수 증가', '조건문을 생략할 수 있다', 39),
    (1918, 'Java의 향상된 for문은 어떤 컬렉션에 사용 가능한가?', 4, '상', '배열', 'List', 'Set', '모두 가능', 39),
    (1919, '다음 중 무한 루프를 만드는 코드로 올바른 것은?', 4, '상', 'for(;;)', 'while(true)', 'do{}while(true)', '모두 가능', 39),
    (1920, 'if-else if-else 구조에서 else는 언제 실행되는가?', 3, '상', '항상 실행된다', '조건이 true일 때 실행', '모든 조건이 false일 때', '처음 조건이 false일 때', 39),
    (1921, '객체 지향 프로그래밍의 4대 특징 중 하나가 아닌 것은?', 4, '하', '상속', '추상화', '캡슐화', '동기화', 39),
    (1922, '클래스와 객체의 관계로 올바른 것은?', 1, '하', '객체는 클래스의 인스턴스이다', '클래스는 객체의 결과물이다', '객체는 설계도이다', '클래스는 객체의 조합이다', 39),
    (1923, '생성자의 특징으로 틀린 것은?', 2, '하', '클래스 이름과 동일', '리턴 타입이 있다', '객체 생성 시 호출', '오버로딩 가능', 39),
    (1924, '오버로딩의 조건으로 올바른 것은?', 1, '중', '매개변수 개수 또는 타입이 달라야 한다', '리턴 타입만 다르면 된다', '메서드 이름과 타입 모두 달라야 한다', '같은 이름, 같은 매개변수', 39),
    (1925, '오버라이딩의 특징은?', 1, '중', '동일한 이름과 시그니처를 사용', '다른 이름을 사용', '다른 리턴 타입 사용', 'private 메서드 가능', 39),
    (1926, 'abstract 키워드를 사용할 수 없는 곳은?', 3, '중', '클래스', '메서드', '필드', '인터페이스', 39),
    (1927, '인터페이스의 특징은?', 1, '상', '다중 구현 가능', '필드를 가질 수 있다', '생성자를 가질 수 있다', '메서드 구현 필수', 39),
    (1928, 'final 클래스의 특징은?', 3, '상', '상속 가능', '객체 생성 불가', '상속 불가', '변수로만 사용', 39),
    (1929, 'super 키워드는 무엇을 참조하는가?', 2, '상', '현재 클래스', '부모 클래스', '자식 클래스', '추상 클래스', 39),
    (1930, 'this 키워드의 역할은?', 3, '상', '클래스 이름 참조', '정적 변수 참조', '현재 객체 참조', '부모 객체 참조', 39),
    (1931, 'List의 특징으로 올바른 것은?', 3, '하', '중복 불가', '순서 없음', '중복 허용', '정렬 필수', 39),
    (1932, 'Set의 특징으로 올바른 것은?', 3, '하', '중복 허용', '순서 보장', '중복 불허', '키-값 저장', 39),
    (1933, 'Map은 어떤 구조인가?', 1, '하', 'key-value', 'index-value', 'key-key', 'value-value', 39),
    (1934, '다음 중 List를 구현하지 않는 것은?', 4, '중', 'ArrayList', 'LinkedList', 'Vector', 'HashMap', 39),
    (1935, 'HashMap과 TreeMap의 차이는?', 2, '중', 'HashMap은 정렬된다', 'TreeMap은 정렬 지원', '둘 다 정렬된다', 'TreeMap은 중복 허용', 39),
    (1936, '제네릭을 사용하는 이유는?', 2, '중', '코드 축소', '타입 안정성 확보', '메모리 절약', '속도 향상', 39),
    (1937, '다음 중 제네릭 타입 선언이 올바른 것은?', 2, '상', 'List<int>', 'List<Object>', 'List<>', 'List{String}', 39),
    (1938, 'Iterator의 주요 기능은?', 2, '상', '요소 정렬', '요소 반복', '요소 삭제', '요소 추가', 39),
    (1939, 'List에서 요소를 삽입할 수 있는 메서드는?', 1, '상', 'add()', 'put()', 'insert()', 'append()', 39),
    (1940, 'HashSet은 어떤 특성을 가진가?', 3, '상', '순서 보장', '중복 허용', '중복 제거', '키-값 구조', 39),
    (1941, 'IOException은 어떤 예외인가?', 1, '하', 'Checked 예외', 'Unchecked 예외', '컴파일 오류', '논리 오류', 39),
    (1942, 'try-catch-finally에서 finally 블록은 언제 실행되는가?', 1, '하', '항상', 'catch 실행 시', '예외 없을 때만', '조건부 실행', 39),
    (1943, 'throws 키워드는 무엇을 의미하는가?', 2, '하', '예외 발생', '예외 전달', '예외 제거', '예외 종료', 39),
    (1944, 'catch 블록은 무엇을 처리하는가?', 2, '중', '정상 종료', '예외 처리', '오류 출력', '파일 쓰기', 39),
    (1945, '예외 발생 없이도 finally가 실행되는가?', 1, '중', '예', '아니오', '조건에 따라 다름', '컴파일러가 결정', 39),
    (1946, '예외 클래스의 최상위 클래스는?', 1, '중', 'Throwable', 'Exception', 'RuntimeException', 'Error', 39),
    (1947, 'FileReader는 어떤 스트림에 속하는가?', 1, '상', '입력 스트림', '출력 스트림', '버퍼 스트림', '바이트 스트림', 39),
    (1948, '파일에 내용을 쓰는 스트림은?', 2, '상', 'FileInputStream', 'FileOutputStream', 'BufferedReader', 'Scanner', 39),
    (1949, 'BufferedReader의 주요 기능은?', 2, '상', '파일 쓰기', '라인 단위 읽기', '바이트 읽기', '객체 직렬화', 39),
    (1950, '예외 처리에서 다중 catch를 사용하면?', 3, '상', '모든 예외가 무시됨', '하나의 예외만 처리 가능', '여러 예외를 개별 처리', 'finally가 생략됨', 39),
    (1951, 'Python에서 변수 이름으로 사용할 수 없는 것은?', 3, '하', '_value', 'value1', '1value', 'value_1', 40),
    (1952, '다음 중 Python에서 문자열을 나타내는 것은?', 4, '하', '''Hello''', '"World"', 'str(''Test'')', 'All of the above', 40),
    (1953, '다음 중 숫자형에 해당하지 않는 것은?', 3, '하', 'int', 'float', 'str', 'complex', 40),
    (1954, 'float 자료형의 기본 특징으로 올바른 것은?', 2, '중', '정수만 저장', '소수점 표현 가능', '문자 저장 가능', '참/거짓만 저장', 40),
    (1955, '불리언(Boolean) 타입의 기본값이 아닌 것은?', 3, '중', 'True', 'False', 'None', '0 == 1', 40),
    (1956, '다음 중 type(5.0)의 반환 값은?', 2, '중', '<class ''int''>', '<class ''float''>', '<type ''double''>', '<class ''complex''>', 40),
    (1957, '문자열 여러 줄을 표현할 수 있는 구문은?', 3, '상', '''''''문자열''''''', '"""문자열"""', '모두 해당', '''문자열''', 40),
    (1958, 'Python에서 자료형 확인 시 사용하는 함수는?', 2, '상', 'typeof()', 'type()', 'data()', 'kind()', 40),
    (1959, '다음 중 유효한 정수 리터럴 표기는?', 2, '상', '0123', '0b1010', '0x1G', '10.0', 40),
    (1960, '다음 중 Python에서 기본 제공되는 자료형은?', 4, '상', 'bool', 'int', 'float', '모두 해당', 40),
    (1961, 'Python에서 if 조건문을 끝내는 구문은?', 3, '하', 'endif', 'fi', '콜론(:)', 'done', 40),
    (1962, 'Python에서 반복을 위해 사용되는 키워드는?', 3, '하', 'repeat', 'loop', 'for', 'next', 40),
    (1963, '다음 중 조건문으로 올바른 것은?', 3, '하', 'if x > 0 then', 'if (x > 0)', 'if x > 0:', 'x > 0 if', 40),
    (1964, 'while 문에서 조건이 False이면?', 3, '중', '무한 반복된다', '한 번은 실행된다', '실행되지 않는다', '오류 발생', 40),
    (1965, 'range(3)의 결과는?', 2, '중', '[1, 2, 3]', '[0, 1, 2]', '[0, 1, 2, 3]', '[3]', 40),
    (1966, 'continue 문을 사용할 경우 어떻게 되는가?', 3, '중', '루프가 종료됨', '루프가 중단됨', '현재 반복만 건너뜀', '에러 발생', 40),
    (1967, 'for 문에서 변수명을 정의할 수 없는 경우는?', 2, '상', 'for x in range(5):', 'for 1x in range(5):', 'for _ in range(5):', 'for item in items:', 40),
    (1968, '다음 중 중첩 조건문을 작성한 코드로 올바른 것은?', 1, '상', 'if x > 1:  if y > 1:', 'if x > 1: if y > 1', 'if (x > 1) then if (y > 1)', 'if x > 1, if y > 1:', 40),
    (1969, 'break 문은 어떤 상황에서 사용되는가?', 3, '상', '변수를 종료할 때', '조건을 변경할 때', '루프를 즉시 종료할 때', '코드를 생략할 때', 40),
    (1970, 'while 루프에서 무한 루프를 만드는 구문은?', 2, '상', 'while (True):', 'while True:', 'while ''yes'':', 'while 1==1:', 40),
    (1971, 'Python에서 함수를 정의할 때 사용하는 키워드는?', 2, '하', 'function', 'def', 'define', 'lambda', 40),
    (1972, '기본 매개변수를 사용하는 함수 정의는?', 3, '하', 'def func(x: 1):', 'def func[x=1]:', 'def func(x=1):', 'func = def(x=1)', 40),
    (1973, '값을 반환하는 함수는 어떤 키워드를 사용하는가?', 1, '하', 'return', 'yield', 'output', 'send', 40),
    (1974, '모듈을 불러올 때 사용하는 키워드는?', 3, '중', 'include', 'require', 'import', 'load', 40),
    (1975, 'math 모듈의 sqrt 함수는 무엇을 반환하는가?', 2, '중', '제곱', '제곱근', '2배', '로그값', 40),
    (1976, '모듈의 일부 함수만 가져오고 싶을 때 사용하는 문법은?', 2, '중', 'include function from module', 'from module import function', 'require module.function', 'get module::function', 40),
    (1977, 'lambda 함수의 특징은?', 3, '상', '여러 줄 가능', '반복문 포함 가능', '익명 함수', '모듈 전용', 40),
    (1978, '함수 내에서 전역 변수 사용 시 필요한 키워드는?', 3, '상', 'this', 'var', 'global', 'globalize', 40),
    (1979, '파이썬 표준 내장 함수가 아닌 것은?', 4, '상', 'len()', 'sum()', 'map()', 'sqrt()', 40),
    (1980, '패키지를 가져올 때 사용하는 폴더 기준 파일은?', 3, '상', '__main__.py', 'package.py', '__init__.py', 'module.py', 40),
    (1981, '리스트의 기본 특징은?', 3, '하', '중복 불가', '정렬 자동', '순서 보장', '딕셔너리와 동일', 40),
    (1982, '다음 중 튜플의 특징으로 옳은 것은?', 3, '하', '수정 가능', '중복 불가', '불변(immutable)', 'key-value 저장', 40),
    (1983, '세트(set)의 주요 특징은?', 3, '하', '중복 허용', '정렬 유지', '중복 제거', '순서 유지', 40),
    (1984, '딕셔너리(dictionary)의 키로 사용할 수 없는 것은?', 3, '중', 'int', 'str', 'list', 'tuple', 40),
    (1985, '리스트에서 요소 추가 시 사용하는 메서드는?', 3, '중', 'add()', 'insert()', 'append()', 'push()', 40),
    (1986, '리스트에서 슬라이싱을 통해 2개 요소를 추출하는 문법은?', 2, '중', 'list(1:3)', 'list[1:3]', 'list(1,3)', 'list{1:3}', 40),
    (1987, '다음 중 세트 연산에 해당하는 기호는?', 2, '상', '+', '&', '*', '-', 40),
    (1988, '딕셔너리에서 키와 값을 모두 가져오는 메서드는?', 3, '상', 'keys()', 'values()', 'items()', 'get()', 40),
    (1989, '튜플의 요소를 수정하려 하면?', 2, '상', '가능하다', '에러 발생', '삭제만 가능', '빈 튜플만 수정 가능', 40),
    (1990, '딕셔너리에서 존재하지 않는 키 접근 시 사용하는 메서드는?', 2, '상', 'access()', 'get()', 'search()', 'query()', 40),
    (1991, '파일을 읽기 모드로 열기 위한 코드는?', 1, '하', 'open(''file.txt'', ''r'')', 'open(''file.txt'', ''w'')', 'read(''file.txt'')', 'file(''file.txt'')', 40),
    (1992, '텍스트 파일에 데이터를 쓰는 함수는?', 1, '하', 'write()', 'print()', 'input()', 'append()', 40),
    (1993, '파일을 다 연 후 반드시 해야 할 작업은?', 3, '하', 'save()', 'exit()', 'close()', 'quit()', 40),
    (1994, '예외 처리에서 사용하는 기본 구문은?', 2, '중', 'try-catch', 'try-except', 'do-catch', 'if-error', 40),
    (1995, '다음 중 IOError를 발생시킬 수 있는 상황은?', 2, '중', '문법 오류', '파일 없음', '변수 없음', '리스트 인덱스 초과', 40),
    (1996, 'finally 블록의 역할은?', 3, '중', '예외가 발생했을 때만 실행', '예외가 없을 때만 실행', '항상 실행', '조건에 따라 실행', 40),
    (1997, '파일을 한 줄씩 읽는 함수는?', 2, '상', 'read()', 'readline()', 'readlines()', 'nextline()', 40),
    (1998, '파일을 한꺼번에 읽어 리스트로 반환하는 함수는?', 3, '상', 'read()', 'readline()', 'readlines()', 'lines()', 40),
    (1999, '예외 객체를 변수로 받는 방법은?', 4, '상', 'except e:', 'except as e:', 'except Exception:', 'except Exception as e:', 40),
    (2000, '파일을 안전하게 열고 자동으로 닫는 방법은?', 1, '상', 'with open() as f:', 'safe open()', 'file auto()', 'open+close()', 40),
    (2001, 'JavaScript에서 변수를 선언할 수 없는 키워드는?', 4, '하', 'let', 'const', 'var', 'define', 41),
    (2002, '다음 중 JavaScript의 숫자형 타입은?', 1, '하', 'Number', 'Int', 'Float', 'Decimal', 41),
    (2003, '문자열을 나타내는 방법으로 올바르지 않은 것은?', 4, '하', '''Hello''', '"Hello"', '`Hello`', '<Hello>', 41),
    (2004, 'undefined와 null의 차이에 대한 설명으로 옳은 것은?', 2, '중', '둘 다 같은 의미이다', 'undefined는 값이 할당되지 않음', 'null은 정의되지 않음', 'undefined는 명시적 초기화', 41),
    (2005, 'typeof null의 결과는?', 1, '중', 'object', 'null', 'undefined', 'string', 41),
    (2006, 'JavaScript에서 템플릿 리터럴은 무엇으로 묶는가?', 3, '중', '''', '"', '`', '~', 41),
    (2007, 'NaN은 어떤 상황에서 발생하는가?', 1, '상', '숫자 나누기 문자', '0 나누기 0', '문자 더하기 숫자', 'undefined와 연산', 41),
    (2008, 'const로 선언된 변수는 어떤 특징이 있는가?', 3, '상', '재선언 가능', '값 변경 가능', '블록 스코프', '자동 초기화', 41),
    (2009, '다음 중 falsy 값이 아닌 것은?', 4, '상', '0', '''''', 'false', '''false''', 41),
    (2010, 'JavaScript에서 세미콜론(;)은 언제 필수인가?', 3, '상', '항상', '절대로 필요 없음', '문장 끝', '객체 안에서', 41),
    (2011, 'JavaScript에서 조건문 if를 작성할 때 사용하는 키워드는?', 2, '하', 'when', 'if', 'cond', 'case', 41),
    (2012, '조건문에서 여러 조건을 연결하는 연산자는?', 3, '하', '&', '|', '&&', '==', 41),
    (2013, 'switch 문에서 각 조건을 나타내는 키워드는?', 1, '하', 'case', 'when', 'option', 'check', 41),
    (2014, 'for 루프를 종료하는 키워드는?', 4, '중', 'skip', 'stop', 'continue', 'break', 41),
    (2015, '반복문의 조건을 건너뛰고 다음 반복으로 이동하는 키워드는?', 3, '중', 'skip', 'next', 'continue', 'redo', 41),
    (2016, 'while 반복문의 조건이 false이면?', 3, '중', '무한 반복', '한 번 실행', '실행 안 됨', '오류 발생', 41),
    (2017, 'do...while 루프의 특징으로 옳은 것은?', 3, '상', '조건을 먼저 검사', '조건이 true면 반복 안 함', '무조건 한 번 실행', '사용 불가', 41),
    (2018, 'switch 문에서 break를 생략하면?', 3, '상', '에러 발생', '기본값 실행', '다음 case까지 실행', '루프 종료', 41),
    (2019, '다음 중 삼항 연산자의 형식으로 올바른 것은?', 1, '상', '조건 ? 참 : 거짓', '조건 : 참 ? 거짓', '조건 ? 거짓 : 참', 'if ? then : else', 41),
    (2020, 'for (let i = 0; i < 5; i++)에서 i++의 의미는?', 2, '상', 'i를 1로 설정', 'i를 1씩 증가', 'i를 출력', 'i를 감소', 41),
    (2021, 'JavaScript에서 함수를 선언하는 키워드는?', 2, '하', 'method', 'function', 'define', 'func', 41),
    (2022, '함수를 실행하려면 어떻게 해야 하는가?', 3, '하', 'call()', 'invoke()', '함수명()', 'do()', 41),
    (2023, '함수 내에서 사용된 변수는 기본적으로 어떤 스코프를 가지는가?', 2, '하', '전역', '지역', '블록', '클래스', 41),
    (2024, '화살표 함수의 기본 형태로 올바른 것은?', 2, '중', 'function => {}', '() => {}', '-> {}', '{} => ()', 41),
    (2025, '함수 표현식은 어떤 변수 키워드와 함께 자주 사용되는가?', 4, '중', 'let', 'const', 'var', '모두 해당', 41),
    (2026, 'return 키워드의 기능은?', 2, '중', '함수를 종료', '값을 반환', '다음 반복으로 이동', '코드를 건너뜀', 41),
    (2027, '화살표 함수에서 this는 무엇을 참조하는가?', 4, '상', '전역 객체', '함수 자신', '호출 컨텍스트', '화살표 함수는 this를 가지지 않음', 41),
    (2028, '즉시 실행 함수(IIFE)의 형식으로 맞는 것은?', 3, '상', 'function(){}', '() => {}', '(function() {})()', '{}();', 41),
    (2029, '함수에서 매개변수를 생략하면?', 2, '상', '에러 발생', 'undefined로 처리', '0으로 초기화', 'null로 초기화', 41),
    (2030, '함수 내부에서 정의된 함수는 어떤 범위를 가지는가?', 3, '상', '전역', '함수 외부', '지역', 'DOM', 41),
    (2031, 'JavaScript에서 배열을 생성하는 방법으로 옳은 것은?', 1, '하', 'var a = [];', 'var a = {};', 'var a = ()', 'var a = <>;', 41),
    (2032, '객체에서 속성에 접근하는 방법은?', 2, '하', 'obj->key', 'obj.key', 'obj-key', 'obj:key', 41),
    (2033, '다음 중 배열에 요소를 추가하는 메서드는?', 1, '하', 'push()', 'pop()', 'shift()', 'splice()', 41),
    (2034, '객체의 속성 값을 삭제하는 키워드는?', 2, '중', 'remove', 'delete', 'clear', 'drop', 41),
    (2035, '배열의 모든 요소에 대해 반복 실행하는 메서드는?', 2, '중', 'map()', 'forEach()', 'filter()', 'reduce()', 41),
    (2036, '객체의 모든 키를 배열로 반환하는 메서드는?', 2, '중', 'Object.values()', 'Object.keys()', 'Object.entries()', 'Object.map()', 41),
    (2037, '배열에서 요소를 제거하는 pop()은 어느 쪽 요소를 제거하는가?', 3, '상', '처음', '중간', '마지막', '랜덤', 41),
    (2038, '배열의 길이를 반환하는 속성은?', 3, '상', 'size', 'count', 'length', 'items', 41),
    (2039, '객체의 속성과 값을 모두 배열 형태로 반환하는 메서드는?', 3, '상', 'Object.keys()', 'Object.values()', 'Object.entries()', 'Object.toArray()', 41),
    (2040, '배열의 복사를 위한 메서드로 적절한 것은?', 1, '상', 'slice()', 'splice()', 'pop()', 'map()', 41),
    (2041, 'HTML 요소를 JavaScript로 가져올 때 사용하는 메서드는?', 3, '하', 'getElement()', 'query()', 'getElementById()', 'fetchElement()', 41),
    (2042, '다음 중 이벤트 리스너 등록 메서드는?', 3, '하', 'addEvent()', 'setEvent()', 'addEventListener()', 'eventListen()', 41),
    (2043, '버튼 클릭 시 실행되는 이벤트 타입은?', 3, '하', 'hover', 'mousedown', 'click', 'submit', 41),
    (2044, '다음 중 innerText와 유사한 속성은?', 3, '중', 'textValue', 'htmlText', 'textContent', 'innerHTML', 41),
    (2045, '이벤트 객체에서 발생한 요소를 참조하는 속성은?', 1, '중', 'target', 'source', 'caller', 'element', 41),
    (2046, '이벤트 전파를 막는 메서드는?', 2, '중', 'preventDefault()', 'stopPropagation()', 'cancelEvent()', 'blockEvent()', 41),
    (2047, 'DOMContentLoaded 이벤트는 언제 발생하는가?', 3, '상', '페이지 로딩 시작 시', '스크립트 로딩 완료 시', 'DOM 트리 완성 시', '이미지 로딩 완료 시', 41),
    (2048, 'innerHTML 속성의 특징으로 옳은 것은?', 3, '상', '보안에 강함', '텍스트만 출력', 'HTML 태그 포함 출력', '읽기 전용', 41),
    (2049, 'HTML 요소 클래스 추가 시 사용하는 메서드는?', 4, '상', 'addClass()', 'appendClass()', 'classAdd()', 'classList.add()', 41),
    (2050, '폼 제출 시 기본 동작을 막으려면?', 2, '상', 'event.stopPropagation()', 'event.preventDefault()', 'return false', 'event.block()', 41),
    (2051, 'Kotlin에서 변수를 선언하는 키워드로 올바른 것은?', 1, '하', 'var', 'val', 'let', '변수', 42),
    (2052, '값을 변경할 수 없는 변수 선언 키워드는?', 1, '하', 'val', 'var', 'let', 'const', 42),
    (2053, 'Kotlin에서 문자열을 나타내는 타입은?', 2, '하', 'Char', 'String', 'Text', 'str', 42),
    (2054, 'Kotlin에서 자료형을 명시적으로 지정하려면?', 1, '중', 'x: Int = 10', 'Int x = 10', 'x := 10', 'x = Int(10)', 42),
    (2055, 'Kotlin에서 여러 줄 문자열을 표현할 때 사용하는 기호는?', 1, '중', '"""', '''''''', '###', '"', 42),
    (2056, 'val로 선언된 변수의 특징은?', 2, '중', '재할당 가능', '값 변경 불가', '타입 미지정 불가', '모든 경우에 final', 42),
    (2057, '다음 중 올바른 변수 선언은?', 2, '상', 'var 1name = "John"', 'val age = 25', 'val true = 1', 'var %value = 10', 42),
    (2058, 'Kotlin에서 자료형을 자동으로 추론하는 기능은?', 4, '상', 'inference', 'autoType', 'smart cast', 'type inference', 42),
    (2059, 'Kotlin에서 백틱(`)을 사용하는 경우는?', 3, '상', '문자열 템플릿', '람다식', '함수명에 예약어 사용', '주석 처리', 42),
    (2060, 'Kotlin에서 문자열 템플릿을 사용하는 구문은?', 2, '상', '\${변수}', '${변수}', '%{변수}', '&{변수}', 42),
    (2061, 'Kotlin에서 조건문 if는 어떤 값을 반환할 수 있는가?', 3, '하', '문자만', '값을 반환하지 않음', '표현식으로 사용 가능', '함수로만 사용 가능', 42),
    (2062, 'Kotlin의 when 문은 어떤 역할을 하는가?', 2, '하', '루프', 'switch 문과 유사', '함수 호출', '클래스 정의', 42),
    (2063, 'while 루프의 조건이 false이면?', 3, '하', '무한 반복', '에러 발생', '실행되지 않음', '무조건 한 번 실행', 42),
    (2064, 'Kotlin에서 do...while 루프는 어떤 특징이 있는가?', 2, '중', '조건이 먼저 평가됨', '조건이 false여도 한 번은 실행', '조건 없이 반복', '무한 루프 전용', 42),
    (2065, '반복문에서 continue 키워드의 역할은?', 2, '중', '루프 종료', '현재 반복을 건너뜀', '반복 시작', '조건 무시', 42),
    (2066, 'for 루프에서 in 키워드는 무엇을 의미하는가?', 1, '중', '범위 반복', '조건식', '함수 호출', 'null 체크', 42),
    (2067, 'when 문에서 else는 어떤 의미인가?', 2, '상', '예외 발생', '기본 케이스', '루프 종료', '조건 생략', 42),
    (2068, 'Kotlin의 반복문에서 인덱스를 함께 얻는 함수는?', 1, '상', 'withIndex()', 'withCount()', 'indexed()', 'zip()', 42),
    (2069, 'Kotlin에서 step을 사용하는 경우는?', 2, '상', '무한 루프', '스텝 수 지정', '조건 생략', '중첩 반복문', 42),
    (2070, '반복문의 범위 지정 시 .. 연산자의 의미는?', 3, '상', '제외 범위', '오름차순 반복', '포함 범위', '무한 반복', 42),
    (2071, 'Kotlin에서 함수를 정의할 때 사용하는 키워드는?', 2, '하', 'define', 'fun', 'method', 'function', 42),
    (2072, 'Kotlin의 람다 표현식은 어떤 기호로 시작하는가?', 2, '하', '->', '{ }', 'lambda', '=>', 42),
    (2073, '기본값이 있는 함수 매개변수를 선언할 때 사용하는 문법은?', 1, '하', 'param: Int = 0', 'Int param = 0', 'param = Int(0)', 'param = 0 : Int', 42),
    (2074, 'Unit은 어떤 함수의 반환 타입인가?', 3, '중', '정수 반환', '문자열 반환', '반환값 없음', '예외 반환', 42),
    (2075, '람다식에서 it 키워드는 어떤 의미인가?', 2, '중', '반복자', '첫 번째 매개변수', '문자열', '클래스명', 42),
    (2076, '고차 함수란?', 4, '중', '클래스를 반환하는 함수', '람다만 사용 가능한 함수', '다형성 함수', '함수를 인자로 받거나 반환하는 함수', 42),
    (2077, '람다를 명시적으로 변수에 저장할 때 타입은?', 2, '상', 'Lambda', '() -> Unit', 'void', 'Func', 42),
    (2078, '기본 매개변수와 이름 있는 인자를 함께 사용할 수 있는가?', 1, '상', '가능하다', '불가능하다', '경고 발생', '에러 발생', 42),
    (2079, '람다식에서 명시적으로 반환값을 지정하려면?', 3, '상', 'return 사용', 'it 키워드 사용', 'last 표현식 사용', 'result 사용', 42),
    (2080, '람다에서 여러 줄을 사용할 때 마지막 줄의 의미는?', 3, '상', '무시됨', '예외 발생', '반환값으로 사용', '출력만 됨', 42),
    (2081, 'Kotlin에서 클래스를 정의할 때 사용하는 키워드는?', 3, '하', 'object', 'define', 'class', 'type', 42),
    (2082, '객체 생성 시 사용하는 키워드는?', 4, '하', 'instantiate', 'object', 'new', '없음', 42),
    (2083, '클래스에 기본 생성자를 선언하려면?', 1, '하', 'constructor()', 'fun()', 'init()', 'class {}', 42),
    (2084, 'init 블록은 언제 실행되는가?', 3, '중', '프로그램 시작 시', '클래스 로드 시', '객체 생성 시', '컴파일 시', 42),
    (2085, '프로퍼티의 getter/setter를 자동 생성하려면?', 2, '중', '변수를 private으로', 'val/var 선언', '함수 정의', '데이터 클래스 사용', 42),
    (2086, 'data class의 주요 목적은?', 3, '중', '함수 집합', 'UI 구성', '데이터 보관', '예외 처리', 42),
    (2087, '상속을 허용하려면 클래스 앞에 붙여야 하는 키워드는?', 1, '상', 'open', 'public', 'override', 'super', 42),
    (2088, '인터페이스 구현 시 사용하는 키워드는?', 4, '상', 'include', 'inherit', 'implement', 'override', 42),
    (2089, '싱글톤 객체 생성을 위한 키워드는?', 2, '상', 'new', 'object', 'this', 'static', 42),
    (2090, 'this 키워드는 무엇을 가리키는가?', 3, '상', '상속 클래스', '부모 클래스', '현재 인스턴스', '외부 클래스', 42),
    (2091, '널 값을 허용하는 타입은 어떻게 표현하는가?', 1, '하', 'Int?', 'Int!', 'Int*', 'nullable Int', 42),
    (2092, '리스트를 생성하는 기본 함수는?', 3, '하', 'list()', 'arrayList()', 'listOf()', 'new List()', 42),
    (2093, '널 안정성을 위한 연산자는?', 2, '하', '!!', '?.', '::', '?=', 42),
    (2094, '!! 연산자의 의미는?', 3, '중', 'null 허용', 'null 안전 호출', 'null 아님 단언', 'null 값 대입', 42),
    (2095, 'Kotlin에서 컬렉션을 변경 불가능하게 생성하려면?', 2, '중', 'mutableListOf()', 'listOf()', 'setOf()', 'mapOf()', 42),
    (2096, 'Map의 값을 가져오는 연산은?', 2, '중', 'map.get(key)', 'map[key]', 'map.value(key)', 'map->key', 42),
    (2097, '널 안정성 체크 후 기본값을 설정하려면 사용하는 연산자는?', 1, '상', '?:', '::', '!!', '&=', 42),
    (2098, 'filter 함수는 어떤 컬렉션 연산인가?', 3, '상', '정렬', '요소 제거', '조건에 맞는 요소 추출', '전체 복사', 42),
    (2099, 'Kotlin에서 안전 호출 연산자를 사용할 수 없는 곳은?', 4, '상', '변수', '함수 호출', '프로퍼티 접근', '클래스 정의', 42),
    (2100, '컬렉션 요소를 모두 순회하는 함수는?', 1, '상', 'forEach', 'loop', 'iterate', 'each()', 42),
    (2101, 'SQL에서 데이터를 조회할 때 사용하는 명령어는?', 2, '하', 'MERGE', 'SELECT', 'DROP', 'INSERT', 43),
    (2102, '특정 조건을 만족하는 행만 출력할 때 사용하는 SQL 키워드는?', 1, '하', 'WHERE', 'GROUP BY', 'HAVING', 'ORDER BY', 43),
    (2103, '테이블에서 중복된 값을 제거하여 출력할 때 사용하는 키워드는?', 2, '중', 'FILTER', 'DISTINCT', 'UNIQUE', 'NO_DUP', 43),
    (2104, 'SQL에서 컬럼 값을 기준으로 오름차순 정렬할 때 사용하는 명령어는?', 3, '중', 'SORT column', 'SORT BY column ASC', 'ORDER BY column ASC', 'ORDER ASC', 43),
    (2105, '두 테이블을 조인할 때 공통된 키를 기준으로 결합하는 방식은?', 2, '중', 'CROSS FILTER', 'INNER JOIN', 'UNION', 'OUTER JOIN', 43),
    (2106, 'SQL에서 NULL 값을 검사할 때 사용하는 조건은?', 4, '중', 'IS VOID', 'IS EMPTY', '= NULL', 'IS NULL', 43),
    (2107, '여러 행의 평균 값을 구하는 SQL 함수는?', 1, '하', 'AVG()', 'COUNT()', 'SUM()', 'MEAN()', 43),
    (2108, 'SQL에서 데이터를 삽입할 때 사용하는 명령은?', 2, '하', 'ADD ROW', 'INSERT INTO', 'PUSH VALUE', 'NEW ENTRY', 43),
    (2109, 'GROUP BY 절과 함께 사용되어 그룹 조건을 필터링하는 키워드는?', 2, '상', 'LIMIT', 'HAVING', 'ORDER', 'WHERE', 43),
    (2110, '테이블에서 특정 컬럼에만 인덱스를 생성하는 명령은?', 4, '상', 'ALTER TABLE', 'ADD PRIMARY', 'INSERT INDEX', 'CREATE INDEX', 43),
    (2111, 'SQL에서 조건에 맞는 최대값을 찾을 때 사용하는 함수는?', 3, '중', 'LIMIT()', 'TOP()', 'MAX()', 'HIGH()', 43),
    (2112, 'WHERE 절에서 여러 조건을 결합할 때 사용하는 연산자는?', 1, '하', 'AND', 'UNION', 'JOIN', 'WITH', 43),
    (2113, 'SQL에서 BETWEEN 연산자의 역할은?', 4, '중', '조건을 무시한다', '두 테이블을 연결한다', 'NULL 값을 제거한다', '범위 내 값을 찾는다', 43),
    (2114, 'LIKE 연산자에서 와일드카드 %의 의미는?', 2, '중', '빈 문자열', '임의의 문자열', '정확히 한 글자', '숫자만 포함', 43),
    (2115, 'SQL에서 서브쿼리를 사용할 수 없는 곳은?', 3, '상', 'FROM 절', 'WHERE 절', 'GROUP BY 절', 'SELECT 절', 43),
    (2116, 'PRIMARY KEY 제약 조건의 특징은?', 1, '중', '중복 불가 + NULL 불가', '중복 허용 + NULL 허용', '외래키 대상', '정렬 기준', 43),
    (2117, 'DEFAULT 제약 조건은 어떤 역할인가?', 3, '하', '외래키 설정', '고정된 상수 삽입', '값이 없을 때 기본값 설정', '항상 NULL 유지', 43),
    (2118, 'SQL에서 UPDATE 문의 목적은?', 1, '하', '기존 데이터를 수정한다', '뷰를 생성한다', '테이블을 삭제한다', '새 테이블을 만든다', 43),
    (2119, 'DELETE 명령과 TRUNCATE 명령의 차이점은?', 3, '상', 'DELETE는 뷰 삭제', 'DELETE는 무조건 전체 삭제', 'TRUNCATE는 로그 없이 전체 삭제', 'TRUNCATE는 SELECT 전용', 43),
    (2120, 'FOREIGN KEY의 주 역할은?', 3, '상', '테이블 간 자동 정렬', '값을 무작위 삽입', '다른 테이블의 레코드 참조', '인덱스 성능 향상', 43),
    (2121, 'SQL에서 GROUP BY와 함께 집계 함수가 아닌 것은?', 2, '중', 'AVG()', 'FORMAT()', 'COUNT()', 'SUM()', 43),
    (2122, 'SQL에서 여러 조건 중 하나만 만족하면 참이 되는 연산자는?', 3, '하', 'EXISTS', 'LIKE', 'OR', 'AND', 43),
    (2123, 'NULL 값을 가진 행을 제외하고 집계하려면 어떤 함수가 적절한가?', 2, '상', 'COUNT(ALL)', 'COUNT(column)', 'SUM(*)', 'COUNT(*)', 43),
    (2124, 'SQL에서 IN 연산자의 기능은?', 3, '중', '외래키 정의', '정렬 방식 지정', '여러 값 중 포함 여부 판단', '트랜잭션 시작', 43),
    (2125, 'DDL 명령어에 해당하지 않는 것은?', 4, '중', 'CREATE', 'ALTER', 'DROP', 'SELECT', 43),
    (2126, 'SQL에서 CREATE TABLE 구문에서 정의할 수 없는 것은?', 4, '하', '데이터 타입', '제약 조건', '컬럼 이름', '데이터 삽입값', 43),
    (2127, '테이블에서 컬럼을 제거하려면 사용하는 명령어는?', 1, '상', 'ALTER TABLE ... DROP COLUMN', 'DROP TABLE ... COLUMN', 'REMOVE COLUMN', 'DELETE COLUMN ...', 43),
    (2128, '두 개의 SELECT 결과를 합쳐 중복 없이 반환하는 연산자는?', 2, '중', 'JOIN', 'UNION', 'INTERSECT', 'CONNECT', 43),
    (2129, 'SQL에서 임시로 생성되어 사용 후 사라지는 객체는?', 1, '상', '뷰(View)', '인덱스(Index)', '저장 프로시저(Procedure)', '트리거(Trigger)', 43),
    (2130, 'WHERE 절에 서브쿼리를 사용할 때 대표적인 키워드는?', 3, '하', 'UPDATE', 'ORDER', 'IN', 'SET', 43),
    (2131, 'SQL에서 테이블을 완전히 삭제할 때 사용하는 명령어는?', 4, '하', 'ERASE TABLE', 'DELETE TABLE', 'REMOVE TABLE', 'DROP TABLE', 43),
    (2132, 'SQL에서 컬럼의 데이터 타입을 변경할 때 사용하는 명령어는?', 2, '상', 'CHANGE COLUMN', 'ALTER TABLE ... MODIFY', 'EDIT TABLE', 'UPDATE TYPE', 43),
    (2133, 'SQL에서 UNIQUE 제약 조건의 목적은?', 3, '중', '기본값 설정', '외래키 지정', '중복 방지', '정렬 유지', 43),
    (2134, '다중 테이블에서 동일한 이름의 컬럼을 사용할 때 충돌을 피하는 방법은?', 2, '중', 'AS로 바꾸기', '테이블명.컬럼명', '컬럼만 사용', 'USING 절 사용', 43),
    (2135, 'SQL에서 결과 행의 수를 제한할 때 사용하는 키워드는?', 4, '하', 'COUNT', 'MAX', 'TOP', 'LIMIT', 43),
    (2136, 'SQL에서 데이터베이스의 현재 상태를 취소하고 이전 상태로 되돌리는 명령은?', 1, '상', 'ROLLBACK', 'COMMIT', 'CANCEL', 'UNDO', 43),
    (2137, 'INSERT 문에서 특정 컬럼만 지정해 값을 삽입할 수 있는가?', 1, '하', '가능하다', '모든 컬럼 필요', '불가능하다', '제약 조건 위반', 43),
    (2138, 'SQL에서 AUTO_INCREMENT를 사용하는 주 목적은?', 2, '중', '인덱스 자동 생성', '자동 증가 키 생성', '문자열 자동 채움', '날짜 포맷 지정', 43),
    (2139, 'SQL에서 외래키가 참조하는 테이블을 삭제할 수 없게 하려면?', 4, '상', 'ON DELETE CASCADE', 'ON UPDATE SET NULL', 'ON INSERT BLOCK', 'ON DELETE RESTRICT', 43),
    (2140, 'SQL 표준 언어 구분에서 SELECT, INSERT는 어떤 범주인가?', 2, '중', 'TCL', 'DML (데이터 조작 언어)', 'DDL', 'DCL', 43),
    (2141, 'SQL에서 테이블을 생성하는 명령어는?', 4, '하', 'INIT TABLE', 'NEW TABLE', 'MAKE TABLE', 'CREATE TABLE', 43),
    (2142, '데이터베이스 트랜잭션에서 COMMIT의 의미는?', 4, '중', '트랜잭션 중단', '변경사항 초기화', '인덱스 재구성', '변경사항 저장', 43),
    (2143, 'SQL에서 컬럼의 기본값을 설정할 때 사용하는 키워드는?', 4, '중', 'VALUE_SET', 'START WITH', 'INITVALUE', 'DEFAULT', 43),
    (2144, '서브쿼리를 SELECT절에 사용할 경우 어떤 값이 반환되는가?', 4, '상', '전체 테이블', '다중 행', '에러', '스칼라값', 43),
    (2145, 'SQL에서 EXISTS 조건문의 주된 기능은?', 2, '상', '인덱스 제거', '서브쿼리 존재 여부 확인', '값 대체', '컬럼 재정의', 43),
    (2146, 'SQL에서 테이블 간 데이터 삽입 시 사용되는 구문은?', 3, '상', 'COPY FROM', 'PUSH SELECT', 'INSERT INTO ... SELECT', 'JOIN INTO', 43),
    (2147, 'SQL에서 ORDER BY는 기본적으로 어떤 순서를 따르는가?', 2, '하', '내림차순', '오름차순', '알파벳 순', '인덱스 순', 43),
    (2148, 'SQL에서 COUNT(*)는 무엇을 계산하는가?', 4, '하', 'NULL 제외 수', '테이블 용량', 'PK 수', '전체 행 수', 43),
    (2149, 'SQL에서 제약 조건을 나중에 추가할 때 사용하는 구문은?', 3, '중', 'CONSTRAINT MODIFY', 'SET KEY', 'ALTER TABLE ... ADD CONSTRAINT', 'CREATE CONSTRAINT', 43),
    (2150, 'SQL에서 트랜잭션이 종료되지 않았을 때 영향을 주는 명령은?', 1, '상', 'ROLLBACK', 'GRANT', 'UNION', 'DROP', 43),
    (2151, '관계형 데이터베이스(RDB)에서 데이터를 구조화하는 기본 단위는 무엇인가?', 3, '하', '컬렉션', '도큐먼트', '테이블', '키-값 쌍', 44),
    (2152, 'SQL에서 데이터를 조회할 때 사용하는 기본 명령어는?', 4, '하', 'PULL', 'FIND', 'GET', 'SELECT', 44),
    (2153, 'RDB에서 각 행을 유일하게 식별하기 위해 사용하는 키는?', 3, '하', 'Foreign Key', 'Index', 'Primary Key', 'Row ID', 44),
    (2154, '정규화의 목적은 무엇인가?', 3, '중', '데이터를 중복 저장하여 성능 향상', '테이블을 무작위로 분리', '데이터 중복을 줄이고 무결성을 유지', 'SQL 쿼리를 단순화', 44),
    (2155, '다음 중 외래 키(Foreign Key)에 대한 설명으로 올바른 것은?', 2, '중', '중복된 값을 허용하지 않는다', '다른 테이블의 기본 키를 참조한다', '같은 테이블 내에서만 사용된다', '데이터를 암호화한다', 44),
    (2156, 'ACID 속성 중 ''일관성(Consistency)''은 어떤 의미인가?', 3, '중', '모든 트랜잭션은 동시에 실행되어야 한다', '모든 데이터는 암호화되어야 한다', '트랜잭션 수행 전후에 데이터의 무결성이 보장된다', '항상 최신 데이터를 반환한다', 44),
    (2157, 'RDBMS에서 트랜잭션이 실패했을 때 이전 상태로 되돌리는 작업은?', 2, '상', 'COMMIT', 'ROLLBACK', 'SELECT', 'RESTORE', 44),
    (2158, '인덱스(Index)를 생성하는 주된 목적은?', 3, '상', '데이터를 암호화하기 위해', '데이터를 자동으로 백업하기 위해', '데이터 접근 속도를 향상시키기 위해', '데이터 정렬 순서를 바꾸기 위해', 44),
    (2159, 'RDB의 트랜잭션 처리에서 ''격리성(Isolation)''이 낮으면 발생할 수 있는 현상은?', 2, '상', '데이터 누락', '동시성 문제', '성능 저하', '무결성 위반', 44),
    (2160, '관계형 데이터베이스에서 정규화 1NF는 무엇을 의미하는가?', 1, '상', '모든 데이터가 원자값으로 구성되어야 함', '중복 데이터 허용', '각 테이블은 하나의 기본 키만 가져야 함', '테이블 간 연결을 금지함', 44),
    (2161, 'MySQL의 대표적인 장점은 무엇인가?', 2, '하', '그래프 데이터 처리', '오픈소스 기반', '객체지향 설계', 'NoSQL 호환성', 44),
    (2162, 'PostgreSQL의 특징으로 옳은 것은?', 3, '하', 'ACID 지원 미비', 'JSON 미지원', '확장성 강점', '비정형 데이터에 특화됨', 44),
    (2163, 'SQLite는 어떤 상황에 적합한가?', 2, '하', '대규모 트랜잭션 처리', '모바일 로컬 저장소', '분산 클러스터 구성', 'NoSQL 연동', 44),
    (2164, 'Oracle DB는 주로 어떤 기업 환경에서 사용되는가?', 2, '중', '스타트업', '대기업 및 금융', '교육 기관', '오픈소스 커뮤니티', 44),
    (2165, 'MariaDB는 어떤 데이터베이스에서 파생되었는가?', 3, '중', 'Oracle', 'MongoDB', 'MySQL', 'PostgreSQL', 44),
    (2166, 'RDB 중 ''서브쿼리와 복잡한 조인''에 강점을 가진 것은?', 3, '중', 'MySQL', 'MongoDB', 'PostgreSQL', 'Redis', 44),
    (2167, '다음 중 오픈소스가 아닌 상용 RDB는?', 2, '상', 'MySQL', 'Oracle', 'PostgreSQL', 'MariaDB', 44),
    (2168, 'PostgreSQL의 MVCC는 어떤 문제를 해결하기 위한 기술인가?', 3, '상', '데이터 정렬', '보안성 강화', '동시성 제어', '문자 인코딩', 44),
    (2169, 'MySQL의 InnoDB 엔진의 특징은?', 3, '상', '트랜잭션 미지원', '풀텍스트 검색 특화', 'ACID 지원', '클러스터 미지원', 44),
    (2170, 'SQL 표준 준수율이 가장 높은 DB는?', 2, '상', 'MySQL', 'PostgreSQL', 'SQLite', 'Redis', 44),
    (2171, 'NoSQL의 주요 특징 중 하나는?', 3, '하', '스키마 엄격함', '관계형 조인 강화', '유연한 구조', 'SQL 강제 사용', 44),
    (2172, 'NoSQL이 처음 주목받게 된 이유는?', 3, '하', '모바일 호환성', '고성능 게임 서버', '웹 확장성과 대용량 처리', '스키마 고정성', 44),
    (2173, 'NoSQL의 4가지 대표 유형에 속하지 않는 것은?', 3, '하', '키-값 저장소', '문서 지향', '객체 지향', '열 지향', 44),
    (2174, '문서 지향 DB의 대표적인 예는?', 2, '중', 'Redis', 'MongoDB', 'Cassandra', 'MySQL', 44),
    (2175, 'Column 기반 NoSQL DB는?', 3, '중', 'DynamoDB', 'Redis', 'Cassandra', 'MongoDB', 44),
    (2176, '그래프 기반 NoSQL의 예시는?', 1, '중', 'Neo4j', 'MongoDB', 'MySQL', 'Elasticsearch', 44),
    (2177, 'BASE 속성 중 A는 무엇을 의미하는가?', 2, '상', 'Access', 'Available', 'Atom', 'Array', 44),
    (2178, 'NoSQL에서 스키마리스란?', 3, '상', '데이터 무결성 강화', '정해진 테이블 구조 사용', '구조 없이 저장 가능', 'SQL 의무 사용', 44),
    (2179, 'NoSQL이 관계형 DB에 비해 약한 점은?', 2, '상', '확장성', '조인 기능', '처리 속도', '보안 기능', 44),
    (2180, 'CAP 이론의 세 요소 중 일치하지 않는 것은?', 4, '상', 'Consistency', 'Availability', 'Partition Tolerance', 'Atomicity', 44),
    (2181, 'MongoDB에서 데이터를 저장하는 단위는?', 2, '하', 'Row', 'Document', 'Tuple', 'Entity', 44),
    (2182, 'Redis는 어떤 방식으로 데이터를 저장하는가?', 2, '하', '문서 지향', '키-값', '열 기반', '트리 기반', 44),
    (2183, 'Firebase는 어떤 용도로 자주 사용되는가?', 2, '하', '정적 페이지', '서버리스 백엔드', 'BI 분석', '대용량 로그 분석', 44),
    (2184, 'Elasticsearch는 어떤 특성의 DB인가?', 2, '중', '키-값 저장소', '문서 기반 검색 엔진', '그래프 DB', 'SQL DB', 44),
    (2185, 'Cassandra는 어떤 구조 기반인가?', 3, '중', '키-값', '문서', '열 기반', '파일 기반', 44),
    (2186, 'Redis는 어떤 데이터 구조를 지원하지 않는가?', 3, '중', '리스트', '셋', '그래프', '해시', 44),
    (2187, 'MongoDB의 데이터 저장 구조는 무엇을 따르는가?', 2, '상', 'RDF 트리', 'BSON', 'CSV', 'YAML', 44),
    (2188, 'Redis는 어떤 특성을 가지고 있는가?', 3, '상', '디스크 기반', '비동기 처리 미지원', '인메모리 저장소', 'BLOB 저장 특화', 44),
    (2189, 'Cassandra는 어떤 일관성 모델을 따르는가?', 2, '상', '강한 일관성', '약한 일관성', '혼합 일관성', '일관성 없음', 44),
    (2190, '다음 중 Elasticsearch의 주된 사용 목적은?', 2, '상', '트랜잭션 처리', '검색 최적화', '트리거 이벤트 처리', '세션 저장소', 44),
    (2191, '로그 데이터 저장에 가장 적합한 DB 유형은?', 3, '하', '관계형 DB', '문서 지향 DB', '열 기반 DB', '그래프 DB', 44),
    (2192, '사용자 인증과 같은 정형 데이터를 저장할 DB는?', 3, '하', 'MongoDB', 'Redis', 'MySQL', 'Cassandra', 44),
    (2193, '소셜 그래프 구조를 저장할 때 적합한 DB는?', 1, '하', 'Neo4j', 'PostgreSQL', 'DynamoDB', 'Elasticsearch', 44),
    (2194, '단기 캐시 데이터 저장용으로 적합한 DB는?', 1, '중', 'Redis', 'MySQL', 'MongoDB', 'SQLite', 44),
    (2195, '모바일 앱에서 로컬 데이터 저장용으로 적합한 DB는?', 3, '중', 'Oracle', 'MongoDB', 'SQLite', 'Cassandra', 44),
    (2196, '다양한 포맷의 비정형 데이터를 저장하기 좋은 DB는?', 2, '중', 'MySQL', 'MongoDB', 'PostgreSQL', 'Redis', 44),
    (2197, '실시간 분석과 빠른 쓰기가 필요한 경우 적합한 DB는?', 2, '상', 'Elasticsearch', 'Redis', 'Oracle', 'Neo4j', 44),
    (2198, '데이터 간의 관계가 복잡하게 연결된 경우 적합한 DB는?', 2, '상', 'MySQL', 'Neo4j', 'Elasticsearch', 'DynamoDB', 44),
    (2199, '확장성과 장애 허용성이 중요한 경우 선택할 DB는?', 3, '상', 'Redis', 'PostgreSQL', 'Cassandra', 'SQLite', 44),
    (2200, '대규모 사용자 기반의 채팅 앱에서 상태 저장에 적합한 DB는?', 1, '상', 'Redis', 'MySQL', 'Neo4j', 'Elasticsearch', 44),
    (2201, 'SQL에서 실행 계획을 분석할 수 있도록 해주는 명령어는?', 2, '하', 'SHOW CREATE TABLE', 'EXPLAIN', 'DESCRIBE', 'ANALYZE', 45),
    (2202, 'SQL 옵티마이저(Optimizer)의 역할은 무엇인가?', 2, '하', '데이터 백업', '최적 실행 계획 선택', '스키마 정리', '사용자 인증', 45),
    (2203, 'SELECT * 대신 컬럼을 명시하는 것이 성능에 좋은 이유는?', 3, '하', '트랜잭션 보호', '데이터 무결성 보장', '불필요한 데이터 조회 방지', '쿼리 결과를 암호화', 45),
    (2204, '다음 중 SQL 실행 순서가 올바른 것은?', 2, '중', 'SELECT → FROM → WHERE', 'FROM → WHERE → SELECT', 'WHERE → SELECT → FROM', 'GROUP BY → FROM → SELECT', 45),
    (2205, '다음 중 실행 계획에서 ''Full Table Scan''이 발생하는 이유가 아닌 것은?', 3, '중', '인덱스가 없음', 'WHERE 조건이 항상 TRUE', 'ORDER BY가 존재함', '함수 적용된 WHERE 조건', 45),
    (2206, '오라클의 실행 계획 도구인 ''AUTOTRACE''의 기능은?', 3, '중', '인덱스 생성', '쿼리 결과 수정', '실행 계획과 통계 정보 제공', '데이터를 외부로 내보냄', 45),
    (2207, '다음 중 옵티마이저가 쿼리 실행 계획을 세울 때 고려하지 않는 요소는?', 3, '상', '테이블 통계 정보', '인덱스 존재 여부', '서버의 RAM 용량', '조인 방식', 45),
    (2208, '쿼리 튜닝 시 옵티마이저 힌트(Hint)의 역할은?', 3, '상', '쿼리 실행을 차단함', '테이블을 삭제함', '옵티마이저에게 힌트를 제공하여 실행 방식을 유도함', 'SQL 구문을 자동 완성함', 45),
    (2209, '다음 중 Cost-Based Optimizer(CBO)의 특징은?', 3, '상', '하드코딩된 규칙만 사용', '쿼리 구조만 고려', '통계 정보를 기반으로 비용을 계산함', '항상 빠른 쿼리를 선택함', 45),
    (2210, '실행 계획에서 Nested Loop Join은 어떤 상황에서 적합한가?', 2, '상', '두 테이블 모두 대용량일 때', '조인 대상이 모두 인덱스일 때', '정렬이 필요한 경우', '서브쿼리가 있을 때', 45),
    (2211, '인덱스를 사용하면 가장 크게 기대할 수 있는 효과는?', 3, '하', '데이터 보안 강화', '데이터 중복 제거', '조회 성능 향상', '스토리지 감소', 45),
    (2212, '다음 중 RDB에서 가장 일반적으로 사용되는 인덱스 구조는?', 1, '하', 'B-Tree', '해시맵', 'Linked List', 'R-Tree', 45),
    (2213, 'WHERE 절에 사용되는 컬럼에 인덱스를 걸면 좋은 이유는?', 3, '하', '쿼리 실행 순서를 바꾸기 위해', 'GROUP BY 연산을 빠르게 하려고', '조건 검색 속도를 향상시키기 위해', '트랜잭션을 줄이기 위해', 45),
    (2214, '다음 중 인덱스를 사용해도 효과가 떨어지는 상황은?', 4, '중', 'LIKE ‘A%’ 조건', '정렬된 숫자 검색', '범위 조건 사용', 'LIKE ‘%A’ 조건', 45),
    (2215, '복합 인덱스 A, B가 있을 때 A만 WHERE 조건에 쓰면?', 2, '중', '인덱스 사용 안 됨', '효과적으로 인덱스 사용됨', '에러 발생', '인덱스를 무조건 재구성해야 함', 45),
    (2216, '해시 인덱스는 어떤 작업에 적합한가?', 3, '중', '범위 검색', '정렬', '정확한 키 검색', 'JOIN 연산', 45),
    (2217, 'Covering Index의 주요 특징은?', 2, '상', '모든 값을 복사해 저장', '인덱스만으로 결과를 반환할 수 있음', '쓰기 성능이 향상됨', '컬럼 순서를 무시함', 45),
    (2218, '다음 중 인덱스 사용률을 높이는 SQL 스타일은?', 3, '상', '함수 안에 컬럼을 넣기', '가공된 값을 조건으로 비교', '컬럼 그대로 WHERE 절에서 사용', 'DISTINCT를 다수 사용', 45),
    (2219, '다음 중 클러스터형 인덱스(Clustered Index)에 대한 설명으로 옳은 것은?', 3, '상', '데이터 정렬과 무관하게 저장', '인덱스가 따로 존재하며 별도로 관리됨', '데이터 자체가 인덱스 구조로 정렬됨', '조회 시 항상 느리다', 45),
    (2220, '다음 중 인덱스를 사용하는데 가장 방해가 되는 요소는?', 3, '상', 'ORDER BY 절', 'GROUP BY 절', 'WHERE 조건에 함수 사용', 'LIMIT 절', 45),
    (2221, '다음 중 쿼리 성능을 가장 직접적으로 향상시킬 수 있는 작업은?', 2, '하', 'SELECT * 사용', '인덱스 설계', 'JOIN 순서 무작위 변경', '쿼리 이름 지정', 45),
    (2222, '서브쿼리를 사용했을 때의 단점은?', 2, '하', '가독성 향상', '성능 저하 가능성', '데이터 정합성 증가', '보안 강화', 45),
    (2223, '다음 중 쿼리 리팩토링의 효과가 아닌 것은?', 2, '하', '유지보수 편의성 향상', '결과 정확도 감소', '성능 향상 가능성', '가독성 향상', 45),
    (2224, '다음 중 INNER JOIN과 성능 차이가 가장 클 수 있는 JOIN 방식은?', 3, '중', 'LEFT JOIN', 'RIGHT JOIN', 'OUTER JOIN', 'SELF JOIN', 45),
    (2225, '다음 중 LIMIT 구문의 사용 목적은?', 2, '중', '테이블 잠금', '결과 데이터의 수 제한', '데이터 중복 제거', '쿼리 실행 중지', 45),
    (2226, '다음 중 COUNT(*)의 성능 개선 방법으로 적절한 것은?', 3, '중', '서브쿼리로 COUNT 분리', 'WHERE 조건 제거', '별도 통계 테이블 유지', 'DISTINCT 사용', 45),
    (2227, '다음 중 인덱스를 사용하지 못하도록 만드는 조건은?', 3, '상', 'WHERE id = 10', 'WHERE name LIKE ''A%''', 'WHERE UPPER(name) = ''A''', 'WHERE age BETWEEN 20 AND 30', 45),
    (2228, '다음 중 서브쿼리를 JOIN으로 바꾸는 이유로 적절하지 않은 것은?', 1, '상', '결과 정확도 향상', '성능 향상', '가독성 향상', '옵티마이저의 최적화 가능성 증가', 45),
    (2229, '다음 중 EXISTS와 IN의 주요 차이는?', 3, '상', 'EXISTS는 정렬함', 'IN은 항상 빠름', 'EXISTS는 조건 만족 시 바로 종료함', 'IN은 조건을 하나씩 수행함', 45),
    (2230, '다음 중 성능 테스트 시 주의할 점으로 옳지 않은 것은?', 3, '상', '캐시 초기화 상태 확인', '데이터량에 따른 실행 시간 측정', '최초 실행 시간만 기준으로 판단', '실행 계획 비교', 45),
    (2231, '정규화의 주요 목적은 무엇인가?', 3, '하', '데이터 중복 증가', '데이터 정렬', '데이터 무결성 유지', '조회 성능 저하', 45),
    (2232, '1NF(제1정규형)의 핵심 조건은?', 2, '하', '모든 컬럼은 기본 키에 종속되어야 함', '원자값만 저장', '이행적 종속 제거', '다대다 관계 제거', 45),
    (2233, '2NF를 만족하려면 무엇을 제거해야 하는가?', 1, '하', '부분적 함수 종속', '이행적 종속', '후보 키', '기본 키', 45),
    (2234, '제3정규형(3NF)은 어떤 종속을 제거하는가?', 2, '중', '부분 종속', '이행적 종속', '다치 종속', '후보키 종속', 45),
    (2235, '다음 중 정규화를 적용했을 때 기대되는 효과는?', 3, '중', '데이터 정합성 저하', '쿼리 복잡도 감소', '데이터 중복 감소', '성능 저하', 45),
    (2236, '정규화된 테이블을 비정규화할 때의 이점은?', 3, '중', '관리 복잡도 증가', '관계도 증가', '조회 성능 향상', '정합성 강화', 45),
    (2237, '다음 중 비정규화의 단점은?', 1, '상', '데이터 중복 증가', '정규화보다 더 많은 테이블', '조회 성능 저하', '무결성 자동 보장', 45),
    (2238, '정규화와 비정규화를 결정할 때 가장 중요하게 고려해야 할 것은?', 3, '상', '쿼리 최적화 방식', '시스템의 메모리 크기', '데이터 정합성과 성능의 균형', '트리거 개수', 45),
    (2239, 'BCNF는 어떤 상황에서 필요해지는가?', 1, '상', '3NF보다 더 높은 무결성이 필요할 때', '2NF를 만족할 때', '모든 키가 기본 키일 때', '후보 키가 하나일 때', 45),
    (2240, '다음 중 정규화된 모델보다 비정규화된 모델이 유리한 경우는?', 3, '상', '데이터 변경이 자주 일어날 때', '데이터 정합성이 가장 중요할 때', '읽기 성능이 매우 중요할 때', '데이터 중복을 피해야 할 때', 45),
    (2241, '다음 중 데이터베이스 성능 저하의 일반적인 원인은?', 3, '하', '정규화 완료', '인덱스 과다 사용', '인덱스 미사용', '쿼리 캐시 사용', 45),
    (2242, 'DB 서버에 병목 현상이 발생하는 주요 원인이 아닌 것은?', 3, '하', '디스크 I/O 과다', '네트워크 지연', '불필요한 인덱스 제거', '동시 접속 증가', 45),
    (2243, '실시간으로 대용량 데이터를 빠르게 처리하고자 할 때 적절한 전략은?', 2, '하', '정규화 수행', '비정규화 및 파티셔닝', '뷰(view) 사용', '모든 데이터를 캐싱', 45),
    (2244, '수직 파티셔닝은 어떤 기준으로 테이블을 나누는가?', 2, '중', '행(Row)', '컬럼(Column)', '데이터 타입', '사용자 그룹', 45),
    (2245, '데이터를 파티셔닝하는 주요 목적은?', 3, '중', '데이터 정렬', '보안 향상', '성능 향상 및 확장성 확보', '데이터 중복', 45),
    (2246, '다음 중 파티셔닝을 적용하기 좋은 상황은?', 3, '중', '소규모 정적 데이터 처리', '읽기보다 쓰기가 많은 데이터', '시간에 따라 분리되는 대용량 로그', '서브쿼리 많은 상황', 45),
    (2247, '데이터베이스 성능 모니터링 도구가 수집하지 않는 정보는?', 4, '상', 'CPU 사용률', '네트워크 대역폭', '쿼리 실행 시간', '개발자 수', 45),
    (2248, '실시간 대시보드에서 성능을 높이기 위한 전략은?', 2, '상', '정규화된 테이블 조인', '최소 쿼리 요청, 캐시 활용', '모든 쿼리 서버 측 실행', '복잡한 집계 로직 도입', 45),
    (2249, '읽기 부하가 큰 서비스에서 효과적인 구조는?', 2, '상', '쓰기 전용 인스턴스', '읽기 전용 복제본(Read Replica) 구성', '트리거 사용 증가', '정규화 강화', 45),
    (2250, '분산 DB 시스템에서 데이터 일관성보다 가용성을 우선할 때의 전략은?', 3, '상', 'CAP 중 C 보장', 'ACID 보장 강화', 'Eventually Consistent 모델 사용', '동기식 복제만 사용', 45),
    (2251, 'Java에서 클래스가 객체로 생성되기 위해 사용하는 키워드는?', 3, '하', 'define', 'instanceof', 'new', 'object', 46),
    (2252, 'Spring에서 IoC(제어의 역전)가 의미하는 것은?', 3, '하', '개발자가 직접 객체를 관리', '사용자 요청을 직접 제어', '객체의 제어를 컨테이너가 담당', '데이터를 하드코딩으로 처리', 46),
    (2253, '다음 중 Spring에서 의존성 주입(DI)을 구현할 수 있는 방법이 아닌 것은?', 4, '하', '생성자 주입', '세터 주입', '필드 주입', '상속 주입', 46),
    (2254, 'Java의 접근 제어자 중 같은 클래스에서만 접근 가능한 것은?', 1, '중', 'private', 'protected', 'public', 'default', 46),
    (2255, '@SpringBootApplication 어노테이션은 무엇을 포함하는가?', 2, '중', '@Entity, @Bean', '@Configuration, @EnableAutoConfiguration, @ComponentScan', '@RestController, @Autowired', '@Service, @Repository', 46),
    (2256, 'Java에서 오버라이딩(Overriding)은 어떤 경우 사용하는가?', 2, '중', '같은 클래스에서 같은 이름의 메서드 정의', '부모 클래스의 메서드를 자식 클래스에서 재정의', '같은 클래스에서 메서드명을 바꿔 재정의', 'static 메서드를 변경', 46),
    (2257, 'Spring에서 Bean을 생성하고 관리하는 핵심 컨테이너는?', 3, '중', 'HttpSession', 'ServletContext', 'ApplicationContext', 'WebSocketContext', 46),
    (2258, 'Java에서 null을 반환할 수 있는 메서드를 대체하기 위한 클래스는?', 3, '상', 'Void', 'Nullable', 'Optional', 'Maybe', 46),
    (2259, 'Spring에서 Bean의 라이프사이클 중 객체가 생성된 후 초기화를 위한 메서드는?', 1, '상', '@PostConstruct', '@InitBinder', '@Autowired', '@PreDestroy', 46),
    (2260, '다음 중 Java의 예외(Exception) 처리 방식으로 올바른 것은?', 1, '상', 'try-catch-finally', 'assert-try-catch', 'if-throw-catch', 'try-return', 46),
    (2261, '3계층 아키텍처에서 Controller의 주요 역할은?', 3, '하', '비즈니스 로직을 처리', '데이터베이스 쿼리를 직접 실행', '사용자의 요청을 받아 Service에 전달', 'Entity를 직접 리턴', 46),
    (2262, 'Service 계층의 주요 책임은?', 3, '하', 'HTML 응답을 구성한다', '데이터를 화면에 표시한다', '비즈니스 로직을 수행한다', '파일 시스템과 통신한다', 46),
    (2263, 'DTO의 주요 목적은?', 2, '하', 'JPA 쿼리 최적화', '계층 간 필요한 데이터만 전달', '데이터베이스 매핑', '보안 설정 구성', 46),
    (2264, 'Entity와 VO(Value Object)의 주요 차이는?', 3, '중', 'Entity는 값을 비교하고, VO는 참조를 비교한다', 'VO는 식별자가 있고, Entity는 없다', 'Entity는 식별자를 가지며 VO는 값 자체로 동등성 판단', 'VO는 DB에 저장되며 Entity는 캐시에 저장된다', 46),
    (2265, 'Repository의 책임으로 올바른 것은?', 1, '중', '데이터 접근 및 조작', '사용자 요청 처리', '에러 로그 기록', 'API 응답 캐싱', 46),
    (2266, 'Spring의 의존성 주입(DI)을 통해 얻을 수 있는 효과는?', 3, '중', '코드 실행 속도 향상', '컴파일 타임 단축', '결합도 감소 및 테스트 용이성 향상', 'JVM 메모리 최적화', 46),
    (2267, '다음 중 계층 구조를 따르지 않을 때 발생할 수 있는 문제는?', 2, '상', '보안 강화', '단일 책임 원칙 위반', '응답 속도 향상', '캐시 히트율 증가', 46),
    (2268, '다음 중 VO(Value Object)의 특성으로 적절한 것은?', 2, '상', '식별자를 기반으로 관리', '불변 객체로 사용', 'JPA Repository로 관리', '비즈니스 로직 수행', 46),
    (2269, 'DTO를 Entity로 변환하는 방법으로 가장 적절한 것은?', 2, '상', '컨트롤러에서 직접 Entity 생성', 'Service 계층에서 변환 로직 구현', 'Repository에서 자동 변환', 'HTML 템플릿에서 처리', 46),
    (2270, '계층 구조 설계의 가장 큰 장점 중 하나는?', 3, '상', '코드 길이 단축', '정렬 속도 향상', '유지보수성과 테스트 용이성', '화면 렌더링 속도 향상', 46),
    (2271, '@Entity 어노테이션은 어떤 클래스를 대상으로 사용되는가?', 2, '하', '컨트롤러 클래스', '데이터베이스 테이블과 매핑되는 클래스', 'DTO 클래스', '뷰(View) 클래스', 46),
    (2272, 'JPA에서 기본 키 생성을 위한 어노테이션은?', 4, '하', '@Primary', '@Generated', '@Id', '@GeneratedValue', 46),
    (2273, 'Spring Data JPA에서 findById() 메서드가 반환하는 타입은?', 2, '하', 'Entity', 'Optional<Entity>', 'List<Entity>', 'void', 46),
    (2274, 'JPA의 영속성 컨텍스트(Persistence Context)의 주요 역할은?', 3, '중', '트랜잭션을 종료한다', 'DB 커넥션을 유지한다', '엔티티 객체를 1차 캐시에 저장하고 관리한다', 'SQL 쿼리를 자동 분석한다', 46),
    (2275, 'Spring에서 @Transactional을 사용하는 이유는?', 3, '중', 'HTTP 요청 처리를 위해', '서버 부하 분산', '트랜잭션 단위로 작업을 처리하기 위해', 'Entity를 자동 생성하기 위해', 46),
    (2276, '@Query 어노테이션은 언제 사용하는가?', 2, '중', 'DTO를 생성할 때', '기본 메서드로 처리 불가능한 쿼리를 직접 작성할 때', 'API 요청을 받을 때', 'Entity 클래스를 정의할 때', 46),
    (2277, 'JPA에서 연관 관계를 정의할 때 사용하는 어노테이션은?', 3, '상', '@Relationship', '@RelationMapping', '@OneToMany / @ManyToOne', '@EntityJoin', 46),
    (2278, '트랜잭션의 전파 속성 중 Propagation.REQUIRES_NEW의 의미는?', 2, '상', '기존 트랜잭션이 있으면 참여', '기존 트랜잭션이 있으면 종료하고 새 트랜잭션 시작', '항상 기존 트랜잭션에 참여', '트랜잭션을 비활성화', 46),
    (2279, 'JPA에서 Lazy Loading의 특징은?', 3, '상', '즉시 모든 연관 데이터를 로딩', '쿼리 실행 시 연관 객체를 모두 미리 로딩', '필요할 때 연관 객체를 조회', '데이터를 캐시에 저장하지 않음', 46),
    (2280, '트랜잭션 격리 수준 중 가장 높은 단계는?', 4, '상', 'READ UNCOMMITTED', 'READ COMMITTED', 'REPEATABLE READ', 'SERIALIZABLE', 46),
    (2281, 'Spring Security의 가장 핵심 기능은 무엇인가?', 3, '하', '데이터베이스 관리', 'API 속도 최적화', '웹 애플리케이션의 인증과 인가 처리', 'HTML 템플릿 렌더링', 46),
    (2282, 'Spring Security에서 인증(Authentication)은 무엇을 의미하는가?', 2, '하', '요청 데이터를 검증하는 과정', '사용자의 신원을 확인하는 과정', '비밀번호 암호화 처리', '로그 기록 저장', 46),
    (2283, '@PreAuthorize 어노테이션은 어떤 용도로 사용되는가?', 3, '하', 'API 문서 생성을 위해', '데이터베이스 연결 설정', '메서드 실행 전에 권한 검사 수행', '클래스 로딩을 지연시킴', 46),
    (2284, 'JWT에서 Access Token이 하는 역할은?', 2, '중', '비밀번호 저장', '사용자의 인증 정보를 포함한 토큰으로 요청 시 사용', '쿠키를 암호화하는 방식', 'DB 세션 관리를 위한 키', 46),
    (2285, 'Spring Security에서 필터 기반 인증 구조의 시작점은?', 3, '중', 'UserDetailsService', 'SecurityConfig', 'UsernamePasswordAuthenticationFilter', 'PasswordEncoder', 46),
    (2286, 'Swagger의 주요 기능은?', 2, '중', '보안 토큰 암호화', 'API 명세서 자동 생성 및 테스트 지원', 'JPA 쿼리 자동 생성', 'Java 코드 컴파일', 46),
    (2287, 'Swagger UI의 기본 접근 경로는?', 3, '중', '/swagger-ui', '/docs', '/swagger-ui.html', '/api/swagger', 46),
    (2288, 'Spring Security에서 UserDetailsService는 어떤 역할을 하는가?', 3, '상', '토큰 유효성 검사', '비밀번호 암호화 설정', '사용자 인증 정보를 DB에서 로드', 'API 응답 형식 지정', 46),
    (2289, 'Swagger 문서에서 메서드 설명을 추가할 때 사용하는 어노테이션은?', 2, '상', '@ApiParam', '@ApiOperation', '@DocField', '@ApiInfo', 46),
    (2290, 'JWT 기반 인증 시스템의 장점으로 옳은 것은?', 1, '상', '세션 유지 없이 상태 기반 인증 구현 가능', '서버에 세션 저장 공간이 필요하다', '매 요청마다 DB 조회가 필수다', 'CSRF 보호가 기본 내장되어 있다', 46),
    (2291, 'Kotlin Coroutine의 가장 큰 특징은?', 2, '하', '동기적으로 실행된다', '스레드 블로킹 없이 비동기 처리를 가능하게 한다', 'JVM에서 실행되지 않는다', '항상 새로운 스레드를 생성한다', 46),
    (2292, 'Spring에서 @Async를 사용하면 어떤 효과가 있는가?', 3, '하', 'API 문서화', '동기 실행 보장', '비동기 메서드 실행', 'Entity 자동 매핑', 46),
    (2293, 'JPA에서 N+1 문제 해결을 위한 방법으로 적절한 것은?', 3, '하', '별도의 쿼리 파일 분리', 'DTO로 엔티티 반환', 'Fetch Join 사용', '트랜잭션 제거', 46),
    (2294, '다음 중 Redis를 사용한 캐싱에서 TTL(Time To Live)의 역할은?', 2, '중', '데이터 업데이트 트리거', '캐시 데이터의 유효 기간 설정', '쿼리 실행 순서 설정', '데이터 정렬 기준 설정', 46),
    (2295, 'Spring Security + JWT 기반 인증에서 토큰 발급 객체는?', 2, '중', 'AuthenticationEntryPoint', 'TokenProvider 또는 JwtUtil', 'OAuth2User', 'WebSecurityConfigurer', 46),
    (2296, 'OAuth2 로그인 시 리디렉션 URI는 어떤 역할을 하는가?', 3, '중', '사용자 ID 확인', '리소스 서버 요청을 중단', '인가 서버가 인증 후 리다이렉트할 클라이언트 주소', 'JWT 발급을 담당', 46),
    (2297, 'JPA Auditing에서 생성 시간을 자동으로 기록하는 어노테이션은?', 3, '상', '@CreatedTime', '@ModifiedDate', '@CreatedDate', '@Timestamp', 46),
    (2298, 'Spring Boot 멀티 모듈 프로젝트의 주요 장점은?', 2, '상', '전체 모듈이 하나의 빌드로만 운영됨', '서로 다른 관심사를 모듈로 분리해 관리 가능', '코드 중복 증가', '디버깅이 어려움', 46),
    (2299, 'CI/CD 구성에서 GitHub Actions의 주된 용도는?', 3, '상', '로그 저장', '서버 모니터링', '자동 빌드 및 테스트, 배포 트리거', 'HTML 렌더링', 46),
    (2300, '헥사고날 아키텍처의 핵심 아이디어는?', 2, '상', '계층 구조를 제거한다', '도메인과 외부 의존성을 철저히 분리', '엔티티 중심으로만 개발', 'DB 종속적인 코드 구성', 46),
    (2301, 'Node.js의 가장 큰 특징 중 하나는?', 3, '하', '스레드 기반 동기 처리', 'JavaScript를 브라우저에서만 실행', '이벤트 기반 비동기 처리', 'PHP 기반으로 동작', 47),
    (2302, 'Node.js에서 외부 패키지를 설치하고 관리할 수 있는 도구는?', 2, '하', 'GIT', 'NPM', 'SQL', 'VIM', 47),
    (2303, '다음 중 Node.js에서 모듈을 불러오는 문법으로 알맞은 것은?', 2, '하', 'import.module(''fs'')', 'require(''fs'')', 'load(''fs'')', 'get(''fs'')', 47),
    (2304, 'Node.js에서 비동기 처리를 가능하게 해주는 구조는?', 3, '중', '블로킹 큐', '멀티 스레드 큐', '이벤트 루프', '데이터 플로우 트리', 47),
    (2305, 'Node.js에서 파일 시스템 작업을 제공하는 내장 모듈은?', 4, '중', 'net', 'http', 'os', 'fs', 47),
    (2306, 'npm init 명령어를 실행하면 생성되는 파일은?', 3, '중', 'package.js', 'server.json', 'package.json', 'config.yaml', 47),
    (2307, 'require() 함수를 통해 불러온 모듈이 리턴하는 것은?', 3, '중', 'HTML 파일', '라우팅 객체', '모듈에서 exports한 객체 또는 함수', 'Java 클래스', 47),
    (2308, 'Node.js에서 동기 함수와 비교하여 비동기 함수의 장점은?', 4, '상', '코드 작성이 쉽다', '모든 요청을 직렬로 처리', '처리 속도가 느리다', '다수의 요청을 효율적으로 처리 가능', 47),
    (2309, '다음 중 CommonJS 방식의 모듈 정의법으로 옳은 것은?', 3, '상', 'export default {}', 'exports = {}', 'module.exports = {}', 'define(() => {})', 47),
    (2310, 'Node.js가 싱글 스레드임에도 고성능을 내는 이유는?', 3, '상', '코드를 순차적으로 실행하기 때문', '멀티 프로세스를 기본으로 하기 때문', '이벤트 루프와 비동기 처리를 통해 I/O 병목을 줄이기 때문', '매 요청마다 서버를 재시작하기 때문', 47),
    (2311, 'Express.js는 어떤 목적으로 사용되는 Node.js 프레임워크인가?', 3, '하', '데스크탑 애플리케이션 개발', '파일 시스템 처리', '웹 서버 및 API 구축', 'CLI 툴 개발', 47),
    (2312, 'Express에서 라우팅을 정의할 때 사용하는 메서드는?', 1, '하', 'get(), post(), put(), delete()', 'select(), update(), remove()', 'listen(), connect(), init()', 'path(), query(), route()', 47),
    (2313, 'REST API 설계에서 ''GET'' 메서드는 어떤 목적에 사용되는가?', 3, '하', '데이터 생성', '데이터 삭제', '데이터 조회', '데이터 갱신', 47),
    (2314, '다음 중 RESTful URI 설계로 가장 적절한 것은?', 3, '중', '/getUserById?id=1', '/user?id=1', '/user/1', '/fetch/user/1', 47),
    (2315, 'Express.js의 미들웨어는 언제 실행되는가?', 1, '중', '라우터가 실행된 후 결과를 보내기 전에', '서버가 시작되기 전에만', '라우터에 도달하지 않고 무조건 건너뜀', '응답을 브라우저에 보낸 후', 47),
    (2316, '다음 중 Express의 기본 구조에서 올바른 요청 처리 흐름은?', 3, '중', 'Controller → Middleware → Route', 'Route → Middleware → Response', 'Request → Middleware → Route Handler → Response', 'Middleware → DB → Controller', 47),
    (2317, '다음 중 Express에서 미들웨어를 정의하는 기본 문법은?', 2, '중', 'app.route(''/'', callback)', 'app.use((req, res, next) => {})', 'app.get((req, res) => {})', 'use.app((req, res, next) => {})', 47),
    (2318, 'REST API의 리소스를 표현하는 올바른 방식은?', 3, '상', '동사 기반 URI', '복잡한 쿼리 문자열 중심', '명확한 명사 기반 URI', 'HTML 태그 기반 URI', 47),
    (2319, 'Express에서 에러 처리 미들웨어의 인자는 몇 개인가?', 3, '상', '2개', '3개', '4개', '5개', 47),
    (2320, 'REST API에서 PUT과 PATCH의 가장 큰 차이점은?', 2, '상', '둘 다 삭제 요청이다', 'PUT은 전체 업데이트, PATCH는 일부 업데이트', 'PATCH는 새 리소스 생성용이다', 'PUT은 조회 요청이다', 47),
    (2321, '환경 변수 파일(.env)을 Node.js 프로젝트에서 사용할 수 있도록 도와주는 패키지는?', 2, '하', 'config.js', 'dotenv', 'env-loader', 'envParser', 47),
    (2322, '환경에 따라 설정을 분기 처리할 때 사용하는 Node.js 전역 변수는?', 3, '하', 'NODE_MODE', 'NODE_TYPE', 'NODE_ENV', 'ENV_STAGE', 47),
    (2323, 'JWT의 구성 요소는 다음 중 어떤 형태인가?', 1, '하', 'Header.Payload.Signature', 'Key.Value.Secret', 'Token.Passcode.ID', 'UserID.Time.Secret', 47),
    (2324, '다음 중 Access Token과 Refresh Token을 동시에 사용하는 이유는?', 2, '중', '로그인을 두 번 하기 위해', '보안 강화를 위해 짧은 만료와 재발급 구조 분리', '속도 향상을 위해 캐싱 구조 사용', '프론트엔드와 연동을 단순화하기 위해', 47),
    (2325, '다음 중 전역 에러 처리 미들웨어에서 반드시 포함되어야 하는 인자 개수는?', 3, '중', '2', '3', '4', '5', 47),
    (2326, '유효성 검사 라이브러리인 express-validator에서 validationResult를 사용하는 목적은?', 3, '중', 'DB 연결 확인', 'JWT 토큰 파싱', '검증 실패 항목 추출', '라우터 매핑 처리', 47),
    (2327, 'Joi 라이브러리의 주요 용도는?', 3, '중', '파일 시스템 접근', '환경 변수 주입', '데이터 유효성 스키마 기반 검사', '로그 기록', 47),
    (2328, 'JWT 토큰을 검증할 때 필요한 값은?', 1, '상', '암호화 키 (Secret)', '사용자 비밀번호', 'DB 연결 문자열', 'Access ID', 47),
    (2329, '다음 중 전역 에러 핸들러가 처리하지 못하는 것은?', 2, '상', '라우팅 실패', '비동기 함수 내 throw 에러 (await 없이)', 'express-validator 오류', '동기 실행 중 예외', 47),
    (2330, 'HTTP 요청 시 인증이 필요한 API 라우터에 적용해야 하는 미들웨어의 역할은?', 3, '상', '로그를 기록한다', '데이터를 암호화한다', 'JWT를 해석하고 유효한지 검증한다', '라우터 경로를 캐싱한다', 47),
    (2331, 'Mongoose는 어떤 데이터베이스를 위한 ODM(Object Document Mapper)인가?', 2, '하', 'PostgreSQL', 'MongoDB', 'MySQL', 'Redis', 47),
    (2332, 'Sequelize는 어떤 종류의 ORM인가?', 3, '하', 'GraphQL 기반 ORM', 'Document 기반 ORM', 'SQL 기반 ORM', '파일 기반 ORM', 47),
    (2333, '다음 중 Prisma의 주요 특징으로 올바른 것은?', 2, '하', 'MongoDB 전용 ORM', 'SQL Schema 기반 타입 안전성 제공', 'NoSQL 전용 쿼리만 지원', '테스트 도구와 통합 불가', 47),
    (2334, 'Postman의 주요 사용 목적은?', 3, '중', 'JWT 암호화', 'MongoDB 백업', 'API 요청 시뮬레이션 및 테스트', '로컬 호스팅', 47),
    (2335, 'Mongoose에서 findOne() 함수의 역할은?', 2, '중', '모든 문서 삭제', '단일 문서를 검색', '컬렉션 생성', '스키마 정의', 47),
    (2336, 'Sequelize에서 테이블을 정의하기 위한 객체는?', 3, '중', 'Client', 'Schema', 'Model', 'Repository', 47),
    (2337, 'Prisma에서 DB 마이그레이션을 적용하기 위한 명령어는?', 1, '중', 'npx prisma migrate deploy', 'prisma update-db', 'npm run sync-schema', 'prisma reset', 47),
    (2338, 'Postman에서 변수 설정을 통해 얻을 수 있는 이점은?', 2, '상', 'JWT 생성 자동화', '요청 경로와 파라미터 재사용성 향상', '데이터베이스 직접 수정', '브라우저에서 실행 가능', 47),
    (2339, 'Jest 테스트 도구의 특징 중 하나는?', 2, '상', 'HTML 테스트 전용', 'Node.js 환경 전용 단위 테스트 지원', 'Swagger UI 기반 실행', 'MySQL 쿼리 전용 분석기', 47),
    (2340, '다음 중 통합 테스트에 적합한 도구는?', 1, '상', 'supertest', 'dotenv', 'mongoose', 'bcrypt', 47),
    (2341, '마이크로서비스 아키텍처의 장점은?', 2, '하', '한 번에 전체 시스템을 배포할 수 있다', '각 서비스가 독립적으로 배포 및 확장 가능하다', '하나의 DB만 사용 가능하다', '코드 재사용이 불가능하다', 47),
    (2342, 'Redis는 어떤 용도로 주로 사용되는가?', 3, '하', '정적 파일 전송', 'UI 컴포넌트 렌더링', '메모리 기반 캐시 및 세션 저장', 'SSL 인증 처리', 47),
    (2343, 'RabbitMQ와 Kafka는 어떤 시스템에 속하는가?', 2, '하', '파일 처리 라이브러리', '이벤트 기반 메시징 큐 시스템', '암호화 엔진', '웹 서버 프레임워크', 47),
    (2344, 'AWS S3는 어떤 목적에 사용되는 서비스인가?', 2, '중', '웹 서버 관리', '정적 파일 저장 및 전송', 'API Gateway 역할 수행', 'DB 트랜잭션 처리', 47),
    (2345, 'OAuth2의 Authorization Code Flow는 주로 어떤 앱에 사용되는가?', 2, '중', '클라이언트 시크릿을 보호할 수 없는 앱', '서버-클라이언트 구조에서 높은 보안이 필요한 앱', '토큰 없는 오프라인 앱', '데스크탑용 게임', 47),
    (2346, 'Helmet 미들웨어의 주요 목적은?', 2, '중', '라우팅을 간결하게 만든다', '응답 헤더를 조작해 보안을 강화한다', '에러 메시지를 JSON으로 출력한다', '서버에 로그를 저장한다', 47),
    (2347, 'Node.js에서 다중 프로세스를 통해 성능을 높일 수 있는 모드는?', 3, '상', 'Standalone Mode', 'Parallel Mode', 'Cluster Mode', 'Linear Mode', 47),
    (2348, '다음 중 유닛 테스트 프레임워크로 알맞은 것은?', 2, '상', 'Postman', 'Jest', 'Docker', 'Redis', 47),
    (2349, 'GitHub Actions의 주요 역할은?', 3, '상', '코드 에디터 기능 제공', '리포지토리 삭제', 'CI/CD 자동화 파이프라인 구성', '브라우저 렌더링 최적화', 47),
    (2350, 'GraphQL의 장점 중 하나는?', 2, '상', 'REST보다 항상 빠르다', '요청자가 필요한 데이터만 선택적으로 요청할 수 있다', '서버에서 URI를 자동 생성한다', 'NoSQL 전용으로만 사용할 수 있다', 47),
    (2351, 'Django에서 새로운 프로젝트를 시작하는 명령어는?', 2, '하', 'python createproject mysite', 'django-admin startproject mysite', 'django startproject mysite', 'django-admin create mysite', 48),
    (2352, 'Django에서 앱을 생성할 때 사용하는 명령어는?', 3, '하', 'django startapp blog', 'python manage.py initapp blog', 'python manage.py startapp blog', 'django-admin createapp blog', 48),
    (2353, 'Django에서 URL과 뷰 함수를 연결할 때 사용하는 함수는?', 4, '하', 'include()', 'render()', 'connect()', 'path()', 48),
    (2354, '뷰 함수에서 HTTP 응답을 반환하기 위해 사용하는 함수는?', 1, '중', 'HttpResponse()', 'response()', 'returnView()', 'HttpRender()', 48),
    (2355, '템플릿에서 정적 파일(css/js 등)을 로드하기 위해 템플릿 상단에 사용하는 태그는?', 3, '하', '{% include static %}', '{{ static load }}', '{% load static %}', '{% static load %}', 48),
    (2356, '템플릿에서 context로 넘긴 ''username''을 출력하려면 어떻게 해야 하나?', 2, '하', '{% username %}', '{{ username }}', '<%= username %>', '${ username }', 48),
    (2357, 'Django 모델에서 기본키(primary key)를 명시하지 않으면 자동으로 생성되는 필드는?', 3, '중', 'AutoIDField', 'models.IDField()', 'models.AutoField(primary_key=True)', 'models.IntegerField(auto=True)', 48),
    (2358, 'ORM에서 모델 인스턴스를 저장하기 위해 사용하는 메서드는?', 4, '중', 'update()', 'persist()', 'commit()', 'save()', 48),
    (2359, 'Django에서 사용자의 로그인 상태를 확인할 수 있는 내장 변수는?', 3, '중', 'request.login_status', 'request.authenticated', 'request.user.is_authenticated', 'user.session.active', 48),
    (2360, '폼에서 필드 자동 유효성 검사 기능이 제공되는 클래스는?', 2, '중', 'forms.BaseForm', 'forms.ModelForm', 'forms.FormGroup', 'forms.SimpleForm', 48),
    (2361, 'Django 프로젝트에서 설정 파일이 위치한 기본 디렉토리는?', 2, '중', 'settings/', 'mysite/settings/', 'config/', 'project/', 48),
    (2362, 'Django에서 디버그 모드를 설정하는 변수는?', 3, '중', 'DEBUG_MODE', 'IS_DEBUG', 'DEBUG', 'DEV_MODE', 48),
    (2363, 'URLconf에서 다른 URLconf 모듈을 포함시킬 때 사용하는 함수는?', 3, '중', 'redirect()', 'path()', 'include()', 'add_url()', 48),
    (2364, 'Django에서 템플릿 파일 기본 확장자는?', 2, '하', '.tpl', '.html', '.django', '.template', 48),
    (2365, '템플릿에서 if 조건문을 사용할 때의 구문은?', 3, '중', '{% if username != '''' %}', '{{ if username }}', '{% if username %}', '<% if username %>', 48),
    (2366, 'Django 모델에서 하나의 모델이 다른 모델과 1:N 관계를 가질 때 사용하는 필드는?', 3, '중', 'OneToOneField', 'ManyToManyField', 'ForeignKey', 'RelationField', 48),
    (2367, '모델 클래스에 대한 DB 테이블 이름을 지정할 때 사용하는 내부 클래스는?', 3, '중', 'Class Meta', 'ModelOptions', 'Meta', 'Options', 48),
    (2368, '로그인한 사용자의 정보를 뷰 함수에서 가져올 때 사용하는 객체는?', 2, '하', 'request.auth', 'request.user', 'user.session', 'auth.current_user', 48),
    (2369, 'Django의 폼 시스템에서 사용자 입력 데이터를 검증하려면 어떤 메서드를 호출해야 하나?', 1, '중', 'is_valid()', 'validate()', 'check()', 'form_validate()', 48),
    (2370, '폼의 필드를 커스터마이징할 때 사용하는 속성 중 하나는?', 3, '중', 'attrs', 'fields', 'widgets', 'style', 48),
    (2371, 'Django REST framework를 설치하기 위한 pip 명령어는?', 1, '하', 'pip install djangorestframework', 'pip install django-rest', 'pip install django-api', 'pip install restframework', 48),
    (2372, 'DRF에서 APIView 클래스를 상속받아 뷰를 작성할 때 사용되는 모듈은?', 2, '중', 'django.views.generic', 'rest_framework.views', 'rest_framework.generics', 'django.api.views', 48),
    (2373, 'DRF에서 직렬화에 사용되는 클래스는?', 3, '하', 'FormSerializer', 'ModelForm', 'ModelSerializer', 'DataSerializer', 48),
    (2374, 'APIView에서 GET 요청을 처리하는 메서드는?', 2, '하', 'get_request()', 'get()', 'retrieve()', 'handle_get()', 48),
    (2375, 'DRF에서 다양한 응답 형식을 처리하는 클래스는?', 3, '중', 'HttpResponse', 'JsonResponse', 'Response', 'APIResponse', 48),
    (2376, 'Serializer 클래스에서 필드를 정의할 때 사용하는 모듈은?', 3, '중', 'rest_framework.models', 'rest_framework.fields', 'rest_framework.serializers', 'django.forms.fields', 48),
    (2377, 'DRF에서 클래스 기반 뷰를 더 간단히 작성할 수 있게 도와주는 뷰는?', 1, '중', 'GenericAPIView', 'APIViewLite', 'BaseAPIView', 'AutoView', 48),
    (2378, 'DRF의 ViewSet을 URL에 연결하기 위해 사용하는 객체는?', 2, '중', 'UrlDispatcher', 'Router', 'PathBinder', 'ApiConnector', 48),
    (2379, 'ModelSerializer를 사용할 때 모델과 필드를 지정하는 내부 클래스는?', 2, '하', 'SerializerMeta', 'Meta', 'Options', 'Config', 48),
    (2380, 'DRF에서 인증(authentication)을 설정하기 위한 설정 키는?', 4, '중', 'AUTH_CLASSES', 'DRF_AUTH', 'DEFAULT_AUTH_CLASSES', 'DEFAULT_AUTHENTICATION_CLASSES', 48),
    (2381, 'Django에서 settings.py에 앱을 등록할 때 사용하는 설정 항목은?', 2, '하', 'APP_LIST', 'INSTALLED_APPS', 'ACTIVE_APPS', 'REGISTERED_APPS', 48),
    (2382, 'Django에서 URLconf 모듈을 연결할 때 사용하는 함수는?', 3, '중', 'connect()', 'url()', 'include()', 'redirect()', 48),
    (2383, '템플릿에서 조건문을 사용할 때 올바른 구문은?', 1, '하', '{% if user.is_authenticated %} ... {% endif %}', '{{ if user.is_authenticated }} ... {{ endif }}', '{% if user.is_authenticated %} ... {{ endif }}', '{% if user.is_authenticated %} ... {% end %}', 48),
    (2384, 'Django 모델에서 필드에 고유값 제약 조건을 주려면?', 1, '하', 'unique=True', 'primary_key=True', 'null=False', 'indexed=True', 48),
    (2385, 'Django의 User 모델에 password를 설정할 때 사용하는 메서드는?', 1, '중', 'set_password()', 'create_password()', 'hash_password()', 'set_encrypted_password()', 48),
    (2386, 'DRF에서 `@api_view([''GET''])` 데코레이터는 어떤 종류의 뷰에 사용되는가?', 3, '하', '클래스 기반 뷰', '제너릭 뷰', '함수형 뷰', 'ViewSet', 48),
    (2387, 'DRF에서 status 코드로 HTTP 404를 반환할 때 사용하는 상수는?', 1, '중', 'status.HTTP_404_NOT_FOUND', 'status.NOT_FOUND', 'HTTP.NOT_FOUND', 'status.HTTP_NOT_FOUND', 48),
    (2388, 'DRF ViewSet에서 리스트 조회 기능을 위한 메서드는?', 3, '중', 'retrieve()', 'get()', 'list()', 'get_all()', 48),
    (2389, 'Django에서 모델을 생성한 후 데이터베이스에 반영하려면 어떤 명령어를 사용해야 하는가?', 1, '하', 'python manage.py makemigrations → migrate', 'python manage.py db_create', 'python manage.py dbsync', 'python manage.py migrate_only', 48),
    (2390, 'Django의 `get_object_or_404()` 함수의 주요 목적은?', 3, '중', '객체를 생성하고 저장한다', '404 응답 없이 객체를 가져온다', '객체가 없으면 404 오류를 반환한다', '모든 객체를 조회한다', 48),
    (2391, '템플릿에서 HTML을 안전하게 출력하려면 어떤 필터를 사용할 수 있는가?', 2, '중', '|escape', '|safe', '|html', '|print', 48),
    (2392, '장고에서 `ModelForm`의 주요 목적은?', 3, '중', 'HTML 직접 작성', '모델을 자동으로 저장하지 않음', '모델 기반 폼 자동 생성', '폼 유효성 검사 생략', 48),
    (2393, 'Django REST Framework에서 serializer의 역할은?', 3, '하', 'HTML 템플릿을 렌더링한다', '클래스 기반 뷰를 관리한다', '데이터를 JSON 등으로 변환한다', 'url 패턴을 등록한다', 48),
    (2394, 'DRF에서 특정 필드를 읽기 전용으로 만들고 싶을 때 사용하는 옵션은?', 3, '중', 'editable=False', 'readonly=True', 'read_only=True', 'non_writable=True', 48),
    (2395, 'Django에서 QuerySet의 `filter()` 메서드는 어떤 역할을 하는가?', 2, '하', '모든 데이터를 가져온다', '지정한 조건에 맞는 데이터를 조회한다', '데이터를 삭제한다', '조건 없이 정렬한다', 48),
    (2396, 'DRF에서 `serializer.is_valid()` 호출 후 접근 가능한 속성은?', 2, '중', 'serializer.cleaned_data', 'serializer.validated_data', 'serializer.cleaned_fields', 'serializer.form_data', 48),
    (2397, 'Django에서 프로젝트를 생성하면 자동으로 생성되는 파일 중, 명령어 관리를 담당하는 파일은?', 3, '하', 'apps.py', 'wsgi.py', 'manage.py', 'urls.py', 48),
    (2398, 'Django에서 특정 URL 요청이 어떤 view 함수로 연결될지를 지정할 때 사용하는 함수는?', 3, '하', 'include()', 'render()', 'path()', 'urljoin()', 48),
    (2399, 'Django 템플릿에서 변수를 출력하기 위해 사용하는 구문은?', 2, '하', '{% variable %}', '{{ variable }}', '[[ variable ]]', '( variable )', 48),
    (2400, 'Django 모델 클래스에 __str__ 메서드를 정의하는 이유는?', 2, '중', '객체 생성 시 자동으로 호출되도록 하기 위해', '모델 객체를 문자열로 보기 좋게 표현하기 위해', '데이터베이스 테이블 이름을 지정하기 위해', '모델 필드에 기본값을 설정하기 위해', 48),
    (2401, 'Flask에서 애플리케이션을 생성할 때 사용되는 객체는?', 1, '하', 'app', 'FlaskApp', 'FlaskInstance', 'application', 49),
    (2402, 'Flask에서 특정 URL로 요청을 받을 수 있게 하는 데코레이터는 무엇인가?', 1, '하', '@app.route()', '@url.route()', '@app.view()', '@request.route()', 49),
    (2403, 'Flask에서 뷰 함수가 반환하는 기본값은 무엇인가?', 3, '중', 'HTML', 'JSON', 'Response 객체', 'String', 49),
    (2404, 'Jinja2 템플릿에서 상속을 사용하기 위한 구문은 무엇인가?', 2, '중', '{% include ''base.html'' %}', '{% extends ''base.html'' %}', '{% block content %}', '{% inherit ''base.html'' %}', 49),
    (2405, 'Flask-SQLAlchemy에서 모델 간 관계를 설정할 때 사용하는 키워드는?', 1, '중', 'ForeignKey', 'RelationalKey', 'Relationship', 'KeyRelation', 49),
    (2406, 'Flask에서 폼 데이터를 처리할 때 사용하는 `POST` 방식의 데이터를 가져오는 방법은 무엇인가?', 1, '하', 'request.form', 'request.body', 'request.json', 'request.args', 49),
    (2407, 'Flask 애플리케이션에서 세션을 사용하기 위해 필요한 객체는 무엇인가?', 1, '중', 'session', 'cookies', 'request', 'state', 49),
    (2408, 'Flask에서 SQLAlchemy를 사용하여 CRUD 기능을 구현할 때, 데이터를 추가하기 위한 메서드는 무엇인가?', 4, '중', 'db.add()', 'db.insert()', 'db.create()', 'db.session.add()', 49),
    (2409, 'Flask에서 서버를 로컬 환경에서 디버그 모드로 실행할 때 사용하는 코드는 무엇인가?', 1, '하', 'app.run(debug=True)', 'app.run(debug=False)', 'flask run --debug', 'run_server(debug=True)', 49),
    (2410, 'Flask에서 CORS(Cross-Origin Resource Sharing) 문제를 해결하기 위한 확장 모듈은 무엇인가?', 2, '중', 'Flask-Session', 'Flask-CORS', 'Flask-SQLAlchemy', 'Flask-Security', 49),
    (2411, 'Flask에서 REST API를 개발하기 위해 사용하는 확장 모듈은 무엇인가?', 1, '중', 'Flask-RESTful', 'Flask-API', 'Flask-REST', 'Flask-Json', 49),
    (2412, 'Flask에서 HTML 폼을 처리할 때, 사용자가 입력한 데이터를 확인하는 방법은 무엇인가?', 1, '하', 'request.form.get(''key'')', 'request.json.get(''key'')', 'request.data(''key'')', 'request.args(''key'')', 49),
    (2413, 'Flask에서 URL 매핑을 동적으로 처리하기 위한 방법은 무엇인가?', 1, '중', 'app.route(''/user/<username>'')', 'app.route(''/user/:username'')', 'app.route(''/user/{username}'')', 'app.route(''/user?username'')', 49),
    (2414, 'Flask에서 사용자의 세션을 종료하는 함수는 무엇인가?', 2, '중', 'session.remove()', 'session.clear()', 'session.pop()', 'session.end()', 49),
    (2415, 'Flask에서 Jinja2 템플릿에서 조건문을 사용하는 구문은 무엇인가?', 1, '하', '{% if condition %} ... {% endif %}', '{% if condition == true %} ... {% end_if %}', '{% condition if %} ... {% endif_condition %}', '{% check condition %} ... {% end_check %}', 49),
    (2416, 'Flask에서 `url_for()` 함수는 무엇을 위해 사용되는가?', 1, '하', 'URL 경로를 동적으로 생성하는 데 사용된다.', 'HTTP 요청을 보낼 때 URL을 생성한다.', '서버 주소를 반환하는 함수이다.', 'HTTP 응답을 생성하는 함수이다.', 49),
    (2417, 'Flask에서 데이터베이스 모델을 정의할 때 사용하는 ORM 클래스는 무엇인가?', 1, '중', 'db.Model', 'db.Schema', 'db.Entity', 'db.Table', 49),
    (2418, 'Flask에서 사용자가 요청을 보낼 때, 요청한 데이터를 JSON 형식으로 받기 위해 사용하는 메서드는 무엇인가?', 3, '중', 'request.form', 'request.args', 'request.json', 'request.body', 49),
    (2419, 'Flask에서 `Flask-SQLAlchemy`를 사용하여 모델 간 관계를 설정할 때 `backref`는 무엇을 의미하는가?', 2, '중', '한 방향의 관계를 쉽게 쿼리할 수 있도록 해준다.', '양방향 관계를 쉽게 쿼리할 수 있도록 해준다.', 'ForeignKey를 설정하는 데 사용된다.', '정렬 조건을 추가하는 데 사용된다.', 49),
    (2420, 'Flask 애플리케이션을 Docker로 컨테이너화하기 위해 사용할 수 있는 기본적인 파일은 무엇인가?', 1, '중', 'Dockerfile', 'flaskfile', 'docker-compose.yml', 'app.yaml', 49),
    (2421, 'Flask에서 `app.run(debug=True)`를 사용하면 어떤 기능이 활성화되는가?', 1, '하', '자동으로 코드 변경 시 서버가 재시작된다.', '디버깅 정보가 브라우저에 출력된다.', '코드 에러 발생 시 사용자에게 오류 메시지를 제공한다.', '배포 모드로 실행된다.', 49),
    (2422, 'Flask에서 `@app.before_request()` 데코레이터는 무엇을 위해 사용되는가?', 2, '중', '응답 전후에 추가 작업을 실행한다.', 'HTTP 요청이 처리되기 전에 실행된다.', '라우팅 전에 실행되어 URL 경로를 변경한다.', '세션 종료 후 로그아웃 처리를 한다.', 49),
    (2423, 'Flask에서 REST API 응답으로 JSON 데이터를 보내기 위해 사용하는 함수는 무엇인가?', 1, '하', 'jsonify()', 'render_template()', 'send_json()', 'make_response()', 49),
    (2424, 'Flask에서 JWT(Json Web Token) 인증을 구현할 때 사용하는 확장 모듈은 무엇인가?', 1, '중', 'Flask-JWT-Extended', 'Flask-Security', 'Flask-Auth', 'Flask-OAuth', 49),
    (2425, 'Flask에서 `url_for()` 함수는 어떤 데이터를 반환하는가?', 2, '중', 'HTTP 요청을 위한 URL 경로', '서버 주소와 경로를 포함한 URL', '요청의 쿼리 문자열', 'URL에 대한 인증 토큰', 49),
    (2426, 'Flask에서 웹 페이지 리다이렉션을 구현할 때 사용하는 함수는 무엇인가?', 1, '하', 'redirect()', 'send_redirect()', 'move_to()', 'url_redirect()', 49),
    (2427, 'Flask에서 `Flask-SQLAlchemy`를 사용할 때 모델 정의 시 사용하는 필드 유형 중 날짜를 처리하는 필드는 무엇인가?', 1, '중', 'db.DateTime', 'db.Date', 'db.Timestamp', 'db.Time', 49),
    (2428, 'Flask에서 클라이언트로부터 보내는 쿠키를 설정하려면 어떤 함수를 사용해야 하는가?', 1, '하', 'response.set_cookie()', 'request.set_cookie()', 'session.set_cookie()', 'make_response.set_cookie()', 49),
    (2429, 'Flask에서 세션 데이터를 서버에 저장하려면 어떤 방식이 기본적으로 사용되는가?', 3, '중', '서버의 파일 시스템에 저장', '서버의 메모리에 저장', '클라이언트의 쿠키에 저장', '데이터베이스에 저장', 49),
    (2430, 'Flask에서 여러 기능을 모듈화하여 관리할 때 사용하는 구조는 무엇인가?', 1, '중', 'Blueprint', 'Module', 'Package', 'Component', 49),
    (2431, 'Flask에서 `Flask-SQLAlchemy`를 사용하여 모델을 정의할 때, 기본적으로 데이터베이스 테이블의 이름은 무엇으로 설정되는가?', 1, '중', '클래스 이름의 소문자 형태', '클래스 이름의 대문자 형태', '설정 파일에 정의된 이름', '자동으로 생성된 UUID', 49),
    (2432, 'Flask에서 특정 뷰 함수가 호출될 때, `request.args`와 `request.form`의 차이는 무엇인가?', 1, '중', '`request.args`는 URL 쿼리 파라미터, `request.form`은 HTML 폼 데이터', '`request.args`는 헤더에 포함된 데이터, `request.form`은 서버에서 생성된 데이터', '`request.args`는 JSON 형식의 데이터, `request.form`은 텍스트 형식의 데이터', '`request.args`와 `request.form`은 동일한 데이터를 처리한다.', 49),
    (2433, 'Flask에서 `Flask-WTF`를 사용하여 폼 유효성 검사를 처리할 때, 필수 항목을 지정하려면 어떤 옵션을 사용해야 하는가?', 1, '중', 'validators=[DataRequired()]', 'required=True', 'mandatory=True', 'field_required=True', 49),
    (2434, 'Flask에서 `Blueprint`를 사용하여 애플리케이션을 구조화하는 이유는 무엇인가?', 1, '중', '코드의 재사용과 모듈화를 위해', '앱을 디버깅할 때 속도 향상을 위해', '보안을 강화하기 위해', '애플리케이션을 다국어 지원하도록 설정하기 위해', 49),
    (2435, 'Flask에서 `Flask-Login`을 사용하여 세션을 관리할 때, 사용자의 로그인 상태를 확인하는 함수는 무엇인가?', 1, '중', 'current_user.is_authenticated', 'session.is_logged_in', 'user.check_session()', 'flask_login.check_login()', 49),
    (2436, 'Flask에서 애플리케이션을 배포할 때, Nginx와 gunicorn을 사용할 때 gunicorn의 역할은 무엇인가?', 1, '중', '애플리케이션을 실행하고 요청을 처리한다.', '정적 파일을 제공한다.', '애플리케이션의 데이터베이스를 관리한다.', '요청을 Nginx로 라우팅한다.', 49),
    (2437, 'Flask에서 `@app.errorhandler(404)` 데코레이터를 사용하면 어떤 일이 일어나는가?', 1, '하', '404 오류가 발생했을 때 호출되는 함수가 정의된다.', '404 오류가 발생하면 자동으로 로그인 페이지로 리다이렉트된다.', '서버가 종료된다.', '404 오류가 발생했을 때 응답을 반환한다.', 49),
    (2438, 'Flask에서 `app.config.from_object()` 메서드는 무엇을 위해 사용되는가?', 1, '중', '애플리케이션 설정을 외부 객체에서 로드하기 위해', '애플리케이션의 라우팅을 설정하기 위해', '애플리케이션의 템플릿 경로를 설정하기 위해', '애플리케이션의 데이터베이스 연결을 설정하기 위해', 49),
    (2439, 'Flask에서 `make_response()` 함수는 무엇을 반환하는가?', 1, '하', '응답 객체(Response object)', 'HTML 템플릿을 렌더링한 문자열', '서버의 로그 객체', '클라이언트의 요청 객체', 49),
    (2440, 'Flask에서 `flask_sqlalchemy.SQLAlchemy` 객체를 사용하여 데이터베이스 모델을 정의할 때, 관계 설정을 할 수 있는 필드는 무엇인가?', 1, '중', 'relationship', 'link', 'connect', 'assoc', 49),
    (2441, 'Flask에서 `url_for()` 함수는 어떤 용도로 사용되는가?', 1, '중', 'URL을 생성하여 리다이렉트하는 데 사용된다.', '현재 URL을 반환하는 데 사용된다.', 'HTML 폼 데이터를 서버로 전송하는 데 사용된다.', '템플릿을 렌더링하는 데 사용된다.', 49),
    (2442, 'Flask에서 `render_template()` 함수는 무엇을 하는가?', 1, '하', '템플릿 파일을 읽어 HTML 응답을 반환한다.', 'HTML을 서버에 전송한다.', '사용자 입력 데이터를 필터링한다.', 'HTML 폼을 처리한다.', 49),
    (2443, 'Flask에서 `app.run(debug=True)`을 사용하면 어떤 효과가 있는가?', 1, '하', '서버를 디버그 모드로 실행하여 에러가 발생할 때 상세 정보를 제공한다.', '서버를 배포 모드로 실행하여 성능을 최적화한다.', '서버를 자동으로 종료시킨다.', '사용자의 요청을 로그로 기록한다.', 49),
    (2444, 'Flask에서 `@app.before_request` 데코레이터는 어떤 용도로 사용되는가?', 1, '중', '요청이 들어오기 전에 실행되는 함수를 정의한다.', '응답이 반환되기 전에 실행되는 함수를 정의한다.', '응답이 오류일 때 실행되는 함수를 정의한다.', '클라이언트 요청을 기록하는 데 사용된다.', 49),
    (2445, 'Flask에서 `session` 객체는 무엇을 관리하는 데 사용되는가?', 1, '중', '사용자별 데이터를 세션 간에 유지한다.', 'HTTP 요청을 처리하는 데 사용된다.', '웹 애플리케이션의 서버 측 세션을 관리한다.', '사용자 인증 정보를 관리한다.', 49),
    (2446, 'Flask에서 `abort()` 함수의 역할은 무엇인가?', 1, '중', 'HTTP 요청을 종료하고 특정 상태 코드와 메시지를 반환한다.', '특정 URL로 리다이렉션을 처리한다.', '서버를 재시작한다.', '요청 헤더를 수정한다.', 49),
    (2447, 'Flask에서 `request.json`을 사용하여 접근할 수 있는 데이터는 무엇인가?', 1, '하', 'JSON 형식으로 전송된 요청 본문 데이터', '쿼리 파라미터', '폼 데이터', '헤더 정보', 49),
    (2448, 'Flask에서 `app.config.from_pyfile()`은 어떤 용도로 사용되는가?', 1, '중', '외부 설정 파일에서 설정을 로드하는 데 사용된다.', 'Flask 애플리케이션을 실행하는 데 사용된다.', '데이터베이스를 초기화하는 데 사용된다.', '플랫폼 정보를 반환하는 데 사용된다.', 49),
    (2449, 'Flask에서 `url_for()`를 사용하여 템플릿에서 URL을 동적으로 생성할 때, 해당 함수에 넘겨야 할 인자는 무엇인가?', 1, '중', '뷰 함수의 이름과 해당 뷰 함수의 인자들', 'URL 경로와 HTTP 메소드', '사용자 인증 정보', '데이터베이스 연결 정보', 49),
    (2450, 'Flask에서 `Flask-SQLAlchemy`를 사용하여 관계형 데이터베이스를 사용할 때, 기본적으로 사용하는 데이터베이스는 무엇인가?', 1, '하', 'SQLite', 'MySQL', 'PostgreSQL', 'MongoDB', 49),
    (2451, 'Spring Boot에서 Kotlin을 사용할 때 가장 기본이 되는 클래스 선언 방식은?', 2, '하', 'public static void main', 'fun main(args: Array<String>)', 'startApp(args: List<String>)', 'main(args: String[])', 50),
    (2452, 'Kotlin에서 Bean 주입을 생성자 방식으로 처리하기 위해 사용하는 키워드는?', 3, '하', 'open', 'init', 'constructor', 'val', 50),
    (2453, 'Spring Boot 애플리케이션의 진입점 클래스에 필요한 애노테이션은?', 2, '하', '@EnableSpring', '@SpringBootApplication', '@RestApp', '@AutoScan', 50),
    (2454, 'Spring에서 Kotlin을 사용할 때 자주 마주치는 특징은?', 3, '중', '변수는 반드시 null 가능해야 함', '모든 클래스는 추상 클래스여야 함', '기본적으로 모든 변수는 non-null로 설계됨', '클래스 이름은 대문자로 시작할 수 없음', 50),
    (2455, 'Spring에서 Kotlin을 사용할 때 생성자에 `val` 또는 `var` 키워드를 붙이는 이유는?', 2, '중', '자동으로 Bean으로 등록되기 위해', '클래스 내부에 멤버 변수로 선언되기 위해', '코드가 Java로 변환되기 위해', '데이터 클래스로 강제되기 위해', 50),
    (2456, 'Spring에서 Kotlin을 사용할 때 클래스에 반드시 필요한 키워드는?', 2, '중', 'abstract', 'open', 'final', 'static', 50),
    (2457, 'Kotlin 기반 Spring 애플리케이션에서 Component Scan 대상은 기본적으로 어디부터 시작되는가?', 3, '중', 'src/main/kotlin/', '프로젝트 루트 디렉토리', '@SpringBootApplication이 위치한 패키지 이하', 'resource 폴더 경로 기준', 50),
    (2458, 'Spring Boot에서 Kotlin의 `data class`를 Bean으로 사용할 때 주의할 점은?', 3, '상', '기본 생성자를 가지지 않아야 함', '모든 필드는 반드시 null 허용해야 함', '필드를 val로 선언하면 변경이 불가하므로 의도에 맞게 설계해야 함', 'data class는 Bean으로 등록되지 않음', 50),
    (2459, '다음 중 Spring과 Kotlin을 함께 사용할 때 DI가 실패할 수 있는 상황은?', 1, '상', '클래스가 open으로 선언되지 않음', '생성자에 val을 쓰지 않음', 'Kotlin 버전이 1.3 이상일 때', '패키지 명이 중복될 때', 50),
    (2460, 'Spring Boot에서 Kotlin을 사용할 때 자주 사용하는 확장 함수 개념을 잘 설명한 것은?', 1, '상', '외부 클래스에 메서드를 추가하는 방식으로 재정의 가능', '스프링 빈에 직접 주입되는 메서드', '모든 메서드가 오버라이딩되는 것', '코루틴과 함께 작동할 수 없음', 50),
    (2461, 'Spring에서 REST API를 만들 때 Kotlin과 함께 가장 기본적으로 사용하는 애노테이션은?', 3, '하', '@Controller', '@Service', '@RestController', '@Bean', 50),
    (2462, 'Kotlin에서 GET 요청을 처리할 때 사용하는 애노테이션은?', 2, '하', '@PostMapping', '@GetMapping', '@RequestBody', '@PutMapping', 50),
    (2463, 'Spring에서 `@RequestParam`은 어떤 경우에 사용되는가?', 2, '하', 'JSON Body 파싱', '쿼리 파라미터 추출', '경로 변수 추출', '파일 업로드 처리', 50),
    (2464, '경로 변수(`/users/{id}`)를 추출하기 위해 사용하는 애노테이션은?', 2, '하', '@RequestParam', '@PathVariable', '@Param', '@RequestBody', 50),
    (2465, 'Spring에서 요청 본문(JSON 등)을 객체로 변환할 때 사용하는 애노테이션은?', 3, '중', '@RequestParam', '@PathVariable', '@RequestBody', '@Inject', 50),
    (2466, '다음 중 Kotlin DSL 스타일의 라우팅 처리를 가장 잘 설명한 것은?', 2, '중', '조건문 기반으로 라우팅을 전환한다', '함수형 스타일로 HTTP 경로를 정의한다', '동적으로 컨트롤러를 주입한다', '데이터 클래스를 동적으로 생성한다', 50),
    (2467, '다음 중 Spring에서 Kotlin DSL을 통해 라우터를 정의할 때 사용하는 함수는?', 2, '중', 'route()', 'router { }', 'mapping()', 'controller { }', 50),
    (2468, 'Kotlin에서 컨트롤러 메서드 반환 타입으로 가장 흔히 사용되는 것은?', 3, '중', 'View', 'String', 'ResponseEntity<T>', 'Any', 50),
    (2469, 'Kotlin과 Spring을 함께 사용할 때 유효성 검사를 위해 사용하는 애노테이션은?', 1, '중', '@Valid', '@Validated', '@Check', '@Verify', 50),
    (2470, 'Spring Boot와 Kotlin 조합에서 경량 라우팅 처리를 위한 라이브러리는?', 3, '상', 'RestAssured', 'Spring WebFlux', 'Ktor', 'SpringWebMVC.kt', 50),
    (2471, 'Spring에서 Kotlin으로 서비스 계층 클래스를 정의할 때 자주 사용하는 애노테이션은?', 2, '하', '@Repository', '@Service', '@Component', '@Entity', 50),
    (2472, 'Kotlin에서 생성자 기반 의존성 주입을 쉽게 하려면 어떤 접근 방식을 사용하는가?', 2, '하', 'lateinit var + @Autowired', '생성자에 파라미터 추가 + constructor', '기본 생성자와 setter 조합', '생성자 내부에서 @Inject 사용', 50),
    (2473, 'Service 클래스에서 예외를 던지고 싶을 때 사용하는 Kotlin 키워드는?', 2, '하', 'catch', 'throw', 'raise', 'fail', 50),
    (2474, 'Kotlin에서는 사용자 정의 예외 클래스를 생성할 때 상속해야 하는 클래스는?', 2, '중', 'RuntimeException', 'Exception', 'Throwable', 'IllegalStateException', 50),
    (2475, '다음 중 Kotlin답게 null을 활용한 예외 처리를 위한 구문은?', 2, '중', 'if (obj == null) throw Exception()', 'obj ?: throw IllegalArgumentException()', 'when (obj) { null -> throw }', 'obj?.run { } ?: fail()', 50),
    (2476, 'Spring에서 전역 예외 처리용 클래스를 만들 때 사용하는 애노테이션은?', 3, '중', '@ErrorHandler', '@ExceptionMapper', '@ControllerAdvice', '@GlobalError', 50),
    (2477, '@ExceptionHandler 애노테이션은 어떤 용도로 사용하는가?', 3, '중', '로그 기록', '요청 DTO 검증', '특정 예외 발생 시 처리 로직 실행', '정상 응답 반환', 50),
    (2478, 'Kotlin에서 sealed class를 예외 처리에 활용할 수 있는 이유는?', 2, '상', '무조건 에러가 발생하기 때문', '서브 클래스의 종류가 제한되어 패턴 매칭이 가능하기 때문', '코드를 간결하게 만들기 때문', '오직 싱글톤으로만 동작하기 때문', 50),
    (2479, 'Service 계층 테스트 시 Mock 객체를 만들기 위해 사용되는 Kotlin 라이브러리는?', 4, '상', 'Mockito', 'Kotest', 'Kluent', 'MockK', 50),
    (2480, '서비스 계층에서 여러 예외 케이스를 명확히 나누고자 할 때 가장 Kotlin스러운 방법은?', 3, '상', 'Exception 메시지를 문자열로 다르게 줌', 'RuntimeException만 사용', 'sealed class로 예외 분기 + when으로 처리', '로그에 예외를 분기해서 기록', 50),
    (2481, 'Kotlin에서 JPA Entity 클래스를 정의할 때 가장 중요한 키워드는?', 3, '하', '@Bean', '@Component', '@Entity', '@Table', 50),
    (2482, 'JPA에서 Entity 클래스에 반드시 선언해야 하는 필드는?', 4, '하', 'String name', 'val type', 'Primary constructor', '식별자 필드(@Id)', 50),
    (2483, 'Kotlin의 `val` 필드로 선언된 Entity 속성의 주의점은?', 1, '중', '수정이 불가능하여 setter가 생성되지 않음', '자동으로 데이터베이스와 동기화됨', '엔티티 매핑이 자동으로 생략됨', '모든 필드가 nullable이 됨', 50),
    (2484, 'JPA에서 엔티티 필드가 `null`을 허용하도록 하려면 Kotlin에서 어떤 문법을 사용하는가?', 3, '중', 'lateinit', 'nullsafe', '?', '!!', 50),
    (2485, 'Kotlin에서 JPA를 사용할 때 `data class`를 피해야 하는 이유는?', 1, '중', '자동 생성된 equals/hashCode가 프록시 객체와 충돌할 수 있음', '모든 필드가 자동으로 final이 되기 때문', 'JPA는 data class를 지원하지 않기 때문', 'data class는 Bean으로 등록되지 않기 때문', 50),
    (2486, '엔티티 클래스가 `open` 키워드를 가져야 하는 주된 이유는?', 2, '중', 'Spring DevTools와 호환되기 위해', 'JPA가 프록시 생성을 위해 런타임에 상속 구조를 사용하기 때문', '엔티티를 View에 노출하기 위해', '모든 Bean이 open이어야 하기 때문', 50),
    (2487, 'JPA에서 `@GeneratedValue`는 어떤 역할을 하는가?', 2, '하', '필드에 기본값을 설정', 'ID 값을 자동으로 생성', '엔티티를 자동으로 저장', 'Entity를 불변으로 만듦', 50),
    (2488, '코틀린에서 지연 로딩(LAZY)을 사용할 때 발생할 수 있는 문제는?', 3, '상', '자동 저장 누락', '코루틴과 충돌', '프록시 초기화 시 NPE 발생 가능성', '동시성 충돌', 50),
    (2489, '다음 중 Kotlin에서 JPA Entity를 작성할 때 권장되지 않는 설계 방식은?', 2, '상', '기본 생성자 제공', '생성자 파라미터를 모두 val로 고정', 'nullable 필드에 기본값 설정', '엔티티 클래스에 open 키워드 사용', 50),
    (2490, 'Spring Boot에서 JPA를 Kotlin과 함께 사용할 때 필수적인 gradle 플러그인은?', 4, '상', 'kotlin-android', 'spring-boot-jpa', 'kotlin-jpa', 'kotlin-allopen', 50),
    (2491, 'Kotlin에서 코루틴을 선언하기 위해 사용하는 키워드는?', 3, '하', 'launch', 'async', 'suspend', 'thread', 50),
    (2492, 'Spring에서 Kotlin 코루틴을 지원하기 위한 종속성은?', 3, '하', 'spring-boot-starter-reactor', 'spring-kotlin-coroutines', 'spring-boot-starter-webflux', 'spring-coroutines-support', 50),
    (2493, '`@Async`를 사용하면 Spring에서 어떤 처리를 할 수 있는가?', 2, '하', '자동으로 캐싱한다', '비동기적으로 메서드를 실행한다', '코루틴을 자동 생성한다', '애플리케이션을 종료한다', 50),
    (2494, '코루틴에서 `Deferred<T>`는 무엇을 의미하는가?', 3, '중', '비동기 흐름을 끊는 객체', 'Thread 대신 사용하는 객체', '비동기 작업의 결과를 담는 약속(Promise)', '예외를 모니터링하는 객체', 50),
    (2495, 'Spring WebFlux와 코루틴을 함께 사용할 때 가장 적합한 반환 타입은?', 4, '중', 'Deferred<T>', 'ResponseEntity<T>', 'Mono<T>', 'suspend fun', 50),
    (2496, 'Kotlin 코루틴에서 I/O 작업에 최적화된 Dispatcher는?', 3, '중', 'Dispatchers.Default', 'Dispatchers.Main', 'Dispatchers.IO', 'Dispatchers.Unconfined', 50),
    (2497, 'Spring에서 `@EnableAsync`를 선언하지 않으면?', 3, '중', '스프링 컨테이너가 실행되지 않는다', '코루틴이 중단된다', '`@Async`가 무시된다', 'DI가 실패한다', 50),
    (2498, 'Kotlin에서 비동기 흐름을 선언적으로 구성할 수 있는 라이브러리는?', 3, '상', 'Ktor', 'RxJava', 'Flow', 'Stream', 50),
    (2499, 'suspend 함수 내에서 다른 suspend 함수를 호출할 수 있는 이유는?', 3, '상', '컴파일 타임 최적화 때문', '동시에 실행되기 때문', '코루틴 컨텍스트를 공유하기 때문', 'suspend 함수는 블로킹을 허용하기 때문', 50),
    (2500, '다음 중 Spring + Kotlin 비동기 처리에서 피해야 할 잘못된 조합은?', 3, '상', 'suspend fun + WebClient', 'suspend fun + ResponseEntity', 'suspend fun + @Async', 'suspend fun + Flow', 50),
    (2501, 'Spring Data JPA에서 Repository 인터페이스를 만들기만 해도 쿼리가 작동하는 이유는?', 2, '하', '자동 컴파일 기능 덕분', 'Spring이 내부적으로 SQL을 생성해주기 때문', 'JVM이 데이터를 추론하기 때문', 'Hibernate가 모든 쿼리를 캐싱하기 때문', 51),
    (2502, 'JPA에서 @Entity가 붙은 클래스의 의미는?', 2, '하', '클래스를 HTTP 요청으로 사용한다는 뜻', '클래스를 DB 테이블과 매핑하겠다는 뜻', '클래스를 DTO로 사용하겠다는 뜻', '클래스를 static으로 만든다는 뜻', 51),
    (2503, 'Hibernate에서 ''영속성 컨텍스트''의 주요 기능은?', 2, '중', 'SQL 정렬 기능', '객체의 생명 주기를 관리하고 1차 캐시 제공', '웹 요청을 모니터링', '클래스 파일을 컴파일', 51),
    (2504, 'QueryDSL의 가장 큰 장점은?', 2, '중', 'SQL이 필요 없다', '복잡한 쿼리를 자바 코드로 타입 안정성 있게 작성할 수 있다', '자동으로 API를 생성해준다', '로그를 출력하지 않는다', 51),
    (2505, '다음 중 MyBatis의 주요 특징은?', 1, '중', 'ORM 없이 SQL을 XML 또는 Annotation으로 직접 작성', 'JPA 기반 쿼리 추상화', '데이터 직렬화 전용 도구', '로그 분석 프레임워크', 51),
    (2506, 'Spring Data JPA에서 사용하는 @Query 어노테이션은 어떤 용도인가?', 2, '중', '객체 직렬화', '직접 JPQL 또는 SQL 쿼리를 작성하기 위해', '엔티티 필터링을 위한 어노테이션', 'JSON 변환 설정', 51),
    (2507, 'JPA의 Entity는 기본적으로 어떤 구조로 데이터를 관리하는가?', 2, '상', '스키마리스 구조', '객체지향 매핑 구조', '이벤트 기반 구조', '키-값 저장 구조', 51),
    (2508, 'QueryDSL을 사용하려면 어떤 도구로 Q클래스를 생성해야 하는가?', 2, '상', 'IntelliJ', 'Gradle Annotation Processor', 'Lombok', 'JVM', 51),
    (2509, 'MyBatis의 resultMap은 어떤 역할을 수행하는가?', 3, '상', '로그 출력', '쿼리 자동 생성', 'SQL 결과를 Java 객체에 매핑', '의존성 주입', 51),
    (2510, 'JPA에서 fetch join을 사용할 때 주의할 점은?', 3, '상', '로그 레벨을 바꿔야 한다', '사용하면 항상 지연 로딩이 된다', 'distinct 없이 join이 중복 결과를 만들 수 있다', '쿼리가 캐시되지 않는다', 51),
    (2511, 'Spring Security의 기본 역할은 무엇인가?', 3, '하', '데이터베이스 연결 관리', 'HTML 렌더링 최적화', '웹 애플리케이션의 인증 및 인가 처리', '프론트엔드 스타일링', 51),
    (2512, 'JWT에서 토큰의 유효성을 검증하기 위해 필요한 요소는?', 3, '하', '이메일', 'DB 연결 정보', '서명에 사용된 시크릿 키', '프론트엔드 라우터', 51),
    (2513, '다음 중 javax.validation에서 사용되는 어노테이션은?', 3, '하', '@ValidValue', '@Check', '@NotNull', '@EntityCheck', 51),
    (2514, '@PreAuthorize 어노테이션의 주요 기능은?', 3, '중', 'API 호출 로깅', '요청 바디 유효성 검사', '메서드 실행 전에 권한 조건을 평가', '프론트엔드 라우팅을 정의', 51),
    (2515, 'Spring Security에서 Authentication 객체는 어떤 정보를 담고 있는가?', 2, '중', 'DB 연결 설정', '인증된 사용자 정보 및 권한', 'View 템플릿 이름', 'API 문서 경로', 51),
    (2516, 'Validator를 커스터마이징하려면 구현해야 하는 인터페이스는?', 4, '중', 'ValidationEngine', 'javax.validation.Validator', 'SpringSecurityChecker', 'ConstraintValidator', 51),
    (2517, 'JWT 토큰 기반 인증의 가장 큰 장점은?', 2, '상', '모든 요청에 대해 DB를 통해 세션 조회', '상태를 서버에 저장하지 않아 확장성이 높음', '서버 부하가 항상 일정함', '응답 시간이 느림', 51),
    (2518, 'Spring Security에서 필터 체인의 순서를 조정하려면 어디에 설정해야 하는가?', 2, '상', 'application.yml', 'securityFilterChain Bean 등록 시', 'Controller 클래스 내부', 'Validator 클래스 내부', 51),
    (2519, 'JSR-380은 어떤 기술과 관련 있는 명세인가?', 2, '상', '자바스크립트 비동기 처리', 'Java의 Bean Validation (예: @NotNull 등)', '스프링 REST 템플릿', 'Gradle 빌드 최적화', 51),
    (2520, 'Spring Security의 인증 실패 처리를 위한 기본 전략은?', 3, '상', 'AccessDeniedHandler', 'AuthenticationSuccessHandler', 'AuthenticationFailureHandler', 'UnauthorizedException', 51),
    (2521, 'Swagger의 주된 목적은 무엇인가?', 3, '하', '보안 설정', 'API 요청을 암호화', 'API 명세서를 자동으로 생성하고 테스트 제공', '로그를 파일에 저장', 51),
    (2522, 'Spring에서 Swagger UI 기본 접근 경로는?', 2, '하', '/docs', '/swagger-ui.html', '/api-spec', '/open-api', 51),
    (2523, 'Springdoc(OpenAPI)에서 자동 문서를 생성하기 위해 사용하는 주석은?', 3, '하', '@ApiDoc', '@RestSchema', '@Operation', '@Describe', 51),
    (2524, '다음 중 Java 객체를 JSON으로 직렬화할 때 사용하는 Jackson 어노테이션은?', 1, '중', '@JsonSerialize', '@JsonEntity', '@JsonJoin', '@JsonConvert', 51),
    (2525, '직렬화란 무엇을 의미하는가?', 2, '중', 'SQL 쿼리를 정렬', '데이터를 JSON이나 XML 같은 형식으로 변환', '객체를 메모리에 적재', '코드를 자동 컴파일', 51),
    (2526, 'GSON 라이브러리의 주된 기능은?', 2, '중', 'REST API 보안', 'JSON 직렬화 및 역직렬화', '서버 간 메시지 전달', '스프링 컨텍스트 초기화', 51),
    (2527, 'Swagger에서 각 API의 설명을 작성할 때 사용하는 어노테이션은?', 3, '중', '@ApiDescription', '@ApiInfo', '@ApiOperation', '@OpenApiSpec', 51),
    (2528, 'Jackson에서 특정 필드를 JSON 결과에 포함하지 않으려면 사용하는 어노테이션은?', 1, '상', '@JsonIgnore', '@JsonExclude', '@SkipField', '@HideFromJson', 51),
    (2529, 'Spring REST Docs의 특징으로 올바른 것은?', 1, '상', '테스트 코드 기반으로 문서를 생성', 'Swagger UI를 기반으로 한다', 'MySQL 데이터 문서를 만든다', 'GraphQL 쿼리를 시각화한다', 51),
    (2530, 'API 문서화를 위한 Swagger 설정은 보통 어디에 정의하는가?', 3, '상', 'DTO 클래스', 'application.yml', 'SwaggerConfig 클래스', 'Controller 내부', 51),
    (2531, 'SLF4J는 어떤 역할을 하는 라이브러리인가?', 3, '하', 'API 문서를 생성한다', 'SQL 쿼리를 최적화한다', '로깅의 추상화를 제공하여 구현체 교체를 유연하게 한다', '데이터베이스를 백업한다', 51),
    (2532, '다음 중 Logback에 대한 설명으로 올바른 것은?', 3, '하', 'HTML 렌더링을 수행한다', 'SLF4J를 대체하는 웹 프레임워크이다', 'SLF4J의 구현체 중 하나로 로그를 파일, 콘솔 등으로 출력', '보안 필터링 도구이다', 51),
    (2533, 'Spring Cache를 사용하기 위해 메서드 위에 붙이는 어노테이션은?', 3, '하', '@CachePut', '@CacheValue', '@Cacheable', '@EnableCache', 51),
    (2534, 'Redis의 가장 큰 장점 중 하나는?', 3, '중', '데이터를 장기 보존할 수 있음', 'HTTP 요청을 처리함', '메모리 기반 캐싱으로 빠른 데이터 접근 가능', '파일 시스템과 연동이 뛰어남', 51),
    (2535, 'Spring Batch에서 ''Job''이란 무엇을 의미하는가?', 3, '중', '하나의 API 요청', '하나의 트랜잭션 처리', '여러 Step으로 구성된 일괄 처리 단위', '하나의 SQL 쿼리', 51),
    (2536, 'Spring Batch의 구성 요소 중 Step의 역할은?', 2, '중', '단위 테스트 실행', '하나의 작업 단계를 의미하며 Reader, Processor, Writer로 구성', '배포 설정을 관리', '에러를 처리', 51),
    (2537, '다음 중 Spring Batch에서 데이터를 읽는 역할을 수행하는 구성요소는?', 2, '상', 'Job', 'ItemReader', 'ItemWriter', 'Tasklet', 51),
    (2538, 'Spring에서 로그를 JSON 포맷으로 출력하려면 사용하는 설정은?', 2, '상', 'logback-xml-transformer', 'logstash-logback-encoder', 'jackson-logger', 'slf4j-parser', 51),
    (2539, 'Spring Cache에서 캐시를 비우는 데 사용하는 어노테이션은?', 2, '상', '@CacheClear', '@CacheEvict', '@CacheDrop', '@CacheReset', 51),
    (2540, 'Spring Batch의 Reader, Processor, Writer 구조를 사용하는 이유는?', 3, '상', '코드를 짧게 줄이기 위해', '병렬 처리를 방지하기 위해', '대량 데이터를 효율적으로 처리하기 위해', '네트워크 연결을 단절하기 위해', 51),
    (2541, 'JUnit5에서 테스트 메서드 위에 붙이는 기본 어노테이션은?', 3, '하', '@Execute', '@Start', '@Test', '@Run', 51),
    (2542, 'Mockito의 주요 사용 목적은?', 2, '하', '빌드 스크립트를 실행', '객체를 모킹하여 독립적인 테스트 수행', '실제 DB 연결 테스트', '배치 잡 실행을 예약', 51),
    (2543, 'Spring Boot에서 테스트 클래스에 붙이는 어노테이션은?', 4, '하', '@SpringTest', '@MockTest', '@BootTest', '@SpringBootTest', 51),
    (2544, 'Testcontainers의 가장 큰 장점은?', 1, '중', '실제 DB 환경과 동일한 조건으로 테스트 가능', '단위 테스트 속도 감소', '로컬 환경에서만 동작', 'JVM에서만 실행', 51),
    (2545, 'Mockito에서 특정 메서드 호출을 검증하려면 사용하는 함수는?', 2, '중', 'when()', 'verify()', 'assertThat()', 'doReturn()', 51),
    (2546, 'Gradle의 설정 파일 확장자는?', 1, '중', '.gradle', '.yaml', '.bat', '.conf', 51),
    (2547, 'Maven에서 의존성을 관리하는 기본 파일은?', 3, '중', 'pom.gradle', 'settings.gradle', 'pom.xml', 'maven.config', 51),
    (2548, 'JUnit 테스트에서 예외 발생을 테스트할 때 사용하는 어노테이션은?', 1, '상', '@Test(expected = ...)', '@Throws', '@AssertException', '@Catch', 51),
    (2549, 'Testcontainers는 어떤 기술을 기반으로 작동하는가?', 3, '상', 'VMWare', 'Gradle Wrapper', 'Docker 컨테이너', 'Spring Devtools', 51),
    (2550, '빌드 도구 중 멀티 모듈 프로젝트에서 자주 사용되는 도구는?', 3, '상', 'Logback', 'JUnit', 'Gradle 또는 Maven', 'Mockito', 51),
    (2551, 'Spring Data JPA에서 Kotlin 데이터를 엔티티로 선언할 때 가장 적절한 키워드는?', 1, '하', 'open class', 'sealed class', 'object', 'data class', 52),
    (2552, 'Kotlin에서 JPA를 사용할 때 반드시 class를 open으로 선언하는 이유는?', 3, '하', '컴파일 최적화를 위해', 'Spring Boot에서 자동으로 열어주기 때문', '프록시 생성을 위해 상속이 가능해야 하기 때문', '코드의 가독성을 높이기 위해', 52),
    (2553, 'JPA에서 Kotlin의 data class를 엔티티로 직접 사용하지 않는 주된 이유는?', 4, '중', '생성자 파라미터가 자동 인식되지 않아서', 'Spring과 호환되지 않아서', '직렬화가 불가능해서', 'toString(), equals() 등이 자동 생성되어 문제가 생기기 쉬워서', 52),
    (2554, 'QueryDSL을 Kotlin에서 사용하기 위해 필요한 추가 도구는?', 1, '중', 'KSP 또는 kapt를 통한 Q 클래스 생성', 'Spring Security 설정', 'Swagger 플러그인', 'Coroutine Dispatcher', 52),
    (2555, 'QueryDSL의 Q타입 클래스는 어떤 방식으로 생성되는가?', 3, '중', '런타임 리플렉션', 'JVM 컴파일러 자동 생성', '애노테이션 프로세서로 빌드 타임 생성', 'IDE 내부 캐시', 52),
    (2556, 'JPA에서 @Id가 붙은 필드는 어떤 역할을 하는가?', 3, '하', '로그 출력용', 'DB에 저장되는 파일 경로를 의미', '기본 키로 사용되어 엔티티를 구분', '캐시 처리를 위한 식별자', 52),
    (2557, 'Spring Data JPA에서 findByEmail 같은 메서드는 어떻게 동작하는가?', 1, '중', '런타임 시 매핑 정보에 따라 SQL이 직접 작성됨', '정적 HTML 문서를 생성', '서비스 레이어에 자동으로 주입됨', '정적 JSON 결과로 매핑', 52),
    (2558, 'QueryDSL에서 where 절을 Kotlin DSL 스타일로 연결할 때 사용하는 연산자는?', 3, '상', '&&', 'plus()', 'and()', 'infix between()', 52),
    (2559, 'Spring JPA에서 native query를 Kotlin에서 사용할 때의 주의점은?', 1, '상', 'nullable 처리 및 매핑 오류 방지', '문자열 연결 방식 제한', '로그 출력이 불가능함', '캐시 저장 불가능', 52),
    (2560, 'Kotlin DSL 기반 QueryDSL의 가장 큰 장점은?', 2, '상', '네이티브 쿼리 속도 향상', '가독성 높은 코드와 타입 안정성', '자동 테이블 생성', '모든 JPA 설정 생략 가능', 52),
    (2561, 'Spring Security의 기본 동작 목적은?', 3, '하', '데이터 직렬화', '로그 포맷팅', '애플리케이션의 인증과 인가 처리', 'SQL 최적화', 52),
    (2562, 'JWT 토큰의 구성 요소로 올바른 것은?', 3, '하', 'Payload.Header.Signature', 'Token.Sign.Secret', 'Header.Payload.Signature', 'UserInfo.Token.Expiry', 52),
    (2563, 'Kotlin에서 Spring Security를 적용할 때 인증 정보를 가져오는 방식으로 가장 적절한 것은?', 1, '하', 'SecurityContextHolder.getContext().authentication', 'Thread.currentThread()', 'ApplicationContext.getBean()', 'Kotlin Reflection', 52),
    (2564, 'JWT 토큰의 만료 시간을 설정하려면 어떤 claim을 사용해야 하는가?', 2, '중', 'sub', 'exp', 'auth', 'iss', 52),
    (2565, 'Kotlin DSL을 활용한 유효성 검증 코드에서 자주 사용되는 구조는?', 3, '중', 'if-else 체인', 'try-catch 반복', 'require()와 check() 함수', 'println() 기반 분기', 52),
    (2566, 'javax.validation에서 문자열이 비어 있지 않아야 할 때 사용하는 어노테이션은?', 2, '중', '@Nullable', '@NotBlank', '@Max', '@NotEmpty', 52),
    (2567, 'Spring Security에서 권한을 설정할 때 사용되는 클래스는?', 1, '중', 'HttpSecurity', 'RestTemplate', 'JwtEncoder', 'DataBinder', 52),
    (2568, 'JWT 기반 인증에서 토큰이 만료되었을 때 서버는 보통 어떻게 응답하는가?', 4, '상', '403 Forbidden', '200 OK', '302 Redirect', '401 Unauthorized', 52),
    (2569, 'Spring Security 설정 시 요청 경로에 대한 접근 제한은 어디서 설정하는가?', 2, '상', 'application.yml', 'SecurityFilterChain DSL 내부', 'Controller 내부', 'JWT Decoder', 52),
    (2570, 'Kotlin에서 사용자 입력에 대한 커스텀 유효성 검사를 구현하려면 어떤 인터페이스를 구현해야 하는가?', 1, '상', 'Validator', 'Checker', 'RequestGuard', 'FieldFilter', 52),
    (2571, 'Kotlin Coroutine의 가장 큰 장점 중 하나는?', 2, '하', '멀티 쓰레드를 강제로 사용', '비동기 작업을 직관적이고 선언적으로 작성 가능', 'JVM에 직접 연동됨', '데이터베이스와만 사용됨', 52),
    (2572, 'WebClient는 어떤 구조의 HTTP 요청 처리 방식인가?', 3, '하', '블로킹 방식', '동기식 처리', '논블로킹 방식', '모놀리식 통신', 52),
    (2573, 'WebClient는 어떤 패키지에 포함되어 있는가?', 1, '하', 'org.springframework.web.reactive.function.client', 'java.net.http', 'javax.servlet.client', 'org.springframework.web.client.blocking', 52),
    (2574, '다음 중 Coroutine에서 비동기 작업을 실행하는 함수는?', 4, '중', 'delay()', 'launch{}', 'async{}', 'both launch{} and async{}', 52),
    (2575, 'WebClient를 사용할 때 비동기 결과를 받기 위해 사용하는 리턴 타입은?', 3, '중', 'String', 'Deferred<T>', 'Mono<T>', 'FutureTask<T>', 52),
    (2576, 'CoroutineScope를 명시적으로 지정하지 않고 사용하는 경우 어떤 문제가 발생할 수 있는가?', 3, '중', '성능 향상', '컴파일 에러', '코루틴 누수(leak) 발생', 'JPA가 초기화되지 않음', 52),
    (2577, 'WebClient 설정 시 요청 timeout 설정은 어디에 적용하는가?', 2, '상', 'WebClient 기본 생성자', 'HttpClient 옵션 설정', 'BaseUrl 설정', 'JPA Configuration', 52),
    (2578, 'Coroutine에서 실행 중 예외가 발생하면?', 3, '상', '즉시 JVM이 종료된다', '모든 코루틴이 자동 정지된다', '해당 스코프 내 예외 처리 로직이 없으면 전파된다', '예외가 무시된다', 52),
    (2579, 'WebClient에서 헤더를 설정하려면 어떤 메서드를 사용하는가?', 2, '상', 'addHeader()', 'header()', 'setHttpHeader()', 'withHeaders()', 52),
    (2580, 'Kotlin Coroutine을 사용하여 서버 응답 시간을 줄이기 위해 자주 사용하는 키워드는?', 2, '상', 'runBlocking', 'withTimeout', 'awaitClose', 'yield', 52),
    (2581, 'Springdoc-openapi의 주요 목적은?', 3, '하', 'DB 연결을 자동화', 'API 요청을 캐싱', 'OpenAPI 3.0 명세 기반 문서 자동 생성', '로깅 레벨을 제어', 52),
    (2582, 'Swagger UI는 주로 어떤 기능을 제공하는가?', 2, '하', 'API 서버 간 연동', 'API를 시각적으로 테스트 및 문서화', 'SQL 쿼리 튜닝', '애플리케이션 모니터링', 52),
    (2583, 'Kotlin Logging의 주요 특징은?', 3, '하', 'JSP 로그만 지원', 'Spring 전용 로깅 도구', 'Kotlin에 최적화된 SLF4J 래퍼', 'Logback의 경쟁 도구', 52),
    (2584, '다음 중 Spring Cache에서 사용되는 어노테이션은?', 1, '중', '@CachePut', '@CacheStore', '@EnableCache', '@StoreResult', 52),
    (2585, 'Redis의 가장 큰 장점은?', 3, '중', '파일 기반 처리', '오라클 DB 통합', '인메모리 기반 고속 캐시 시스템', '스레드 안전성 없음', 52),
    (2586, 'Spring Cache를 활성화하기 위한 설정은?', 3, '중', '@EnableTransactionManagement', '@EnableScheduling', '@EnableCaching', '@EnableRedis', 52),
    (2587, 'Kotlin에서 로그를 출력하려면 KotlinLogging을 사용해 어떤 객체를 선언하는가?', 3, '중', 'val log = LoggerFactory.getLogger()', 'val log = LogManager.getLogger()', 'val log = KotlinLogging.logger {}', 'val log = System.out', 52),
    (2588, 'Swagger에서 각 API 메서드를 설명할 때 사용하는 어노테이션은?', 2, '상', '@ApiMethod', '@Operation', '@ApiAction', '@Endpoint', 52),
    (2589, 'Spring Cache에서 조건부 캐시 적용 시 사용하는 속성은?', 1, '상', 'unless', 'conditionOnly', 'onError', 'setIf', 52),
    (2590, '다음 중 캐시 무효화를 위해 사용하는 어노테이션은?', 3, '상', '@CacheExpire', '@CacheInvalidate', '@CacheEvict', '@ClearCache', 52),
    (2591, 'Kotlin에서 테스트를 위한 대표적인 라이브러리로 올바른 것은?', 2, '하', 'SpringTools', 'kotest', 'Postman', 'MockitoJVM', 52),
    (2592, 'mockk 라이브러리의 특징은?', 3, '하', '자바 전용 목킹 라이브러리', 'Spring Boot 전용 문서화 도구', 'Kotlin에 최적화된 목(mock) 객체 생성 도구', '테스트 DB 자동 초기화 도구', 52),
    (2593, 'JUnit5의 기본 어노테이션은?', 4, '하', '@TestCase', '@JUnitTest', '@RunTest', '@Test', 52),
    (2594, 'Gradle Kotlin DSL의 빌드 스크립트 파일 확장자는?', 2, '중', '.gradlekts', '.kts', '.gradle', '.dslk', 52),
    (2595, 'Dockerfile에서 애플리케이션 실행을 위한 명령어는?', 3, '중', 'RUN', 'EXPOSE', 'CMD', 'COPY', 52),
    (2596, 'GitHub Actions의 주요 목적은?', 3, '중', '코드 스니펫 저장', '브랜치 병합 제한', 'CI/CD 자동화 워크플로우 구성', 'Slack 연동', 52),
    (2597, 'JUnit5에서 테스트 전후 실행되는 어노테이션은?', 1, '중', '@BeforeEach / @AfterEach', '@RunBefore / @RunAfter', '@PreTest / @PostTest', '@Start / @Stop', 52),
    (2598, 'mockk에서 특정 함수의 동작을 정의하려면 사용하는 함수는?', 3, '상', 'runWith()', 'given()', 'every { ... }', 'whenever()', 52),
    (2599, 'Docker 이미지 빌드를 위해 가장 먼저 작성하는 파일은?', 3, '상', 'build.gradle.kts', 'docker-compose.yml', 'Dockerfile', 'settings.gradle.kts', 52),
    (2600, 'GitHub Actions에서 워크플로우 실행 조건을 설정하는 파일은?', 4, '상', 'ci.yaml', '.workflow.yml', 'main.yml', '.github/workflows/*.yml', 52),
    (2601, 'Spring Boot 애플리케이션을 실행하기 위해 일반적으로 사용하는 명령어는?', 3, '하', 'java -compile app.jar', 'run app.jar', 'java -jar app.jar', 'spring start app.jar', 53),
    (2602, 'Spring에서 서로 다른 설정을 적용하기 위해 사용하는 개념은?', 2, '중', 'Environment', 'Profile', 'Context', 'PropertySource', 53),
    (2603, 'Spring Boot에서 활성화된 profile을 설정하는 방법으로 옳은 것은?', 3, '중', 'spring.run.profile=dev', 'set SPRING_PROFILE=dev', 'java -jar app.jar --spring.profiles.active=dev', 'profile=dev java -jar app.jar', 53),
    (2604, 'Spring Boot의 기본 내장 웹 서버는?', 1, '하', 'Tomcat', 'Jetty', 'Undertow', 'Netty', 53),
    (2605, '다음 중 Spring 애플리케이션 실행 시 로컬 환경 구분을 위한 올바른 프로퍼티 파일 이름은?', 2, '하', 'application-local.json', 'application-local.properties', 'application@local.yml', 'local-application.properties', 53),
    (2606, 'Spring Boot에서 커스텀 포트를 설정하려면 어떤 속성을 사용해야 하나?', 3, '하', 'server.custom.port', 'spring.port', 'server.port', 'web.port', 53),
    (2607, 'Spring Boot 프로젝트를 패키징할 때 jar 파일이 실행 가능하게 만들어지는 이유는?', 2, '중', 'Gradle이 zip으로 변환해서', 'Spring Boot Plugin이 main-class와 dependency를 병합하기 때문에', 'Tomcat이 내장되어 있기 때문에', 'JVM이 자동으로 클래스 경로를 탐색하기 때문에', 53),
    (2608, 'Spring Boot에서 명시적으로 사용할 profile을 application.properties에 설정할 때 사용하는 키는?', 4, '중', 'spring.profile.default', 'spring.active', 'spring.application.profile', 'spring.profiles.active', 53),
    (2609, '다음 중 Spring Boot 내장 서버가 아닌 것은?', 4, '상', 'Tomcat', 'Jetty', 'Netty', 'GlassFish', 53),
    (2610, 'Spring Boot 애플리케이션의 실행 진입점 클래스는 보통 어떤 어노테이션을 사용하나요?', 2, '하', '@EnableAutoConfiguration', '@SpringBootApplication', '@Configuration', '@ComponentScan', 53),
    (2611, 'Spring Boot 애플리케이션을 Docker 컨테이너로 빌드하기 위한 파일은?', 3, '하', 'build.gradle', 'dockerfile', 'Dockerfile', 'settings.gradle', 53),
    (2612, 'Nginx에서 다른 서버로 요청을 전달할 때 사용하는 지시어는?', 1, '중', 'proxy_pass', 'pass_request', 'redirect_to', 'reverse_pass', 53),
    (2613, 'Spring Boot Docker 이미지 빌드시 자주 사용하는 JDK 기반 경량 베이스 이미지로 적절한 것은?', 2, '중', 'ubuntu:latest', 'openjdk:17-alpine', 'java:11-full', 'springboot:base', 53),
    (2614, 'Dockerfile에서 JAR 파일을 실행하는 명령으로 가장 적절한 것은?', 3, '중', 'CMD ["spring", "run", "app.jar"]', 'RUN app.jar', 'CMD ["java", "-jar", "app.jar"]', 'ENTRYPOINT app.jar', 53),
    (2615, 'Spring Boot 애플리케이션을 Nginx와 함께 사용할 때 가장 일반적인 아키텍처는?', 1, '하', 'Nginx가 프론트엔드 역할, Spring이 백엔드 역할', 'Spring이 요청을 받아 Nginx로 전달', 'Nginx가 DB 역할 수행', 'Spring Boot가 정적 리소스만 처리', 53),
    (2616, 'Docker Compose를 사용할 때 여러 컨테이너 간 네트워크 연결을 자동으로 해주는 기본 네트워크는?', 4, '중', 'external', 'host', 'bridge', 'default network', 53),
    (2617, 'HTTPS 통신을 위해 필요한 기본 요소는?', 3, '중', '리버스 프록시', 'Docker 이미지', 'SSL 인증서', 'Spring Profile', 53),
    (2618, 'Nginx 설정에서 443 포트를 사용하는 이유는?', 3, '하', 'HTTP 요청을 전달하기 위해', 'Docker 컨테이너를 실행하기 위해', 'HTTPS 보안을 위해', 'Spring Boot 로깅을 위해', 53),
    (2619, 'Spring Boot와 Nginx 연동 시 CORS 문제가 발생할 수 있는 주요 원인은?', 3, '상', '포트 충돌', 'Docker 버전 불일치', '프록시 설정 누락', 'profile 설정 오류', 53),
    (2620, 'Docker에서 build한 이미지로 컨테이너를 생성할 때 사용하는 명령은?', 1, '하', 'docker run', 'docker build', 'docker start', 'docker exec', 53),
    (2621, 'Spring Boot에서 서로 다른 환경별 설정을 분리할 수 있도록 지원하는 기능은?', 3, '하', 'Spring Actuator', 'Spring Security', 'Spring Profile', 'Spring JPA', 53),
    (2622, 'Spring Boot에서 기본 설정 파일 이름은?', 3, '하', 'application.json', 'config.yml', 'application.yml', 'settings.xml', 53),
    (2623, 'Spring Profile을 통해 ''dev'', ''prod'' 설정을 나누었을 때 실행 시 적용할 Profile을 설정하는 방법은?', 2, '중', 'spring.profile.active', 'spring.profiles.active', 'spring.env.active', 'spring.profile.set', 53),
    (2624, '.env 파일을 통해 환경 변수를 정의하고 Spring에서 사용하려면 어떤 라이브러리를 사용하는 것이 일반적인가?', 2, '상', 'spring-boot-starter-data-jpa', 'dotenv-java', 'spring-cloud', 'spring-context-support', 53),
    (2625, 'application.yml에서 포트를 8081로 설정하려면 어떤 속성을 수정해야 하는가?', 3, '하', 'server.host', 'spring.port', 'server.port', 'spring.application.port', 53),
    (2626, '다음 중 application.yml에서 profile 별로 설정을 나누는 방법으로 올바른 것은?', 4, '중', '---', '# dev config', '- profile: dev', '---spring:  profiles: dev', 53),
    (2627, '환경 변수로 DB 비밀번호를 설정하고 이를 application.yml에서 참조하려면 사용하는 문법은?', 1, '중', '${DB_PASSWORD}', '@DB_PASSWORD', '#DB_PASSWORD#', '{{ DB_PASSWORD }}', 53),
    (2628, '운영환경에서 민감 정보 노출을 피하기 위해 사용하는 설정 전략은?', 3, '중', '모든 설정을 하나의 파일에 저장', '소스코드에 직접 하드코딩', '환경 변수와 Profile 분리 사용', 'application.properties에 고정 저장', 53),
    (2629, 'application.properties 파일에서 사용하는 포맷은?', 3, '하', 'JSON', 'YAML', 'key=value', 'INI', 53),
    (2630, 'Spring Boot에서 환경 변수 우선순위가 가장 높은 설정 방식은?', 3, '상', 'application.yml', 'application.properties', '명령줄 인자', 'Profile 지정', 53),
    (2631, 'CI/CD에서 ''CI''는 무엇의 약자인가?', 2, '하', 'Code Integration', 'Continuous Integration', 'Component Integration', 'Central Interface', 53),
    (2632, 'GitHub Actions에서 workflow 파일의 기본 경로는?', 3, '하', '.git/workflows/', 'ci/config.yml', '.github/workflows/', 'docker/actions/', 53),
    (2633, 'GitHub Actions에서 Java 프로젝트의 빌드 도구로 Gradle을 사용할 때 기본 명령어는?', 1, '하', './gradlew build', 'gradle run', 'java build', 'mvn compile', 53),
    (2634, 'Spring Boot 프로젝트를 DockerHub에 배포하기 위한 Dockerfile에서 사용되는 기본 명령어는?', 2, '중', 'ENTRYPOINT', 'FROM', 'PUBLISH', 'STAGE', 53),
    (2635, 'GitHub Actions에서 workflow 실행 조건을 지정할 때 사용하는 키워드는?', 1, '중', 'on', 'run', 'if', 'trigger', 53),
    (2636, 'DockerHub에 이미지를 푸시(push)할 때 필요한 인증 정보는?', 3, '중', 'API key', '액세스 토큰', 'username과 password/token', 'SSH key', 53),
    (2637, 'Spring Boot 애플리케이션을 위한 GitHub Actions 워크플로우에서 테스트 단계를 실행하려면 어떤 명령어가 적절한가?', 2, '하', './gradlew run', './gradlew test', 'mvn clean', 'java -jar app.jar', 53),
    (2638, 'GitHub Actions에서 비공개 정보(예: DockerHub 토큰)를 저장하기 위한 공간은?', 3, '하', 'Repository Settings > Webhooks', '.env 파일', 'Repository Settings > Secrets', 'Actions Cache', 53),
    (2639, 'Spring Boot 프로젝트에서 GitHub Actions로 CI/CD를 구성할 때, 주로 사용되는 Java 버전 지정 키는?', 4, '중', 'java_version', 'version', 'java.setup', 'java-version', 53),
    (2640, 'GitHub Actions에서 여러 Job을 병렬로 실행하고 싶을 때 사용하는 키워드는?', 1, '상', 'matrix', 'concurrent', 'parallel', 'multi', 53),
    (2641, 'Spring Boot 애플리케이션의 상태를 확인할 수 있는 라이브러리는?', 3, '하', 'Spring Security', 'Spring Web', 'Spring Boot Actuator', 'Spring AOP', 53),
    (2642, 'Spring Boot Actuator의 기본 엔드포인트 중 메트릭 정보를 제공하는 것은?', 2, '하', '/actuator/loggers', '/actuator/metrics', '/actuator/info', '/actuator/env', 53),
    (2643, 'Spring Boot와 Micrometer를 함께 사용할 때 메트릭 데이터를 Prometheus로 수집하려면 어떤 의존성이 필요한가?', 1, '중', 'micrometer-registry-prometheus', 'micrometer-core', 'spring-boot-starter-security', 'spring-cloud-prometheus', 53),
    (2644, 'Spring Boot에서 로깅 구성 시 application.yml 파일에서 설정할 수 있는 로깅 레벨은?', 1, '하', 'ERROR, WARN, INFO, DEBUG, TRACE', 'CRITICAL, ALERT, DEBUG', 'HIGH, MEDIUM, LOW', 'ALL, NONE, CUSTOM', 53),
    (2645, '다음 중 로그를 구조화된 형태로 수집하고 시각화하는 도구 조합으로 가장 적절한 것은?', 3, '중', 'Nginx + Logrotate', 'Docker + Redis', 'ELK Stack (Elasticsearch, Logstash, Kibana)', 'Spring Cloud + Eureka', 53),
    (2646, 'Micrometer를 사용할 때, 사용자 정의 커스텀 메트릭을 생성할 때 사용하는 메서드는?', 3, '중', 'Metrics.summary()', 'Metrics.custom()', 'Metrics.counter()', 'Metrics.metric()', 53),
    (2647, '다음 중 Grafana의 주요 역할은 무엇인가?', 3, '하', '로그 수집', '메트릭 저장', '시각화 대시보드 제공', '애플리케이션 로깅', 53),
    (2648, 'Spring Boot에서 로거를 구성할 때 추천되는 Kotlin-friendly 로깅 라이브러리는?', 3, '하', 'Java Logging', 'SLF4J', 'Kotlin Logging', 'Logrotate', 53),
    (2649, 'Spring Boot Actuator에서 관리 기능(예: 종료, 로그레벨 변경 등)을 활성화하려면 어떤 설정이 필요한가?', 1, '중', 'management.endpoints.web.exposure.include=*', 'logging.level=DEBUG', 'server.shutdown.enabled=true', 'spring.lifecycle.timeout=30s', 53),
    (2650, '다음 중 로그 파일의 용량 제한 및 순환(rotate)을 위한 유틸리티는?', 2, '중', 'Sentry', 'Logrotate', 'Actuator', 'Micrometer', 53),
    (2651, 'Node.js에서 파일 시스템을 제어하는 기본 모듈은?', 3, '하', 'os', 'http', 'fs', 'net', 54),
    (2652, 'Node.js에서 웹 서버를 생성하는 데 사용하는 모듈은?', 1, '하', 'http', 'net', 'stream', 'url', 54),
    (2653, 'path.join() 함수의 주요 목적은?', 2, '하', '파일 삭제', '경로 결합', '스트림 생성', 'URL 파싱', 54),
    (2654, 'os 모듈로 할 수 있는 작업은?', 2, '중', '파일 생성', '메모리 정보 확인', '라우팅', '웹 요청 수신', 54),
    (2655, 'url.parse() 함수의 주요 역할은?', 2, '중', '경로 조작', 'URL 구성요소 추출', 'HTML 파싱', '요청 응답 처리', 54),
    (2656, 'Buffer는 어떤 데이터를 처리하는 데 사용되는가?', 2, '중', '텍스트 데이터', '바이너리 데이터', 'JSON 데이터', '이미지 URL', 54),
    (2657, 'stream 모듈의 주된 용도는?', 3, '상', 'HTTP 라우팅', '이벤트 핸들링', '데이터 흐름 처리', '네트워크 소켓 연결', 54),
    (2658, 'util.promisify()의 역할은?', 2, '상', '동기화 실행', '콜백을 Promise로 변환', '파일 경로 병합', '서버 생성', 54),
    (2659, 'crypto 모듈은 무엇을 위한 것인가?', 2, '상', '네트워크 요청', '보안 해시 및 암호화', '디버깅', '서버 실행', 54),
    (2660, 'Node.js에서 global 객체는 어떤 역할을 하는가?', 1, '상', '전역 네임스페이스 제공', '모듈 임포트', '서버 생성', '파일 읽기', 54),
    (2661, 'Express.js에서 HTTP GET 요청을 처리하는 메서드는?', 2, '하', 'app.fetch()', 'app.get()', 'app.receive()', 'app.post()', 54),
    (2662, 'Express에서 정적 파일을 제공할 때 사용하는 미들웨어는?', 1, '하', 'express.static()', 'express.staticServe()', 'app.serve()', 'express.file()', 54),
    (2663, '다음 중 Express.js에서 경로 파라미터를 정의하는 방식은?', 3, '하', '/user/id', '/user?id=1', '/user/:id', '/user#id', 54),
    (2664, 'Express에서 미들웨어는 어떤 역할을 하는가?', 2, '중', '데이터베이스 연결', '요청-응답 처리 사이 중간 로직', 'HTML 렌더링', '라우팅 생략', 54),
    (2665, 'app.use()는 어떤 용도로 사용되는가?', 2, '중', '라우팅 정의', '미들웨어 등록', '서버 실행', '포트 설정', 54),
    (2666, 'Express에서 JSON 파싱을 위해 사용하는 미들웨어는?', 1, '중', 'express.json()', 'app.bodyParser()', 'jsonParser()', 'express.body()', 54),
    (2667, '다음 중 라우터 인스턴스를 생성하는 방법은?', 3, '상', 'express.newRouter()', 'new express.Router()', 'express.Router()', 'Router.create()', 54),
    (2668, '라우터를 app에 연결할 때 사용하는 메서드는?', 4, '상', 'app.route()', 'app.getRouter()', 'app.bindRouter()', 'app.use()', 54),
    (2669, 'Express에서 에러 핸들링 미들웨어는 몇 개의 인자를 가지는가?', 3, '상', '2', '3', '4', '5', 54),
    (2670, '라우팅 순서를 보장하려면 어떻게 해야 하는가?', 3, '상', '이벤트 루프 사용', '미들웨어 체이닝', '정의 순서대로 선언', '라우팅 모듈화', 54),
    (2671, 'Node.js에서 외부 패키지를 설치할 때 사용하는 명령어는?', 2, '하', 'node install', 'npm install', 'npm add', 'npm get', 54),
    (2672, 'package.json 파일의 주된 목적은?', 3, '하', '코드 설명', '서버 설정', '프로젝트 의존성 관리', 'HTML 빌드', 54),
    (2673, 'Node.js에서 다른 파일의 기능을 가져올 때 사용하는 키워드는?', 2, '하', 'import', 'require', 'include', 'use', 54),
    (2674, '로컬 의존성이 설치되는 기본 위치는?', 1, '중', 'node_modules/', '.npm/', 'lib/', 'packages/', 54),
    (2675, '버전 범위를 ^1.2.3 로 명시하면 허용되는 버전은?', 2, '중', '1.2.3 이상 1.3.0 미만', '1.2.3 이상 2.0.0 미만', '1.2.3 이상 1.2.4 미만', '정확히 1.2.3', 54),
    (2676, 'package-lock.json 파일의 역할은?', 1, '중', '버전 고정 및 재현 가능성 제공', '개발자 정보 저장', '빌드 로그 저장', '서버 로그 기록', 54),
    (2677, 'npm uninstall 명령어의 용도는?', 3, '상', '프로젝트 제거', '노드 환경 삭제', '패키지 제거', '전체 초기화', 54),
    (2678, '전역으로 패키지를 설치할 때 사용하는 옵션은?', 1, '상', '-g', '-d', '--local', '--all', 54),
    (2679, '모듈을 내보낼 때 사용하는 키워드는?', 3, '상', 'export.module', 'require', 'module.exports', 'return module', 54),
    (2680, 'package.json 파일에서 실행 스크립트를 지정하는 필드는?', 2, '상', 'commands', 'scripts', 'run', 'exec', 54),
    (2681, 'Node.js는 어떤 모델을 기반으로 작동하는가?', 2, '하', '멀티스레드', '싱글스레드 이벤트 루프', '프리엠티브', '블로킹 모델', 54),
    (2682, '비동기 처리를 위한 기본 함수는?', 3, '하', 'for()', 'require()', 'setTimeout()', 'fetch()', 54),
    (2683, '콜백 함수란?', 2, '하', '에러를 리턴하는 함수', '다른 함수에 전달되어 실행되는 함수', '메서드 체이닝 함수', '이벤트 바인딩 함수', 54),
    (2684, '이벤트 루프의 역할은?', 2, '중', '동기 코드 실행', '비동기 콜백 실행', '모듈 캐싱', '네임스페이스 생성', 54),
    (2685, 'Promise에서 성공 시 호출되는 메서드는?', 2, '중', 'catch()', 'then()', 'resolve()', 'finally()', 54),
    (2686, 'Promise를 async/await 문법으로 바꿨을 때 await는 어떤 역할을 하는가?', 4, '중', '즉시 실행', '지연 실행', '블로킹 대기', '비동기 완료까지 대기', 54),
    (2687, '이벤트를 등록하는 Node.js 메서드는?', 4, '상', 'addListener()', 'on()', 'once()', '모두 해당', 54),
    (2688, '이벤트 루프에서 작업 큐는 무엇을 저장하는가?', 2, '상', '실행 중 함수', '예약된 콜백', '블로킹 코드', '모듈 캐시', 54),
    (2689, '콜백 지옥의 주요 단점은?', 3, '상', '성능 저하', '비동기 불가', '가독성 저하 및 에러 처리 어려움', '변수 충돌', 54),
    (2690, '이벤트 기반 처리를 위해 사용하는 기본 모듈은?', 2, '상', 'event', 'events', 'stream', 'process', 54),
    (2691, 'Node.js에서 MongoDB와 연결하기 위한 대표적인 라이브러리는?', 1, '하', 'mongoose', 'sequelize', 'pg', 'sqlite', 54),
    (2692, 'SQL 기반의 데이터베이스 연결에 사용하는 라이브러리는?', 2, '하', 'mongoose', 'pg', 'mongo', 'redis', 54),
    (2693, 'MongoDB에서 컬렉션은 어떤 개념과 유사한가?', 1, '하', '테이블', '열', '행', '스키마', 54),
    (2694, 'Mongoose에서 모델을 정의할 때 사용하는 함수는?', 3, '중', 'createModel()', 'define()', 'model()', 'schema()', 54),
    (2695, 'MySQL을 Node.js에서 사용할 수 있도록 도와주는 패키지는?', 1, '중', 'mysql2', 'mysql-js', 'mysql-node', 'sql-node', 54),
    (2696, 'mongoose.Schema는 어떤 역할을 하는가?', 1, '중', '데이터 검증', '라우팅', '비동기 처리', '이벤트 바인딩', 54),
    (2697, 'MongoDB에서 데이터를 저장하는 단위는?', 1, '상', 'Document', 'Table', 'Row', 'Field', 54),
    (2698, 'sequelize는 어떤 ORM을 위한 라이브러리인가?', 2, '상', 'NoSQL', 'SQL', 'JSON', 'REST', 54),
    (2699, 'mongoose의 find() 함수는 어떤 결과를 반환하는가?', 2, '상', '하나의 객체', '배열', '문자열', '정수', 54),
    (2700, 'MongoDB 연결 시 접속 문자열의 기본 포트는?', 1, '상', '27017', '3306', '5432', '8080', 54),
    (2701, 'Node.js 애플리케이션을 프로세스 중단 없이 운영하기 위한 도구로 적절한 것은?', 3, '하', 'Webpack', 'Nodemon', 'PM2', 'Nginx', 55),
    (2702, 'PM2로 Node.js 애플리케이션을 시작하는 명령어는?', 2, '하', 'pm2 install app.js', 'pm2 start app.js', 'pm2 run app.js', 'pm2 launch app.js', 55),
    (2703, 'Node.js 앱을 Docker로 배포할 때 가장 기본적인 구성 파일은?', 1, '하', 'Dockerfile', 'docker.env', 'pm2.config.js', 'deploy.yaml', 55),
    (2704, 'Nginx를 통해 Node.js 서버로 요청을 전달하는 기능은?', 2, '중', 'Static Routing', 'Reverse Proxy', 'Load Balancing', 'DNS Forwarding', 55),
    (2705, 'Node.js에서 환경변수를 `.env` 파일로 관리할 때 사용하는 패키지는?', 1, '하', 'dotenv', 'env-loader', 'config.js', 'settings', 55),
    (2706, 'process.env.NODE_ENV 값으로 ''production''을 설정하는 이유는?', 2, '중', '개발 환경에서만 동작하게 하기 위해', '프로덕션 전용 설정을 로드하기 위해', '환경 변수를 비활성화하기 위해', 'Node.js를 종료시키기 위해', 55),
    (2707, 'GitHub Actions에서 `.yml` 파일 내에서 Docker 이미지를 빌드하려면 어떤 명령이 필요한가?', 3, '중', 'docker upload', 'docker deploy', 'docker build', 'docker init', 55),
    (2708, 'CI/CD에서 DockerHub에 이미지를 푸시하는 명령어는?', 3, '하', 'docker transfer', 'docker upload', 'docker push', 'docker deploy', 55),
    (2709, 'Node.js에서 로그를 파일로 남기기 위해 가장 많이 쓰는 라이브러리는?', 3, '하', 'log4js', 'Morgan', 'Winston', 'Bunyan', 55),
    (2710, 'Sentry를 사용하는 주된 목적은?', 2, '중', '성능 개선', '에러 추적 및 알림', '파일 저장', 'API 문서화', 55),
    (2711, 'PM2에서 애플리케이션을 재시작하는 명령어는?', 2, '하', 'pm2 rerun app', 'pm2 restart app', 'pm2 reset app', 'pm2 relaunch app', 55),
    (2712, 'PM2의 주요 기능이 아닌 것은?', 4, '하', '프로세스 자동 재시작', '로드 밸런싱', '로그 기록', 'SQL 쿼리 최적화', 55),
    (2713, 'Node.js 앱이 비정상 종료되었을 때 PM2가 자동으로 재시작하도록 하는 설정은?', 1, '중', 'pm2 auto-restart', 'restart_on_fail', 'watch mode', 'forever mode', 55),
    (2714, 'Docker를 사용할 때 Node.js 컨테이너에 Nginx를 연결하는 이유는?', 4, '중', 'DB와 연결하기 위해', '정적 파일을 자동 생성하기 위해', '보안 인증을 위해', 'Reverse Proxy 및 로드 밸런싱을 위해', 55),
    (2715, 'Dockerfile에서 Node.js 앱의 종속성을 설치하는 명령은?', 2, '하', 'RUN node install', 'RUN npm install', 'RUN install dependencies', 'RUN yarn package', 55),
    (2716, 'Nginx 설정에서 Node.js 서버로 트래픽을 전달하는 지시어는?', 1, '중', 'proxy_pass', 'forward_to', 'pass_traffic', 'connect_node', 55),
    (2717, '.env 파일을 Node.js에서 읽어들이기 위한 적절한 순서는?', 3, '하', 'require(''dotenv'').run()', 'require(''env'').load()', 'require(''dotenv'').config()', 'import dotenv from ''envfile''', 55),
    (2718, '환경별 설정을 구분하여 관리하기 위한 방식으로 적절한 것은?', 2, '중', '하나의 .env 파일에 모두 작성', 'config.js에서 분기 처리', '패키지.json에 작성', 'app.js 상단에 직접 작성', 55),
    (2719, 'CI/CD에서 테스트를 자동으로 실행하는 주요 목적은?', 3, '중', '배포 속도 향상', '보안 강화', '코드 품질 확보', '서버 비용 절감', 55),
    (2720, 'GitHub Actions 워크플로우에서 main 브랜치에 push될 때만 작동하게 하려면 사용하는 키워드는?', 1, '하', 'on: push', 'on: pull', 'on: commit', 'on: deploy', 55),
    (2721, 'GitHub Actions의 steps 내에서 쉘 명령어를 실행하려면 어떤 키워드를 사용해야 하나?', 2, '하', 'shell', 'run', 'execute', 'command', 55),
    (2722, 'Winston 로깅 라이브러리에서 로그 수준을 설정하는 기본 키워드는?', 1, '하', 'level', 'severity', 'priority', 'logType', 55),
    (2723, 'Winston의 로그를 파일에 저장하려면 사용하는 transport는?', 2, '중', 'ConsoleTransport', 'FileTransport', 'StreamTransport', 'LogTransport', 55),
    (2724, '로그 파일의 용량이 커질 때 오래된 로그를 자동으로 제거해주는 도구는?', 1, '중', 'logrotate', 'filewatcher', 'winston-pruner', 'logclean', 55),
    (2725, 'Sentry의 주요 기능은 다음 중 무엇인가?', 3, '하', '로그 색인', '트래픽 분석', '에러 추적', '성능 테스트', 55),
    (2726, 'Sentry를 Node.js 프로젝트에 통합하려면 어떤 패키지를 설치해야 하나?', 1, '하', '@sentry/node', 'sentry-js', 'node-sentry', 'sentry-logger', 55),
    (2727, 'PM2에서 JSON 설정 파일을 사용하는 이유는?', 3, '중', '환경변수 암호화', '멀티 서버 연결', '앱 실행 설정을 자동화', 'Nginx 연동', 55),
    (2728, 'Docker에서 Node.js 앱이 사용하는 포트를 외부에 노출하는 방법은?', 1, '중', 'EXPOSE 지시어', 'ENV 설정', 'CMD 사용', 'COPY 포트', 55),
    (2729, 'GitHub Actions에서 secret 값을 안전하게 사용하려면?', 3, '중', '환경 변수로 바로 입력', 'yml에 직접 작성', 'GitHub Secrets 사용', 'config 파일에 저장', 55),
    (2730, 'Node.js에서 운영 환경에서만 에러를 로깅하도록 하려면 조건문에 사용하는 값은?', 2, '중', 'process.env.LOG_LEVEL', 'process.env.NODE_ENV', 'process.env.MODE', 'process.env.DEBUG', 55),
    (2731, 'PM2에서 로그를 확인하는 명령어는?', 3, '하', 'pm2 show logs', 'pm2 read logs', 'pm2 logs', 'pm2 status logs', 55),
    (2732, 'PM2의 process.json에서 실행할 스크립트를 정의하는 키는?', 2, '중', 'entry', 'script', 'exec', 'main', 55),
    (2733, 'PM2 프로세스를 영구적으로 등록해 서버 재부팅 후에도 실행하려면?', 1, '중', 'pm2 startup', 'pm2 persist', 'pm2 monitor', 'pm2 keepalive', 55),
    (2734, 'Docker에서 Node.js 앱을 개발 모드로 실행하려면 어떤 명령이 유용한가?', 3, '중', 'docker build', 'docker compose dev', 'docker run -v', 'docker exec -it', 55),
    (2735, 'Nginx에서 정적 파일 서비스를 위한 디렉토리 설정 키워드는?', 2, '중', 'static_path', 'root', 'location', 'static_dir', 55),
    (2736, 'Dockerfile에서 애플리케이션의 실행 커맨드를 지정하는 지시어는?', 3, '하', 'RUN', 'START', 'CMD', 'ENTRY', 55),
    (2737, 'Node.js에서 dotenv 라이브러리를 사용하는 주요 이유는?', 3, '하', '파일 압축', '보안 검사', '환경 변수 로드', '모듈 번들링', 55),
    (2738, '환경 설정 파일을 Git에 올리지 않기 위해 사용하는 파일은?', 3, '하', 'git.config', '.env', '.gitignore', 'ignore.env', 55),
    (2739, 'NODE_ENV를 ''production''으로 설정하는 이유는?', 2, '중', '앱이 자동으로 중단되기 위해', '운영 환경에 최적화된 동작을 위해', '테스트 스크립트를 실행하기 위해', '개발 서버를 우선 실행하기 위해', 55),
    (2740, 'CI 파이프라인에서 ''build'' 단계가 실행되는 시점은?', 3, '중', '코드 작성 후', '테스트 실행 전', '코드가 push될 때', '릴리즈 후', 55),
    (2741, 'GitHub Actions에서 워크플로우 파일의 확장자는?', 2, '하', '.js', '.yml', '.git', '.workflow', 55),
    (2742, 'CI/CD에서 ''deploy'' 단계의 목적은?', 2, '하', '코드를 병합하는 것', '코드를 배포 환경에 전달하는 것', '코드를 테스트하는 것', '코드를 분석하는 것', 55),
    (2743, 'Winston에서 여러 로그 출력 방식을 정의하는 구성 요소는?', 3, '중', 'handler', 'exporter', 'transport', 'logger', 55),
    (2744, 'Sentry에서 에러를 수집하기 위해 가장 먼저 해야 할 작업은?', 3, '중', '코드에 에러 발생시키기', 'Sentry 계정 만들기', '코드에 DSN 설정', '환경변수 설정', 55),
    (2745, 'Sentry는 어떤 종류의 툴인가?', 2, '하', '배포 자동화 툴', '에러 추적 및 로깅 툴', '코드 최적화 툴', 'DB 관리 툴', 55),
    (2746, 'Node.js에서 Winston 로그 포맷을 설정할 때 사용하는 객체는?', 1, '중', 'format', 'template', 'style', 'layout', 55),
    (2747, 'GitHub Actions에서 여러 Job이 순서대로 실행되도록 하려면?', 3, '중', 'run-after', 'order-by', 'needs', 'depends', 55),
    (2748, 'PM2로 실행된 프로세스를 중단하려면 어떤 명령어를 사용할까?', 3, '하', 'pm2 remove', 'pm2 pause', 'pm2 stop', 'pm2 down', 55),
    (2749, 'Docker 이미지 빌드 시 캐시를 사용하지 않으려면 어떤 옵션을 사용하나?', 1, '중', '--no-cache', '--force', '--no-save', '--clear', 55),
    (2750, '환경에 따라 설정 파일을 다르게 로드할 때 흔히 사용하는 node 패턴은?', 3, '상', 'switch(process.env.MODE)', 'if (config.env === ''prod'')', 'require(''./config'')[process.env.NODE_ENV]', 'config.use(process.env.SETTING)', 55),
    (2751, 'Django 모델 클래스는 어떤 클래스를 상속받아야 하는가?', 3, '하', 'BaseView', 'models.Base', 'models.Model', 'django.db.Model', 56),
    (2752, '다음 중 Django 모델에서 기본 키(primary key)를 자동으로 설정해주는 필드는?', 3, '하', 'models.PrimaryField', 'models.CharField(primary=True)', 'models.AutoField(primary_key=True)', 'models.IDField', 56),
    (2753, '모델 인스턴스를 저장하려면 어떤 메서드를 호출해야 하는가?', 3, '하', 'commit()', 'persist()', 'save()', 'apply()', 56),
    (2754, '모든 객체를 가져오는 기본 쿼리셋 메서드는?', 4, '중', 'Model.get_all()', 'Model.fetch()', 'Model.objects.get()', 'Model.objects.all()', 56),
    (2755, 'Django 모델에서 ForeignKey 필드를 정의할 때 필요한 인자는?', 3, '중', 'related_name', 'to', 'on_delete', 'unique', 56),
    (2756, 'Django의 Meta 클래스에서 db_table 옵션의 역할은?', 3, '중', '테이블 컬럼 이름 지정', '모델의 필드 순서를 지정', 'DB에 저장될 테이블 이름 지정', '모델 마이그레이션 방지', 56),
    (2757, '모델에서 __str__ 메서드를 재정의하는 이유는?', 3, '중', '객체의 ID를 바꾸기 위해', '객체를 JSON으로 직렬화하기 위해', '객체를 프린트할 때 의미 있는 문자열 반환', '쿼리 최적화를 위해', 56),
    (2758, '다음 중 null=True가 의미하는 것은?', 3, '상', '필드를 인덱싱한다', '필드를 DB에서 무시한다', 'DB에 NULL 값을 허용한다', '입력값을 항상 저장한다', 56),
    (2759, 'unique=True 옵션은 어떤 제약 조건을 부여하는가?', 3, '상', '필수 입력 필드로 설정', '다른 테이블과 관계 설정', '같은 값을 가진 행이 DB에 존재할 수 없음', '입력 시 자동으로 생성', 56),
    (2760, '쿼리셋에 조건을 적용하려면 어떤 메서드를 사용하는가?', 1, '상', 'filter()', 'annotate()', 'exclude()', 'aggregate()', 56),
    (2761, 'Django에서 기본 제공하는 인증 시스템은 어떤 앱에 포함되어 있는가?', 1, '하', 'django.contrib.auth', 'django.core.auth', 'django.auth.system', 'django.user.manager', 56),
    (2762, 'DRF에서 인증되지 않은 사용자가 접근할 경우 반환되는 기본 응답 코드는?', 3, '하', '200 OK', '403 Forbidden', '401 Unauthorized', '400 Bad Request', 56),
    (2763, 'Simple JWT에서 토큰을 발급받기 위해 사용하는 기본 엔드포인트는?', 2, '하', '/auth/jwt/', '/api/token/', '/user/login/', '/jwt/token/get/', 56),
    (2764, 'DRF 시리얼라이저에서 유효성 검사를 수동으로 수행하는 메서드는?', 4, '중', 'check_valid()', 'validate()', 'run_validation()', 'is_valid()', 56),
    (2765, '시리얼라이저 필드에서 ''read_only=True''로 설정하면?', 2, '중', '필드를 DB에 저장하지 않음', '해당 필드는 응답에만 포함되고 요청에서 무시됨', '필드를 무조건 필수 입력으로 설정함', 'HTML 렌더링 전용', 56),
    (2766, '시리얼라이저 필드에 custom validator를 적용하려면 어떤 매개변수를 사용하는가?', 3, '중', 'clean', 'validate_with', 'validators', 'check_field', 56),
    (2767, 'DRF에서 사용자의 권한을 제어하는 클래스 기반 기능은?', 2, '중', 'ViewSet', 'Permission', 'Throttle', 'FieldLevelSecurity', 56),
    (2768, 'Simple JWT에서 access token과 refresh token의 차이는?', 3, '상', 'access는 더 긴 만료시간을 가진다', 'refresh는 로그인 로그를 포함한다', 'access는 API 호출에 직접 사용되고 refresh는 재발급용', '둘 다 동일하게 사용된다', 56),
    (2769, 'DRF의 BasePermission 클래스를 상속하여 사용할 경우 반드시 구현해야 할 메서드는?', 2, '상', 'check_user()', 'has_permission()', 'is_valid()', 'grant_access()', 56),
    (2770, '시리얼라이저에서 전체 객체 단위로 유효성을 검사할 때 사용하는 메서드는?', 3, '상', 'validate_<field>()', 'check_valid()', 'validate()', 'full_clean()', 56),
    (2771, 'Django REST Framework에서 CRUD 작업을 모두 처리하는 기본 클래스는?', 2, '하', 'APIView', 'ViewSet', 'ListView', 'FormView', 56),
    (2772, 'DRF에서 자동으로 URL 라우팅을 도와주는 도구는?', 3, '하', 'PathResolver', 'UrlPatternBuilder', 'Router', 'LinkBinder', 56),
    (2773, 'DRF의 ModelSerializer는 어떤 기능을 제공하는가?', 3, '하', 'Form validation만 수행', '뷰 없이 HTML을 렌더링', '모델 필드를 자동으로 시리얼라이징', '자바스크립트 기반 REST API 구성', 56),
    (2774, 'ListAPIView는 어떤 기능을 담당하는가?', 3, '중', 'POST 요청 처리', 'DELETE 요청 처리', '리스트 조회(GET)만 담당', 'HTML Form 처리', 56),
    (2775, 'APIView와 GenericAPIView의 주요 차이점은?', 2, '중', 'APIView는 기능이 더 많다', 'GenericAPIView는 믹스인을 통해 공통 기능을 제공', 'APIView는 HTML 응답만 지원한다', 'GenericAPIView는 장고 폼에 특화되어 있다', 56),
    (2776, 'DRF에서 객체를 데이터로 직렬화하는 기본 단위는?', 3, '중', 'View', 'Model', 'Serializer', 'Router', 56),
    (2777, '다음 중 RetrieveAPIView가 처리하는 요청은?', 2, '중', '객체 삭제', '객체 단건 조회', '객체 리스트 조회', '객체 생성', 56),
    (2778, 'ViewSet을 사용하면 어떤 점이 유리한가?', 3, '상', '모델 정의 없이 API 구성 가능', '직렬화 없이 HTML 반환', 'CRUD API를 하나의 클래스에서 관리 가능', '로그인 페이지를 자동 생성', 56),
    (2779, 'Serializer 클래스에서 create() 메서드의 목적은?', 2, '상', '객체를 삭제한다', '새 객체를 생성하여 저장한다', '뷰를 렌더링한다', '폼을 유효성 검사한다', 56),
    (2780, 'DRF에서 @action 데코레이터는 무엇을 위한 기능인가?', 3, '상', '쿼리 최적화', 'Serializer 확장', '커스텀 라우팅 기능 추가', '폼 자동 생성', 56),
    (2781, 'Django에서 기본적으로 제공하는 캐시 백엔드는?', 3, '하', 'Memcached', 'Redis', 'LocMemCache', 'FileCache', 56),
    (2782, '다음 중 Celery의 주요 목적은?', 2, '하', '정적 파일 서빙', '비동기 작업 처리', '템플릿 렌더링', 'DB 마이그레이션', 56),
    (2783, 'Celery와 함께 주기적인 작업을 등록할 때 사용하는 패키지는?', 3, '하', 'celery-scheduler', 'django-beat', 'django-celery-beat', 'crontab-plus', 56),
    (2784, 'Redis를 Django 캐시로 사용할 때 필요한 설정 항목은?', 1, '중', 'CACHES[''BACKEND''] = ''django.core.cache.backends.redis.RedisCache''', 'CACHES[''ENGINE''] = ''django.cache.redis''', 'USE_REDIS = True', 'REDIS_MODE = ''cache''', 56),
    (2785, 'Django 로깅 설정에서 로그 파일 저장을 위해 설정해야 할 핸들러는?', 2, '중', 'console', 'file', 'email', 'stream', 56),
    (2786, '로깅 레벨 중 가장 낮은 단계는?', 3, '중', 'WARNING', 'INFO', 'DEBUG', 'ERROR', 56),
    (2787, 'Celery에서 task 함수로 등록하려면 어떤 데코레이터를 사용하는가?', 4, '중', '@background', '@task', '@celery_task', '@shared_task', 56),
    (2788, 'Sentry의 주요 역할은?', 3, '상', 'DB 최적화', '정적 파일 관리', '서버 예외 추적 및 오류 모니터링', 'URL 라우팅', 56),
    (2789, 'Django에서 캐시 만료 시간을 설정하려면 어떤 속성을 사용해야 하는가?', 3, '상', 'cache_age', 'max_age', 'timeout', 'expires_in', 56),
    (2790, 'Celery worker를 실행하는 기본 명령어는?', 3, '상', 'celery --run', 'celery -A project_name run', 'celery -A project_name worker', 'celery worker start', 56),
    (2791, 'pytest-django의 주요 기능은?', 2, '하', '템플릿 렌더링 속도 향상', 'Django 프로젝트에서 pytest 기반 테스트 지원', 'API 자동 문서 생성', '뷰 캐싱 처리', 56),
    (2792, 'drf-yasg 라이브러리는 어떤 목적으로 사용되는가?', 3, '하', '배포 자동화', 'JWT 토큰 발급', 'Swagger 기반 API 문서 자동 생성', 'URL 리다이렉션 처리', 56),
    (2793, 'Gunicorn은 어떤 역할을 하는가?', 2, '하', '정적 파일을 제공', 'WAS 역할의 Python WSGI HTTP 서버', '백엔드 인증 서버', '웹소켓 처리 서버', 56),
    (2794, 'Dockerfile에서 Django 앱을 실행하는 명령은?', 3, '중', 'python start', 'python manage.py serve', 'python manage.py runserver 0.0.0.0:8000', 'python django start', 56),
    (2795, 'pytest에서 테스트 파일 이름의 접두사는 일반적으로?', 1, '중', 'test_', 'check_', 'spec_', 'case_', 56),
    (2796, 'Django의 `collectstatic` 명령어는 어떤 기능을 수행하는가?', 3, '중', 'API 문서를 생성', '시리얼라이저를 캐싱', '정적 파일을 하나의 디렉토리로 모음', '마이그레이션을 실행', 56),
    (2797, 'drf-yasg에서 API 문서를 Swagger UI 형식으로 보려면 어떤 URL을 사용하는가?', 3, '중', '/docs/', '/openapi/', '/swagger/', '/schema/swagger/', 56),
    (2798, 'Docker를 활용해 Django를 배포할 때 보통 함께 사용하는 WSGI 서버는?', 1, '상', 'uWSGI 또는 Gunicorn', 'Apache', 'NGROK', 'FlaskServe', 56),
    (2799, 'Nginx가 Django 앱 앞에 위치하는 일반적인 역할은?', 3, '상', 'ORM 처리', 'REST API 정의', '정적 파일 제공 및 리버스 프록시', '템플릿 렌더링', 56),
    (2800, 'pytest에서 Django 설정을 적용하려면 어떤 플러그인이 필요한가?', 3, '상', 'pytest-setup', 'pytest-config', 'pytest-django', 'pytest-env', 56),
    (2801, 'Django ORM에서 `filter()` 메서드는 무엇을 수행하는가?', 2, '하', '데이터베이스에서 데이터를 삽입한다.', '조건에 맞는 객체들을 조회한다.', '모델의 데이터를 업데이트한다.', '객체를 삭제한다.', 57),
    (2802, 'Django에서 인증된 사용자를 얻기 위해 사용하는 함수는 무엇인가?', 1, '하', 'request.user', 'get_authenticated_user()', 'current_user()', 'get_user()', 57),
    (2803, 'Django REST Framework에서 API 응답을 처리하는 클래스는 무엇인가?', 2, '하', 'APIView', 'Response', 'HttpResponse', 'ApiResponse', 57),
    (2804, 'Django에서 API 문서를 Swagger 기반으로 자동 생성하는 라이브러리는 무엇인가?', 1, '중', 'drf-yasg', 'django-rest-swagger', 'drf-spectacular', 'swagger-django', 57),
    (2805, 'Django REST Framework의 serializer에서 `validate()` 메서드의 역할은 무엇인가?', 2, '중', '필드의 데이터를 필터링하여 반환한다.', '입력된 데이터를 유효성 검사한다.', '데이터베이스 모델을 업데이트한다.', '요청 데이터를 암호화한다.', 57),
    (2806, 'Django에서 Redis를 캐시 백엔드로 사용하려면 어떤 설정을 해야 하는가?', 2, '중', 'CACHE_BACKEND = ''redis''', 'CACHES = {''default'': {''BACKEND'': ''django_redis.cache.RedisCache''}}', 'CACHE_ENGINE = ''redis''', 'CACHE_TYPE = ''redis''', 57),
    (2807, 'Celery를 사용하여 주기적인 작업을 설정하기 위한 Django의 추가 라이브러리는 무엇인가?', 1, '중', 'django-celery-beat', 'django-celery-periodic', 'celery-tasks', 'django-tasks', 57),
    (2808, 'Django에서 로깅을 처리하기 위해 사용할 수 있는 외부 서비스는 무엇인가?', 4, '중', 'Sentry', 'New Relic', 'Loggly', 'All of the above', 57),
    (2809, 'Django 테스트에서 `pytest-django`를 사용하여 데이터베이스의 상태를 유지하려면 어떤 설정을 해야 하는가?', 1, '중', 'pytest.mark.django_db', 'pytest.db_setup()', 'pytest.enable_django_db()', 'pytest.db()', 57),
    (2810, 'Django에서 Gunicorn과 Nginx를 사용하여 애플리케이션을 배포할 때 필요한 설정 파일은 무엇인가?', 4, '중', 'nginx.conf', 'settings.py', 'docker-compose.yml', 'wsgi.py', 57),
    (2811, 'Django ORM에서 `all()` 메서드는 무엇을 수행하는가?', 2, '하', '모든 객체를 삭제한다.', '모든 객체를 조회한다.', '객체를 업데이트한다.', '특정 객체를 조회한다.', 57),
    (2812, 'Django ORM에서 `get()` 메서드를 사용할 때 발생할 수 있는 예외는 무엇인가?', 4, '중', 'MultipleObjectsReturned', 'ObjectDoesNotExist', 'FieldDoesNotExist', 'All of the above', 57),
    (2813, 'Django에서 유저를 로그인 시킬 때 사용하는 메서드는 무엇인가?', 1, '하', 'login(request, user)', 'authenticate(request, user)', 'user.login()', 'authenticate_user(request)', 57),
    (2814, 'Django의 기본 인증 시스템에서 사용자에게 JWT를 발급하려면 어떤 라이브러리를 사용해야 하는가?', 2, '중', 'django-jwt', 'simplejwt', 'djangorestframework-jwt', 'django-auth-token', 57),
    (2815, 'DRF에서 요청된 데이터를 처리하는 함수 기반 뷰는 무엇인가?', 1, '하', '@api_view', '@action', '@router', '@viewset', 57),
    (2816, 'DRF에서 `ModelSerializer`는 무엇을 위해 사용되는가?', 1, '중', '모델 인스턴스를 JSON으로 직렬화', '모델을 바탕으로 데이터를 유효성 검사', '모델을 업데이트', '모델을 삭제', 57),
    (2817, '`drf-yasg`에서 API 문서에 자동으로 설명을 추가하려면 어떤 데코레이터를 사용해야 하는가?', 1, '중', '@swagger_auto_schema', '@api_view', '@doc', '@auto_docs', 57),
    (2818, '`drf-spectacular`에서 API 스키마를 자동으로 생성하는 설정을 활성화하려면 `settings.py`에서 어떤 설정을 해야 하는가?', 1, '중', 'SPECTACULAR_SETTINGS = {...}', 'SWAGGER_SETTINGS = {...}', 'DRF_SETTINGS = {...}', 'API_SETTINGS = {...}', 57),
    (2819, 'DRF `Serializer`에서 `validators`를 사용하여 유효성 검사를 정의하려면 어떤 형식으로 사용해야 하는가?', 1, '중', 'validators = [SomeValidator()]', 'validate_field = SomeValidator()', 'custom_validation = SomeValidator()', 'field_validation = SomeValidator()', 57),
    (2820, 'DRF에서 `CharField`의 길이를 제한하는 유효성 검사 옵션은 무엇인가?', 1, '하', 'max_length', 'length', 'char_limit', 'max_size', 57),
    (2821, 'Django ORM에서 `exclude()` 메서드는 무엇을 수행하는가?', 2, '중', '조건에 맞는 객체를 조회한다.', '조건에 맞지 않는 객체를 조회한다.', '모든 객체를 업데이트한다.', '모든 객체를 삭제한다.', 57),
    (2822, 'Django에서 사용자가 인증을 요구하는 페이지로 접근할 때, 로그인 페이지로 리디렉션하려면 어떤 설정을 사용해야 하는가?', 1, '하', 'LOGIN_URL = ''/login/''', 'REDIRECT_URL = ''/login/''', 'LOGIN_REDIRECT_URL = ''/home/''', 'AUTHENTICATED_URL = ''/login/''', 57),
    (2823, 'Django REST Framework에서 API에서 데이터를 반환할 때 사용하는 기본 클래스는 무엇인가?', 2, '하', 'APIView', 'Response', 'JsonResponse', 'HttpResponse', 57),
    (2824, 'Django에서 API 문서화를 위한 `drf-spectacular` 라이브러리에서, 어떤 설정을 통해 JSON 스키마를 생성할 수 있는가?', 1, '중', 'SPECTACULAR_SETTINGS = {...}', 'API_SETTINGS = {...}', 'DRF_SCHEMA_SETTINGS = {...}', 'SWAGGER_SETTINGS = {...}', 57),
    (2825, 'Django REST Framework의 `serializers.ModelSerializer`를 사용할 때, `Meta` 클래스의 `model` 속성은 무엇을 지정하는가?', 2, '중', '사용할 데이터베이스 테이블', '직렬화할 모델 클래스', '유효성 검사를 수행할 필드', '응답 데이터를 포맷할 방식', 57),
    (2826, 'Django에서 JWT 토큰을 생성하는 라이브러리 중 하나인 `SimpleJWT`에서 토큰의 만료 시간을 설정하는 방법은 무엇인가?', 1, '중', 'ACCESS_TOKEN_LIFETIME', 'TOKEN_LIFETIME', 'JWT_EXPIRATION_TIME', 'ACCESS_TOKEN_EXPIRE', 57),
    (2827, 'Django ORM에서 `annotate()` 메서드를 사용하는 목적은 무엇인가?', 2, '중', '모델 객체를 업데이트하는데 사용된다.', '쿼리셋에 집계된 값을 추가하는데 사용된다.', '데이터베이스 테이블을 생성하는데 사용된다.', '필드 값을 필터링하는데 사용된다.', 57),
    (2828, 'Django에서 사용자 인증 후 JWT를 발급하려면 어떤 라이브러리를 사용하는가?', 3, '중', 'django-rest-framework-jwt', 'django-jwt-auth', 'simplejwt', 'django-auth-jwt', 57),
    (2829, 'Django REST Framework에서 `APIView` 클래스에서 HTTP 메서드에 맞는 함수를 작성하려면 어떤 메서드를 사용해야 하는가?', 4, '하', 'get()', 'post()', 'delete()', '모두 해당', 57),
    (2830, 'Django REST Framework에서 `serializers.ValidationError`는 언제 발생하는가?', 1, '중', '데이터가 유효하지 않을 때 발생한다.', '모델 객체를 저장할 때 발생한다.', 'HTTP 요청에서 잘못된 파라미터를 받았을 때 발생한다.', '유효성 검사 후 잘못된 데이터가 있으면 발생한다.', 57),
    (2831, 'Django ORM에서 `get()` 메서드를 사용할 때 발생할 수 있는 예외는 무엇인가?', 4, '중', 'ValueError', 'ObjectDoesNotExist', 'IntegrityError', 'DoesNotExist', 57),
    (2832, 'Django에서 JWT를 사용하여 인증된 사용자의 ID를 추출하려면 어떤 방법을 사용해야 하는가?', 2, '중', 'request.user.id', 'request.jwt_claims[''user_id'']', 'request.token.user_id', 'request.data[''user_id'']', 57),
    (2833, 'Django REST Framework에서 `APIView` 클래스에서 `permission_classes` 속성은 무엇을 설정하는가?', 3, '중', 'HTTP 메서드를 설정한다.', '응답 포맷을 설정한다.', 'API에 대한 접근 권한을 설정한다.', '데이터를 직렬화하는 방법을 설정한다.', 57),
    (2834, 'Django에서 `drf-spectacular`를 사용하여 Swagger 문서를 생성할 때, 어떤 명령어로 스키마 파일을 생성할 수 있는가?', 3, '중', 'python manage.py drf_spectacular', 'python manage.py generate_swagger', 'python manage.py spectacular', 'python manage.py schema_generate', 57),
    (2835, 'Django REST Framework에서 `serializers.Serializer` 클래스의 `validated_data`는 무엇을 의미하는가?', 1, '하', '유효성 검사된 데이터', '데이터베이스에 저장된 데이터', '응답으로 반환될 데이터', '직렬화된 원본 데이터', 57),
    (2836, 'Django에서 Redis 캐시를 설정할 때 `CACHES` 설정에서 `OPTIONS` 항목을 사용하는 이유는 무엇인가?', 2, '중', '캐시 데이터를 암호화하기 위해', 'Redis 서버의 연결 설정을 지정하기 위해', '캐시 데이터의 만료 시간을 설정하기 위해', '캐시에서 데이터를 압축하기 위해', 57),
    (2837, 'Celery에서 비동기 작업을 설정할 때 사용하는 메시지 브로커로 가장 많이 사용되는 것은 무엇인가?', 1, '중', 'RabbitMQ', 'Kafka', 'Redis', 'ActiveMQ', 57),
    (2838, 'Django에서 로깅을 설정할 때, `LOGGING` 설정에서 `handlers` 항목을 사용하는 이유는 무엇인가?', 1, '중', '로그 메시지를 출력할 위치를 설정하기 위해', '로그 파일의 형식을 설정하기 위해', '로그 레벨을 설정하기 위해', '로그를 비동기적으로 처리하기 위해', 57),
    (2839, 'Django에서 `pytest-django`를 사용하여 데이터베이스를 초기화하려면 어떤 설정을 추가해야 하는가?', 2, '중', 'pytest.mark.django_db_setup', 'pytest.mark.django_db', 'pytest.enable_db()', 'pytest.setup_db()', 57),
    (2840, 'Django에서 Gunicorn을 사용하여 애플리케이션을 실행할 때, 기본적으로 몇 개의 워커 프로세스가 실행되는가?', 4, '하', '1', '2', '4', '자동 설정(가용 CPU 수에 따라 다름)', 57),
    (2841, 'Django에서 `filter()` 메서드와 `exclude()` 메서드의 차이는 무엇인가?', 1, '중', 'filter()는 조건에 맞는 결과를 반환하고, exclude()는 조건에 맞지 않는 결과를 반환한다.', 'filter()는 모든 데이터를 반환하고, exclude()는 특정 필드를 제외한다.', 'filter()는 쿼리셋을 반환하고, exclude()는 리스트를 반환한다.', 'filter()와 exclude()는 동일한 역할을 한다.', 57),
    (2842, 'Django에서 `SimpleJWT` 라이브러리를 사용하여 JWT 토큰을 생성할 때, 필요한 설정은 무엇인가?', 1, '중', 'AUTHENTICATION_CLASSES와 JWT_AUTH 설정을 추가한다.', 'JWT_SECRET_KEY와 JWT_ALGORITHM을 설정한다.', 'JWT_HEADER_NAME과 JWT_EXPIRATION_TIME을 설정한다.', 'JWT만으로 인증을 할 수 있다.', 57),
    (2843, 'Django REST Framework에서 `Serializer` 클래스의 `create()` 메서드는 무엇을 수행하는가?', 2, '중', '직렬화된 데이터를 유효성 검사한다.', '새로운 인스턴스를 생성하고 데이터베이스에 저장한다.', '응답 데이터를 직렬화한다.', '요청 데이터를 암호화하여 저장한다.', 57),
    (2844, 'Django에서 `drf-spectacular` 라이브러리의 `SpectacularAPIView` 클래스는 무엇을 제공하는가?', 2, '중', 'API 문서를 HTML로 변환한다.', 'Swagger UI를 제공하고 API 문서를 자동으로 생성한다.', 'API 인증을 처리한다.', 'API 테스트를 자동으로 실행한다.', 57),
    (2845, 'Django REST Framework에서 `serializer.is_valid()` 메서드는 무엇을 확인하는가?', 1, '하', '직렬화된 데이터가 유효한지 확인한다.', '모델 인스턴스가 유효한지 확인한다.', '입력 데이터를 데이터베이스에 저장할 수 있는지 확인한다.', '직렬화된 데이터를 다시 리스트로 변환할 수 있는지 확인한다.', 57),
    (2846, 'Django에서 Redis를 캐시 백엔드로 사용할 때, `CACHE_TTL` 설정은 무엇을 의미하는가?', 1, '중', '캐시된 데이터의 유효 기간을 설정한다.', 'Redis 서버의 연결 타임아웃을 설정한다.', 'Redis에 저장된 데이터의 크기를 설정한다.', '캐시를 압축하기 위한 설정이다.', 57),
    (2847, 'Celery에서 주기적인 작업을 관리할 때 사용하는 Django 라이브러리는 무엇인가?', 1, '중', 'django-celery-beat', 'django-celery-scheduler', 'django-celery-tasks', 'django-periodic-tasks', 57),
    (2848, 'Django에서 로깅 설정을 할 때, `LOGGING` 설정에서 `loggers` 항목은 무엇을 설정하는가?', 2, '중', '로그를 출력할 형식을 설정한다.', '어떤 로깅 기능을 사용할지 설정한다.', '로그 레벨을 설정한다.', '어떤 로그를 저장할지 설정한다.', 57),
    (2849, 'Django에서 `pytest-django` 라이브러리를 사용할 때, 테스트 데이터베이스는 기본적으로 어떻게 설정되는가?', 1, '중', '테스트 실행 전에 자동으로 새로 생성된다.', '기존 데이터베이스를 사용한다.', '매번 데이터를 삭제하고 새로 생성된다.', '테스트 데이터베이스는 수동으로 생성해야 한다.', 57),
    (2850, 'Django에서 Gunicorn을 사용할 때, 기본적으로 어떤 프로세스를 사용하여 요청을 처리하는가?', 1, '하', 'Worker 프로세스', 'Thread 프로세스', 'Master 프로세스', 'Manager 프로세스', 57),
    (2851, 'Flask 애플리케이션의 핵심 객체는?', 3, '하', 'FlaskApp', 'AppBuilder', 'Flask', 'Server', 58),
    (2852, 'Flask에서 라우트를 정의할 때 사용하는 데코레이터는?', 3, '하', '@flask.route()', '@app.view()', '@app.route()', '@route.view()', 58),
    (2853, '다음 중 Flask의 디버그 모드를 활성화하기 위한 환경 변수는?', 1, '하', 'FLASK_DEBUG', 'DEBUG_MODE', 'APP_DEBUG', 'FLASK_VERBOSE', 58),
    (2854, 'Flask에서 클라이언트의 GET 요청 데이터를 받기 위해 사용하는 객체는?', 2, '중', 'request.form', 'request.args', 'request.json', 'request.body', 58),
    (2855, 'Flask에서 404 Not Found 응답을 커스터마이징하려면?', 3, '중', '@app.route(''/404'')', '@app.not_found()', '@app.errorhandler(404)', '@app.handler(404)', 58),
    (2856, 'Flask에서 JSON 응답을 반환할 때 사용하는 함수는?', 2, '중', 'make_response()', 'jsonify()', 'render_template()', 'send_json()', 58),
    (2857, 'Flask의 request 객체는 어디에서 가져오는가?', 4, '중', 'flask.http', 'flask.request', 'flask.web', 'flask', 58),
    (2858, 'Flask에서 템플릿을 사용할 때 주로 쓰는 함수는?', 3, '상', 'render_json()', 'send_template()', 'render_template()', 'display_html()', 58),
    (2859, 'Flask 애플리케이션의 실행 포트를 지정하려면 어떤 메서드 인자를 사용해야 하는가?', 2, '상', 'app.listen(port=5000)', 'app.run(port=5000)', 'start_server(port=5000)', 'app.host(port=5000)', 58),
    (2860, 'Flask의 라우트에서 동적 URL 파라미터를 지정할 때 사용하는 문법은?', 3, '상', '/user[<id>]', '/user:<id>', '/user/<id>', '/user@id', 58),
    (2861, 'Flask에서 SQLAlchemy를 사용하려면 어떤 객체를 초기화해야 하는가?', 3, '하', 'FlaskDB', 'SQLObject', 'SQLAlchemy(app)', 'ORMManager', 58),
    (2862, 'Flask-SQLAlchemy에서 모델 클래스를 정의할 때 반드시 상속해야 하는 클래스는?', 2, '하', 'Base', 'db.Model', 'app.Model', 'SQLAlchemy.Base', 58),
    (2863, 'Flask-Migrate는 주로 어떤 작업을 돕는 도구인가?', 2, '하', '정적 파일 관리', '데이터베이스 마이그레이션', 'API 응답 포맷팅', '라우팅 최적화', 58),
    (2864, 'Flask-Login에서 로그인 여부를 확인할 때 사용하는 속성은?', 1, '중', 'current_user.is_authenticated', 'user.is_logged_in', 'session[''logged'']', 'login_required(user)', 58),
    (2865, 'Flask-Login을 사용하려면 사용자 모델에 반드시 구현해야 하는 메서드는?', 3, '중', 'get_user()', 'is_valid()', 'get_id()', 'check_password()', 58),
    (2866, 'JWT 토큰을 발급하는 Flask-JWT-Extended 함수는?', 4, '중', 'encode_jwt()', 'create_token()', 'generate_token()', 'create_access_token()', 58),
    (2867, 'Flask-JWT-Extended에서 토큰이 필요한 라우트에 사용하는 데코레이터는?', 2, '중', '@requires_token', '@jwt_required()', '@login_required', '@auth_required', 58),
    (2868, 'Flask-Login의 login_user() 함수는 어떤 역할을 하는가?', 3, '상', '비밀번호를 검증', '사용자를 DB에 추가', '세션에 사용자 로그인 상태를 기록', '새 토큰을 생성', 58),
    (2869, 'JWT의 주된 장점은?', 2, '상', 'HTML 렌더링이 빠름', '서버 세션 없이 인증 상태 유지 가능', '브라우저 캐싱 최적화', 'OAuth2 자동 구현', 58),
    (2870, 'Flask-Migrate에서 마이그레이션 생성 명령어는?', 3, '상', 'flask migrate init', 'flask db generate', 'flask db migrate', 'flask schema update', 58),
    (2871, 'Flask에서 API 경로를 구조적으로 분리할 때 사용하는 객체는?', 2, '하', 'RouteGroup', 'Blueprint', 'APIMap', 'Namespace', 58),
    (2872, 'Flask에서 메서드별 처리를 위해 사용하는 클래스 기반 뷰는?', 3, '하', 'ClassView', 'RouteView', 'MethodView', 'ActionView', 58),
    (2873, 'Flask-RESTful에서 리소스를 등록할 때 사용하는 메서드는?', 3, '하', 'add_url()', 'register()', 'add_resource()', 'map_route()', 58),
    (2874, 'Marshmallow는 어떤 기능을 제공하는가?', 3, '중', 'CSS 템플릿 처리', 'ORM 쿼리 최적화', '직렬화 및 유효성 검사', '웹소켓 처리', 58),
    (2875, 'WTForms에서 Form 클래스를 상속받을 때 주로 선언하는 필드는?', 3, '중', 'validators', 'fields', 'StringField, IntegerField 등', 'FormDataField', 58),
    (2876, 'Marshmallow에서 필수 입력값을 지정하려면 사용하는 옵션은?', 3, '중', 'non_empty=True', 'must_exist=True', 'required=True', 'nullable=False', 58),
    (2877, 'Flask-RESTful에서 POST 요청을 처리할 기본 메서드는?', 1, '중', 'post(self)', 'handle_post(self)', 'create(self)', 'save(self)', 58),
    (2878, 'WTForms에서 문자열 필드 유효성 검사를 위한 validator는?', 2, '상', 'RegexOnly()', 'Length()', 'NotNull()', 'RequiredText()', 58),
    (2879, 'Marshmallow의 validate 인자에 사용할 수 없는 것은?', 4, '상', 'validate.Range()', 'validate.Length()', 'validate.Email()', 'validate.Session()', 58),
    (2880, 'Flask-RESTful에서 RequestParser를 사용하는 주요 목적은?', 3, '상', '라우팅 분리', '정적 파일 제공', '요청 데이터 파싱 및 유효성 검사', '템플릿 렌더링', 58),
    (2881, 'Flask에서 캐시 기능을 제공하기 위해 사용하는 확장 도구는?', 2, '하', 'Flask-CacheLib', 'Flask-Caching', 'Flask-Redis', 'CachePlus', 58),
    (2882, 'Flask-Caching에서 timeout 인자의 역할은?', 3, '하', 'DB 연결을 끊는 시간', '템플릿 렌더링 제한 시간', '캐시 만료 시간(초 단위)', '로그 파일 생성 주기', 58),
    (2883, '다음 중 캐시 백엔드로 설정 가능한 옵션은?', 4, '하', 'redis', 'memcached', 'filesystem', '모두 가능', 58),
    (2884, 'APScheduler의 주요 기능은?', 2, '중', 'JWT 발급 처리', '스케줄 기반 작업 실행', 'API 요청 캐싱', 'HTTP 세션 유지', 58),
    (2885, 'Flask에서 Celery를 사용할 때 가장 먼저 설정해야 할 항목은?', 3, '중', '뷰 함수 등록', '비동기 URL 생성', 'broker URL 설정', 'route name 지정', 58),
    (2886, 'Celery에서 주기적인 작업을 설정하려면 사용하는 구성 요소는?', 2, '중', 'Flask-Beat', 'celery-beat', 'ScheduleJob', 'TaskManager', 58),
    (2887, 'Python의 기본 logging 모듈에서 로그 레벨 중 가장 낮은 단계는?', 1, '중', 'DEBUG', 'INFO', 'WARNING', 'ERROR', 58),
    (2888, 'Flask에서 로그 메시지를 파일에 저장하려면 설정해야 할 구성 요소는?', 1, '상', 'logging.FileHandler', 'print()', 'app.logger.console()', 'log.save()', 58),
    (2889, 'Sentry는 Flask에서 어떤 용도로 주로 사용되는가?', 2, '상', '배포 자동화', '에러 추적 및 로깅', '보안 인증', '정적 파일 관리', 58),
    (2890, 'Celery 작업을 백그라운드에서 실행하는 명령은?', 3, '상', 'celery start', 'celery -A app run', 'celery -A app worker', 'celery launch', 58),
    (2891, 'pytest에서 테스트 함수 이름은 보통 어떤 접두사로 시작해야 인식되는가?', 3, '하', 'check_', 'run_', 'test_', 'case_', 58),
    (2892, 'Flask-Testing에서 기본 테스트 클래스는 무엇을 상속해야 하는가?', 1, '하', 'TestCase', 'FlaskTestClient', 'LiveServerTestCase', 'FlaskTestCase', 58),
    (2893, 'Flask에서 테스트 클라이언트를 생성하는 방법은?', 1, '하', 'app.test_client()', 'TestClient(app)', 'flask.create_client()', 'run_tests(app)', 58),
    (2894, 'Gunicorn은 어떤 역할을 하는가?', 2, '중', '캐시 저장소 역할', 'Flask 앱을 WSGI 서버로 실행', '테스트 케이스 실행', '정적 파일을 제공', 58),
    (2895, 'Dockerfile에서 Flask 앱을 실행하는 명령은 보통 무엇인가?', 2, '중', 'CMD ["python", "run.py"]', 'CMD ["gunicorn", "app:app"]', 'RUN flask start', 'ENTRYPOINT ["flask"]', 58),
    (2896, 'Flask 앱을 Elastic Beanstalk에 배포하려면 프로젝트 루트에 있어야 할 파일은?', 3, '중', 'start.sh', 'Dockerfile', 'requirements.txt', '.ebextensions/config.yml', 58),
    (2897, 'pytest에서 특정 에러가 발생하는지 확인하려면 사용하는 구문은?', 3, '상', 'assert error', 'with expect():', 'with pytest.raises():', 'try: assert False', 58),
    (2898, 'Elastic Beanstalk에서 환경 설정은 어떤 폴더 아래 구성하는가?', 3, '상', '.aws/', '.ebconfig/', '.ebextensions/', 'eb-settings/', 58),
    (2899, 'Docker에서 Flask 앱이 사용하는 포트를 열려면 사용하는 명령은?', 1, '상', 'EXPOSE 80', 'OPEN PORT 5000', 'FLASK_PORT 8000', 'NETWORK enable', 58),
    (2900, 'Docker로 Flask 앱을 실행할 때 컨테이너를 백그라운드에서 돌리려면 사용하는 옵션은?', 2, '상', '-v', '-d', '--live', '--fg', 58),
    (2901, 'Flask 애플리케이션을 프로덕션 환경에서 실행하기 위한 WSGI 서버는 무엇인가?', 2, '하', 'Flask run', 'Waitress', 'Werkzeug', 'debugger', 59),
    (2902, '`flask run` 명령어의 주요 용도는 무엇인가?', 3, '하', '운영 서버 배포', '테스트 코드 실행', '개발 서버 실행', 'Docker 빌드', 59),
    (2903, 'Flask 애플리케이션을 Nginx와 함께 배포할 때 사용하는 포워딩 설정은 어떤 포트가 일반적인가?', 2, '중', '5000', '80', '3000', '8000', 59),
    (2904, 'Dockerfile에서 Flask 앱 실행을 위해 자주 사용하는 명령은?', 3, '중', 'flask serve', 'python run.py', 'gunicorn app:app', 'nginx -g ''daemon off;''', 59),
    (2905, 'Flask에서 환경 설정을 외부 파일로 관리하려면 사용하는 메서드는?', 4, '중', 'app.config.set_default()', 'app.set_env()', 'app.load_env()', 'app.config.from_envvar()', 59),
    (2906, 'Flask 애플리케이션에서 `.env` 파일을 읽어들이기 위해 사용하는 라이브러리는?', 4, '하', 'flask-dotenv', 'python-decouple', 'dotenv', 'python-dotenv', 59),
    (2907, 'GitHub Actions에서 CI를 위해 작성하는 파일의 기본 위치는?', 2, '하', '.github/ci.yml', '.github/workflows/ci.yml', 'ci/github.yml', 'workflows/.github.yml', 59),
    (2908, 'CI/CD에서 DockerHub와 GitHub Actions를 연동하기 위해 필요한 인증 정보는?', 3, '중', 'GITHUB_TOKEN', 'DOCKER_PASS', 'DOCKERHUB_USERNAME / DOCKERHUB_TOKEN', 'FLASK_SECRET', 59),
    (2909, '정적파일을 S3로 서빙할 경우, Flask에서 해당 URL을 설정할 키는?', 3, '중', 'STATIC_FOLDER_URL', 'S3_BUCKET', 'STATIC_URL', 'S3_STATIC_PATH', 59),
    (2910, 'Flask에서 로깅을 파일로 남기려면 설정해야 하는 기본 로깅 레벨은?', 1, '하', 'logging.INFO', 'logging.DEBUG', 'logging.ERROR', 'logging.WARNING', 59),
    (2911, 'Flask에서 Gunicorn을 사용할 때 사용하는 기본 WSGI 진입점은?', 3, '중', 'run.py', 'app.py', 'wsgi.py', 'entrypoint.sh', 59),
    (2912, 'Waitress는 어떤 환경에서 주로 사용되는 Flask 서버인가?', 1, '중', 'Windows 운영환경', 'Linux 운영환경', 'macOS 운영환경', 'Kubernetes 환경', 59),
    (2913, 'Flask + Gunicorn + Nginx 아키텍처에서 클라이언트의 요청을 처음 받는 컴포넌트는?', 3, '하', 'Flask', 'Gunicorn', 'Nginx', 'Docker', 59),
    (2914, 'Docker에서 Flask 애플리케이션을 자동으로 재빌드하고 배포하려면 필요한 CI/CD 도구는?', 4, '중', 'GitHub Actions', 'Jenkins', 'Travis CI', 'All of the above', 59),
    (2915, 'Flask 설정에서 `.env`의 값을 코드에서 가져오기 위해 사용하는 Python 표준 라이브러리는?', 1, '하', 'os', 'sys', 'dotenv', 'envlib', 59),
    (2916, 'Flask 앱에서 Sentry를 연동하여 사용하는 목적은?', 2, '하', '트래픽 분산', '오류 추적 및 알림', '정적파일 서빙', '서버 실행 속도 향상', 59),
    (2917, 'Flask Exporter를 Prometheus와 함께 사용할 때 주로 수집하는 정보는?', 2, '중', 'HTML 구조', '서버 부하와 요청 수', '클라이언트 쿠키', 'Flask 버전', 59),
    (2918, 'Flask에서 `.env`를 자동으로 로드하기 위해 애플리케이션 시작 시 호출해야 하는 함수는?', 2, '하', 'load_env_file()', 'dotenv.load_dotenv()', 'app.env.load()', 'os.loadenv()', 59),
    (2919, 'GitHub Actions에서 Docker 이미지 빌드 후 푸시를 수행하는 단계 이름은?', 1, '중', 'build-and-push', 'docker-compile', 'image-updater', 'docker-release', 59),
    (2920, 'Flask에서 정적파일을 직접 서빙하지 않고 S3를 사용하는 이유는?', 4, '중', '보안 향상', '서버 부하 감소', '요청 처리 속도 향상', '모든 항목', 59),
    (2921, 'Gunicorn에서 worker 프로세스를 지정하려면 어떤 옵션을 사용해야 하나?', 2, '중', '-p', '-w', '--port', '--concurrency', 59),
    (2922, 'Waitress 서버의 주요 특징은?', 3, '중', '멀티 스레딩 불가', '비동기 지원', 'Windows 친화적 WSGI 서버', 'HTTPS 내장', 59),
    (2923, 'Flask 애플리케이션을 Docker로 배포할 때, 가장 먼저 작성해야 하는 파일은?', 2, '하', 'requirements.txt', 'Dockerfile', 'entrypoint.sh', 'nginx.conf', 59),
    (2924, 'Nginx에서 Flask의 5000번 포트로 요청을 프록시할 때 사용하는 지시는?', 3, '중', 'proxy_url', 'forward_pass', 'proxy_pass', 'location_pass', 59),
    (2925, '`.env` 파일의 일반적인 위치는 어디인가?', 3, '하', 'static 폴더', 'templates 폴더', '프로젝트 루트 디렉토리', 'venv 폴더', 59),
    (2926, 'Flask 설정에서 `DEBUG=True`는 어떤 환경을 의미하나?', 2, '하', '운영 환경', '로컬 개발 환경', '테스트 환경', '배포 전 환경', 59),
    (2927, 'GitHub Actions의 `.yml` 파일에서 사용하는 문법은?', 2, '하', 'JSON', 'YAML', 'INI', 'XML', 59),
    (2928, 'CI에서 테스트가 실패했을 때 다음 단계로 넘어가지 않게 하려면?', 4, '중', 'continue-on-error: true', 'if: failure()', 'exit-on-fail: true', 'continue-on-error: false', 59),
    (2929, 'S3에 정적파일을 업로드할 때 사용하는 CLI 명령어는?', 2, '중', 'aws upload-file', 'aws s3 cp', 'aws s3 move', 'aws deploy', 59),
    (2930, 'Flask에서 기본 로깅 설정 없이도 로그를 남기기 위한 모듈은?', 2, '하', 'loguru', 'logging', 'flask_logger', 'logfile', 59),
    (2931, 'Gunicorn의 worker 타입 중 async I/O 기반으로 많이 쓰이는 것은?', 2, '중', 'sync', 'gevent', 'eventlet', 'thread', 59),
    (2932, 'Nginx 설정에서 CORS 허용을 위해 설정해야 할 헤더는?', 1, '중', 'Access-Control-Allow-Origin', 'Allow-Origin', 'CORS-Enabled', 'Cross-Origin-Allow', 59),
    (2933, 'Flask에서 환경 변수로 비밀 키를 설정하는 가장 안전한 방법은?', 3, '하', '코드에 하드코딩', 'config.py에 저장', '환경 변수로 분리하여 관리', '.gitignore에 추가', 59),
    (2934, 'GitHub Actions에서 특정 브랜치에만 CI가 실행되게 하려면 어떤 키워드를 사용하는가?', 1, '중', 'branches', 'trigger', 'on-push', 'runs-on', 59),
    (2935, 'DockerHub에 자동 푸시되도록 하려면 GitHub Actions에서 필요한 단계는?', 3, '중', 'setup-python', 'build', 'login to DockerHub', 'nginx-reload', 59),
    (2936, 'Flask에서 Prometheus Exporter를 사용할 때 가장 많이 쓰는 경로는?', 1, '중', '/metrics', '/status', '/monitor', '/health', 59),
    (2937, 'Sentry에서 Flask 에러를 추적하려면 어떤 방식으로 연동하는가?', 1, '하', 'Flask extension으로 추가', 'REST API로 직접 호출', 'HTML 템플릿에 삽입', 'S3에서 불러오기', 59),
    (2938, '`.env`에서 값을 가져올 때 발생할 수 있는 예외는?', 3, '중', 'KeyNotFoundError', 'ValueMissingException', 'KeyError', 'FileAccessError', 59),
    (2939, 'Nginx 설정에서 정적파일 경로를 지정할 때 사용하는 지시어는?', 2, '중', 'static_url', 'location', 'directory', 'static_pass', 59),
    (2940, 'DockerHub에 이미지를 푸시할 때 사용하는 명령은?', 2, '하', 'docker send', 'docker push', 'docker deploy', 'docker post', 59),
    (2941, 'Flask 서버를 Gunicorn으로 실행할 때 권장되는 명령어는?', 3, '하', 'python app.py', 'flask run', 'gunicorn app:app', 'waitress-serve app:app', 59),
    (2942, 'Docker에서 Flask 앱이 변경될 때마다 자동으로 재시작하려면 어떤 옵션을 사용해야 하나?', 4, '중', '--no-cache', '--watch', 'volumes', 'bind mount', 59),
    (2943, 'Flask 앱 설정에서 `app.config.from_envvar()`의 목적은?', 2, '중', '환경변수로 로깅 설정', '환경 변수에서 설정 파일 경로를 받아 설정', '환경 변수로 디버그 여부 설정', '환경 변수에 설정 저장', 59),
    (2944, 'GitHub Actions의 Job 단계 중 가장 먼저 수행되는 단계는?', 3, '중', 'build', 'name', 'runs-on', 'steps', 59),
    (2945, 'Flask에서 로깅 수준을 DEBUG로 설정하려면 어떤 코드가 필요한가?', 2, '중', 'logging.level = DEBUG', 'app.logger.setLevel(logging.DEBUG)', 'logger.debug = True', 'app.log_mode(''debug'')', 59),
    (2946, 'Waitress를 사용하여 Windows 환경에서 Flask를 실행하려면?', 1, '중', 'waitress-serve --call ''app:create_app''', 'gunicorn app:app', 'flask run --windows', 'uwsgi --http app:app', 59),
    (2947, 'Dockerfile에서 Python 패키지를 설치할 때 보통 사용하는 명령어는?', 3, '하', 'RUN install -r requirements.txt', 'RUN pip install requirements.txt', 'RUN pip install -r requirements.txt', 'RUN apt-get requirements.txt', 59),
    (2948, 'Flask config에서 설정 값을 불러오는 방법 중 올바른 것은?', 1, '하', 'app.config[''DEBUG'']', 'app.settings.debug', 'app.env.DEBUG', 'app[''DEBUG'']', 59),
    (2949, 'GitHub Actions에서 비밀 정보를 안전하게 사용하는 방법은?', 3, '하', '코드에 직접 입력', '환경변수에 저장', 'secrets에 저장하고 `${{ secrets.KEY }}`로 접근', '브랜치에 하드코딩', 59),
    (2950, 'Sentry에서 에러 발생 시 수집되는 정보가 아닌 것은?', 3, '중', 'stack trace', '브라우저 버전', '사용자 비밀번호', '요청 URL', 59);
